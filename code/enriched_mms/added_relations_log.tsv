air conditioner worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('hot coils', 'connects', 'expansion valve'), True)	(('expansion valve', 'connects', 'hot coils'), True)
Constraint 1: x rln y <-> y rln x	(('hot coils', 'connects', 'compressor'), True)	(('compressor', 'connects', 'hot coils'), True)
Constraint 1: x rln y <-> y rln x	(('expansion valve', 'connects', 'cold coils'), True)	(('cold coils', 'connects', 'expansion valve'), True)
Constraint 1: x rln y <-> y rln x	(('compressor', 'connects', 'cold coils'), True)	(('cold coils', 'connects', 'compressor'), True)
Round 2 ...
air conditioner worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('hot coils', 'connects', 'compressor'), True)	(('compressor', 'connects', 'hot coils'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hot coils', 'requires', 'compressor'), True)	(('compressor', 'requires', 'hot coils'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hot coils', 'requires', 'compressor'), True)	(('compressor', 'required by', 'hot coils'), True)
Constraint 1: x rln y <-> y rln x	(('hot coils', 'connects', 'expansion valve'), True)	(('expansion valve', 'connects', 'hot coils'), True)
Constraint 1: x rln y <-> y rln x	(('compressor', 'connects', 'cold coils'), True)	(('cold coils', 'connects', 'compressor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cold coils', 'requires', 'compressor'), True)	(('compressor', 'requires', 'cold coils'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cold coils', 'requires', 'compressor'), True)	(('compressor', 'required by', 'cold coils'), True)
Constraint 1: x rln y <-> y rln x	(('cold coils', 'connects', 'expansion valve'), True)	(('expansion valve', 'connects', 'cold coils'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('compressor', 'requires', 'hot coils'), False)	(('hot coils', 'required by', 'compressor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('compressor', 'requires', 'cold coils'), False)	(('cold coils', 'required by', 'compressor'), False)
Round 3 ...
air conditioner worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('compressor', 'requires', 'condenser'), True)	(('condenser', 'requires', 'compressor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('compressor', 'requires', 'condenser'), True)	(('condenser', 'required by', 'compressor'), True)
Constraint 1: x rln y <-> y rln x	(('compressor', 'connects', 'condenser'), True)	(('condenser', 'connects', 'compressor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('compressor', 'requires', 'evaporator'), True)	(('evaporator', 'requires', 'compressor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('compressor', 'requires', 'evaporator'), True)	(('evaporator', 'required by', 'compressor'), True)
Constraint 1: x rln y <-> y rln x	(('compressor', 'connects', 'evaporator'), True)	(('evaporator', 'connects', 'compressor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('condenser', 'requires', 'expansion valve'), True)	(('expansion valve', 'requires', 'condenser'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('condenser', 'requires', 'expansion valve'), True)	(('expansion valve', 'required by', 'condenser'), True)
Constraint 1: x rln y <-> y rln x	(('condenser', 'connects', 'expansion valve'), True)	(('expansion valve', 'connects', 'condenser'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('evaporator', 'requires', 'expansion valve'), True)	(('expansion valve', 'requires', 'evaporator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('evaporator', 'requires', 'expansion valve'), True)	(('expansion valve', 'required by', 'evaporator'), True)
Constraint 1: x rln y <-> y rln x	(('evaporator', 'connects', 'expansion valve'), True)	(('expansion valve', 'connects', 'evaporator'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('condenser', 'requires', 'compressor'), False)	(('compressor', 'required by', 'condenser'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('evaporator', 'requires', 'compressor'), False)	(('compressor', 'required by', 'evaporator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('expansion valve', 'requires', 'condenser'), False)	(('condenser', 'required by', 'expansion valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('expansion valve', 'requires', 'evaporator'), False)	(('evaporator', 'required by', 'expansion valve'), False)
Round 3 ...
bicycle worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('brake lever', 'connects', 'left handlebar'), True)	(('left handlebar', 'connects', 'brake lever'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('left handlebar', 'above', 'frame'), True)	(('frame', 'above', 'left handlebar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('left handlebar', 'above', 'frame'), True)	(('frame', 'below', 'left handlebar'), True)
Constraint 1: x rln y <-> y rln x	(('left handlebar', 'connects', 'frame'), True)	(('frame', 'connects', 'left handlebar'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'frame'), True)	(('frame', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'frame'), True)	(('frame', 'below', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'connects', 'frame'), True)	(('frame', 'connects', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('brake', 'connects', 'frame'), True)	(('frame', 'connects', 'brake'), True)
Constraint 1: x rln y <-> y rln x	(('chain', 'connects', 'frame'), True)	(('frame', 'connects', 'chain'), True)
Constraint 1: x rln y <-> y rln x	(('gear', 'connects', 'frame'), True)	(('frame', 'connects', 'gear'), True)
Constraint 1: x rln y <-> y rln x	(('rear wheel', 'connects', 'frame'), True)	(('frame', 'connects', 'rear wheel'), True)
Constraint 1: x rln y <-> y rln x	(('front wheel', 'connects', 'frame'), True)	(('frame', 'connects', 'front wheel'), True)
Constraint 1: x rln y <-> y rln x	(('right handlebar', 'connects', 'frame'), True)	(('frame', 'connects', 'right handlebar'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('right handlebar', 'above', 'frame'), True)	(('frame', 'above', 'right handlebar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('right handlebar', 'above', 'frame'), True)	(('frame', 'below', 'right handlebar'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front wheel', 'behind', 'rear wheel'), True)	(('rear wheel', 'behind', 'front wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front wheel', 'behind', 'rear wheel'), True)	(('rear wheel', 'in front of', 'front wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('chain', 'surrounds', 'gear'), True)	(('gear', 'surrounds', 'chain'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chain', 'surrounds', 'gear'), True)	(('gear', 'surrounded by', 'chain'), True)
Constraint 1: x rln y <-> y rln x	(('chain', 'connects', 'gear'), True)	(('gear', 'connects', 'chain'), True)
Constraint 1: x rln y <-> y rln x	(('gear', 'connects', 'pedals'), True)	(('pedals', 'connects', 'gear'), True)
Constraint 1: x rln y <-> y rln x	(('brake', 'next to', 'rear wheel'), True)	(('rear wheel', 'next to', 'brake'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'left handlebar'), False)	(('left handlebar', 'below', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'seat'), False)	(('seat', 'below', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'right handlebar'), False)	(('right handlebar', 'below', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rear wheel', 'behind', 'front wheel'), False)	(('front wheel', 'in front of', 'rear wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gear', 'surrounds', 'chain'), False)	(('chain', 'surrounded by', 'gear'), False)
Round 3 ...
bicycle worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('handlebars', 'connects', 'brake lever'), True)	(('brake lever', 'connects', 'handlebars'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('brake lever', 'requires', 'brake'), True)	(('brake', 'requires', 'brake lever'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('brake lever', 'requires', 'brake'), True)	(('brake', 'required by', 'brake lever'), True)
Constraint 1: x rln y <-> y rln x	(('brake', 'connects', 'frame'), True)	(('frame', 'connects', 'brake'), True)
Constraint 1: x rln y <-> y rln x	(('handlebars', 'connects', 'frame'), True)	(('frame', 'connects', 'handlebars'), True)
Constraint 1: x rln y <-> y rln x	(('wheels', 'connects', 'frame'), True)	(('frame', 'connects', 'wheels'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'connects', 'frame'), True)	(('frame', 'connects', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'pedals'), True)	(('pedals', 'above', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'pedals'), True)	(('pedals', 'below', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pedals', 'requires', 'gear'), True)	(('gear', 'requires', 'pedals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pedals', 'requires', 'gear'), True)	(('gear', 'required by', 'pedals'), True)
Constraint 1: x rln y <-> y rln x	(('gear', 'connects', 'wheels'), True)	(('wheels', 'connects', 'gear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pedals', 'requires', 'chain'), True)	(('chain', 'requires', 'pedals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pedals', 'requires', 'chain'), True)	(('chain', 'required by', 'pedals'), True)
Constraint 1: x rln y <-> y rln x	(('wheels', 'connects', 'chain'), True)	(('chain', 'connects', 'wheels'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('brake', 'requires', 'brake lever'), False)	(('brake lever', 'required by', 'brake'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pedals', 'above', 'frame'), False)	(('frame', 'below', 'pedals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gear', 'requires', 'pedals'), False)	(('pedals', 'required by', 'gear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chain', 'requires', 'pedals'), False)	(('pedals', 'required by', 'chain'), False)
Round 3 ...
bicycle worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'frame'), True)	(('frame', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'frame'), True)	(('frame', 'below', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'behind', 'handlebars'), True)	(('handlebars', 'behind', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'behind', 'handlebars'), True)	(('handlebars', 'in front of', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'pedals'), True)	(('pedals', 'above', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'pedals'), True)	(('pedals', 'below', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('pedals', 'connects', 'gear'), True)	(('gear', 'connects', 'pedals'), True)
Constraint 1: x rln y <-> y rln x	(('gear', 'connects', 'chain'), True)	(('chain', 'connects', 'gear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('brake lever', 'part of', 'handlebars'), True)	(('handlebars', 'part of', 'brake lever'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('brake lever', 'part of', 'handlebars'), True)	(('handlebars', 'has part', 'brake lever'), True)
Constraint 1: x rln y <-> y rln x	(('brake lever', 'connects', 'brake'), True)	(('brake', 'connects', 'brake lever'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('brake', 'surrounds', 'wheels'), True)	(('wheels', 'surrounds', 'brake'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('brake', 'surrounds', 'wheels'), True)	(('wheels', 'surrounded by', 'brake'), True)
Constraint 4 (True antecedent)	('seat', 'above', 'frame')('frame', 'above', 'pedals')	(('seat', 'above', 'pedals'), True)
Constraint 4 (True antecedent)	('pedals', 'below', 'frame')('frame', 'below', 'seat')	(('pedals', 'below', 'seat'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'seat'), False)	(('seat', 'below', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handlebars', 'behind', 'frame'), False)	(('frame', 'in front of', 'handlebars'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pedals', 'above', 'frame'), False)	(('frame', 'below', 'pedals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handlebars', 'part of', 'brake lever'), False)	(('brake lever', 'has part', 'handlebars'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'surrounds', 'brake'), False)	(('brake', 'surrounded by', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'pedals'), True)	(('pedals', 'above', 'seat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pedals', 'below', 'seat'), True)	(('seat', 'below', 'pedals'), False)
Round 3 ...
binoculars worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('diopter', 'connects', 'adjustable eye cup'), True)	(('adjustable eye cup', 'connects', 'diopter'), True)
Constraint 1: x rln y <-> y rln x	(('diopter', 'next to', 'adjustable eye cup'), True)	(('adjustable eye cup', 'next to', 'diopter'), True)
Constraint 1: x rln y <-> y rln x	(('diopter', 'next to', 'focus'), True)	(('focus', 'next to', 'diopter'), True)
Constraint 1: x rln y <-> y rln x	(('diopter', 'connects', 'frame'), True)	(('frame', 'connects', 'diopter'), True)
Constraint 1: x rln y <-> y rln x	(('focus', 'connects', 'frame'), True)	(('frame', 'connects', 'focus'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'objective lens'), True)	(('objective lens', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'next to', 'ocular lens'), True)	(('ocular lens', 'next to', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'ocular lens'), True)	(('ocular lens', 'connects', 'frame'), True)
Round 2 ...
binoculars worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('diopter', 'behind', 'objective lens'), True)	(('objective lens', 'behind', 'diopter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('diopter', 'behind', 'objective lens'), True)	(('objective lens', 'in front of', 'diopter'), True)
Constraint 1: x rln y <-> y rln x	(('diopter', 'connects', 'adjustable eye cup'), True)	(('adjustable eye cup', 'connects', 'diopter'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('focus', 'behind', 'adjustable eye cup'), True)	(('adjustable eye cup', 'behind', 'focus'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('focus', 'behind', 'adjustable eye cup'), True)	(('adjustable eye cup', 'in front of', 'focus'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ocular lens', 'behind', 'adjustable eye cup'), True)	(('adjustable eye cup', 'behind', 'ocular lens'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ocular lens', 'behind', 'adjustable eye cup'), True)	(('adjustable eye cup', 'in front of', 'ocular lens'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('adjustable eye cup', 'behind', 'diopter'), True)	(('diopter', 'behind', 'adjustable eye cup'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('adjustable eye cup', 'behind', 'diopter'), True)	(('diopter', 'in front of', 'adjustable eye cup'), True)
Constraint 1: x rln y <-> y rln x	(('adjustable eye cup', 'connects', 'focus'), True)	(('focus', 'connects', 'adjustable eye cup'), True)
Constraint 1: x rln y <-> y rln x	(('adjustable eye cup', 'connects', 'ocular lens'), True)	(('ocular lens', 'connects', 'adjustable eye cup'), True)
Constraint 4 (True antecedent)	('focus', 'behind', 'adjustable eye cup')('adjustable eye cup', 'behind', 'diopter')	(('focus', 'behind', 'diopter'), True)
Constraint 4 (True antecedent)	('ocular lens', 'behind', 'adjustable eye cup')('adjustable eye cup', 'behind', 'diopter')	(('ocular lens', 'behind', 'diopter'), True)
Constraint 4 (True antecedent)	('adjustable eye cup', 'behind', 'diopter')('diopter', 'behind', 'objective lens')	(('adjustable eye cup', 'behind', 'objective lens'), True)
Constraint 4 (True antecedent)	('objective lens', 'in front of', 'diopter')('diopter', 'in front of', 'adjustable eye cup')	(('objective lens', 'in front of', 'adjustable eye cup'), True)
Constraint 4 (True antecedent)	('diopter', 'in front of', 'adjustable eye cup')('adjustable eye cup', 'in front of', 'focus')	(('diopter', 'in front of', 'focus'), True)
Constraint 4 (True antecedent)	('diopter', 'in front of', 'adjustable eye cup')('adjustable eye cup', 'in front of', 'ocular lens')	(('diopter', 'in front of', 'ocular lens'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('objective lens', 'behind', 'diopter'), False)	(('diopter', 'in front of', 'objective lens'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('adjustable eye cup', 'behind', 'focus'), False)	(('focus', 'in front of', 'adjustable eye cup'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('adjustable eye cup', 'behind', 'ocular lens'), False)	(('ocular lens', 'in front of', 'adjustable eye cup'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('diopter', 'behind', 'adjustable eye cup'), False)	(('adjustable eye cup', 'in front of', 'diopter'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('focus', 'behind', 'diopter'), True)	(('diopter', 'behind', 'focus'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ocular lens', 'behind', 'diopter'), True)	(('diopter', 'behind', 'ocular lens'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('adjustable eye cup', 'behind', 'objective lens'), True)	(('objective lens', 'behind', 'adjustable eye cup'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('objective lens', 'in front of', 'adjustable eye cup'), True)	(('adjustable eye cup', 'in front of', 'objective lens'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('diopter', 'in front of', 'focus'), True)	(('focus', 'in front of', 'diopter'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('diopter', 'in front of', 'ocular lens'), True)	(('ocular lens', 'in front of', 'diopter'), False)
Constraint 4 (True antecedent)	('focus', 'behind', 'adjustable eye cup')('adjustable eye cup', 'behind', 'objective lens')	(('focus', 'behind', 'objective lens'), True)
Constraint 4 (True antecedent)	('ocular lens', 'behind', 'adjustable eye cup')('adjustable eye cup', 'behind', 'objective lens')	(('ocular lens', 'behind', 'objective lens'), True)
Constraint 4 (True antecedent)	('objective lens', 'in front of', 'diopter')('diopter', 'in front of', 'focus')	(('objective lens', 'in front of', 'focus'), True)
Constraint 4 (True antecedent)	('objective lens', 'in front of', 'diopter')('diopter', 'in front of', 'ocular lens')	(('objective lens', 'in front of', 'ocular lens'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('focus', 'behind', 'objective lens'), True)	(('objective lens', 'behind', 'focus'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ocular lens', 'behind', 'objective lens'), True)	(('objective lens', 'behind', 'ocular lens'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('objective lens', 'in front of', 'focus'), True)	(('focus', 'in front of', 'objective lens'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('objective lens', 'in front of', 'ocular lens'), True)	(('ocular lens', 'in front of', 'objective lens'), False)
Round 4 ...
binoculars worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('focus', 'next to', 'ocular lens'), True)	(('ocular lens', 'next to', 'focus'), True)
Constraint 1: x rln y <-> y rln x	(('focus', 'next to', 'adjustable eye cup'), True)	(('adjustable eye cup', 'next to', 'focus'), True)
Constraint 1: x rln y <-> y rln x	(('focus', 'next to', 'diopter'), True)	(('diopter', 'next to', 'focus'), True)
Constraint 1: x rln y <-> y rln x	(('ocular lens', 'connects', 'adjustable eye cup'), True)	(('adjustable eye cup', 'connects', 'ocular lens'), True)
Constraint 1: x rln y <-> y rln x	(('diopter', 'connects', 'adjustable eye cup'), True)	(('adjustable eye cup', 'connects', 'diopter'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('diopter', 'behind', 'objective lens'), True)	(('objective lens', 'behind', 'diopter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('diopter', 'behind', 'objective lens'), True)	(('objective lens', 'in front of', 'diopter'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('objective lens', 'behind', 'diopter'), False)	(('diopter', 'in front of', 'objective lens'), False)
Round 3 ...
blender worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('refilling cap', 'connects', 'lid'), True)	(('lid', 'connects', 'refilling cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('refilling cap', 'above', 'lid'), True)	(('lid', 'above', 'refilling cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('refilling cap', 'above', 'lid'), True)	(('lid', 'below', 'refilling cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'pitcher'), True)	(('pitcher', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'pitcher'), True)	(('pitcher', 'below', 'lid'), True)
Constraint 1: x rln y <-> y rln x	(('lid', 'connects', 'pitcher'), True)	(('pitcher', 'connects', 'lid'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'next to', 'pitcher'), True)	(('pitcher', 'next to', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'pitcher'), True)	(('pitcher', 'connects', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pitcher', 'above', 'base'), True)	(('base', 'above', 'pitcher'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pitcher', 'above', 'base'), True)	(('base', 'below', 'pitcher'), True)
Constraint 1: x rln y <-> y rln x	(('pitcher', 'connects', 'base'), True)	(('base', 'connects', 'pitcher'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power', 'part of', 'control board'), True)	(('control board', 'part of', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'part of', 'control board'), True)	(('control board', 'has part', 'power'), True)
Constraint 1: x rln y <-> y rln x	(('base', 'connects', 'control board'), True)	(('control board', 'connects', 'base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control board', 'above', 'base'), True)	(('base', 'above', 'control board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control board', 'above', 'base'), True)	(('base', 'below', 'control board'), True)
Constraint 4 (True antecedent)	('refilling cap', 'above', 'lid')('lid', 'above', 'pitcher')	(('refilling cap', 'above', 'pitcher'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'pitcher')('pitcher', 'above', 'base')	(('lid', 'above', 'base'), True)
Constraint 4 (True antecedent)	('pitcher', 'below', 'lid')('lid', 'below', 'refilling cap')	(('pitcher', 'below', 'refilling cap'), True)
Constraint 4 (True antecedent)	('base', 'below', 'pitcher')('pitcher', 'below', 'lid')	(('base', 'below', 'lid'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'refilling cap'), False)	(('refilling cap', 'below', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pitcher', 'above', 'lid'), False)	(('lid', 'below', 'pitcher'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'pitcher'), False)	(('pitcher', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control board', 'part of', 'power'), False)	(('power', 'has part', 'control board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'control board'), False)	(('control board', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('refilling cap', 'above', 'pitcher'), True)	(('pitcher', 'above', 'refilling cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'base'), True)	(('base', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pitcher', 'below', 'refilling cap'), True)	(('refilling cap', 'below', 'pitcher'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'lid'), True)	(('lid', 'below', 'base'), False)
Constraint 4 (True antecedent)	('refilling cap', 'above', 'lid')('lid', 'above', 'base')	(('refilling cap', 'above', 'base'), True)
Constraint 4 (True antecedent)	('base', 'below', 'pitcher')('pitcher', 'below', 'refilling cap')	(('base', 'below', 'refilling cap'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('refilling cap', 'above', 'base'), True)	(('base', 'above', 'refilling cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'refilling cap'), True)	(('refilling cap', 'below', 'base'), False)
Round 4 ...
blender worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('refilling cap', 'connects', 'lid'), True)	(('lid', 'connects', 'refilling cap'), True)
Constraint 1: x rln y <-> y rln x	(('lid', 'connects', 'pitcher'), True)	(('pitcher', 'connects', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'part of', 'pitcher'), True)	(('pitcher', 'part of', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'pitcher'), True)	(('pitcher', 'has part', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('pitcher', 'connects', 'base'), True)	(('base', 'connects', 'pitcher'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control board', 'part of', 'base'), True)	(('base', 'part of', 'control board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control board', 'part of', 'base'), True)	(('base', 'has part', 'control board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control board', 'requires', 'power'), True)	(('power', 'requires', 'control board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control board', 'requires', 'power'), True)	(('power', 'required by', 'control board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power', 'part of', 'base'), True)	(('base', 'part of', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'part of', 'base'), True)	(('base', 'has part', 'power'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('pitcher', 'part of', 'handle'), False)	(('handle', 'has part', 'pitcher'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'control board'), False)	(('control board', 'has part', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'requires', 'control board'), False)	(('control board', 'required by', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'power'), False)	(('power', 'has part', 'base'), False)
Round 3 ...
blender worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('refilling cap', 'above', 'lid'), True)	(('lid', 'above', 'refilling cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('refilling cap', 'above', 'lid'), True)	(('lid', 'below', 'refilling cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'pitcher'), True)	(('pitcher', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'pitcher'), True)	(('pitcher', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'handle'), True)	(('handle', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'handle'), True)	(('handle', 'below', 'lid'), True)
Constraint 1: x rln y <-> y rln x	(('pitcher', 'next to', 'handle'), True)	(('handle', 'next to', 'pitcher'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pitcher', 'above', 'power'), True)	(('power', 'above', 'pitcher'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pitcher', 'above', 'power'), True)	(('power', 'below', 'pitcher'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power', 'above', 'base'), True)	(('base', 'above', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'above', 'base'), True)	(('base', 'below', 'power'), True)
Constraint 1: x rln y <-> y rln x	(('power', 'next to', 'control board'), True)	(('control board', 'next to', 'power'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control board', 'above', 'base'), True)	(('base', 'above', 'control board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control board', 'above', 'base'), True)	(('base', 'below', 'control board'), True)
Constraint 4 (True antecedent)	('refilling cap', 'above', 'lid')('lid', 'above', 'pitcher')	(('refilling cap', 'above', 'pitcher'), True)
Constraint 4 (True antecedent)	('refilling cap', 'above', 'lid')('lid', 'above', 'handle')	(('refilling cap', 'above', 'handle'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'pitcher')('pitcher', 'above', 'power')	(('lid', 'above', 'power'), True)
Constraint 4 (True antecedent)	('pitcher', 'above', 'power')('power', 'above', 'base')	(('pitcher', 'above', 'base'), True)
Constraint 4 (True antecedent)	('pitcher', 'below', 'lid')('lid', 'below', 'refilling cap')	(('pitcher', 'below', 'refilling cap'), True)
Constraint 4 (True antecedent)	('handle', 'below', 'lid')('lid', 'below', 'refilling cap')	(('handle', 'below', 'refilling cap'), True)
Constraint 4 (True antecedent)	('power', 'below', 'pitcher')('pitcher', 'below', 'lid')	(('power', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('base', 'below', 'power')('power', 'below', 'pitcher')	(('base', 'below', 'pitcher'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'refilling cap'), False)	(('refilling cap', 'below', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pitcher', 'above', 'lid'), False)	(('lid', 'below', 'pitcher'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'lid'), False)	(('lid', 'below', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'above', 'pitcher'), False)	(('pitcher', 'below', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'power'), False)	(('power', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'control board'), False)	(('control board', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('refilling cap', 'above', 'pitcher'), True)	(('pitcher', 'above', 'refilling cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('refilling cap', 'above', 'handle'), True)	(('handle', 'above', 'refilling cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'power'), True)	(('power', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pitcher', 'above', 'base'), True)	(('base', 'above', 'pitcher'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pitcher', 'below', 'refilling cap'), True)	(('refilling cap', 'below', 'pitcher'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'below', 'refilling cap'), True)	(('refilling cap', 'below', 'handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('power', 'below', 'lid'), True)	(('lid', 'below', 'power'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'pitcher'), True)	(('pitcher', 'below', 'base'), False)
Constraint 4 (True antecedent)	('refilling cap', 'above', 'lid')('lid', 'above', 'power')	(('refilling cap', 'above', 'power'), True)
Constraint 4 (True antecedent)	('refilling cap', 'above', 'pitcher')('pitcher', 'above', 'base')	(('refilling cap', 'above', 'base'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'pitcher')('pitcher', 'above', 'base')	(('lid', 'above', 'base'), True)
Constraint 4 (True antecedent)	('power', 'below', 'pitcher')('pitcher', 'below', 'refilling cap')	(('power', 'below', 'refilling cap'), True)
Constraint 4 (True antecedent)	('base', 'below', 'power')('power', 'below', 'lid')	(('base', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('base', 'below', 'pitcher')('pitcher', 'below', 'refilling cap')	(('base', 'below', 'refilling cap'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('refilling cap', 'above', 'power'), True)	(('power', 'above', 'refilling cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('refilling cap', 'above', 'base'), True)	(('base', 'above', 'refilling cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'base'), True)	(('base', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('power', 'below', 'refilling cap'), True)	(('refilling cap', 'below', 'power'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'lid'), True)	(('lid', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'refilling cap'), True)	(('refilling cap', 'below', 'base'), False)
Round 4 ...
boat worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'transom'), True)	(('transom', 'behind', 'stern'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'behind', 'transom'), True)	(('transom', 'in front of', 'stern'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('transom', 'behind', 'port'), True)	(('port', 'behind', 'transom'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transom', 'behind', 'port'), True)	(('port', 'in front of', 'transom'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('transom', 'behind', 'starboard'), True)	(('starboard', 'behind', 'transom'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transom', 'behind', 'starboard'), True)	(('starboard', 'in front of', 'transom'), True)
Constraint 1: x rln y <-> y rln x	(('port', 'next to', 'starboard'), True)	(('starboard', 'next to', 'port'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('port', 'above', 'hull'), True)	(('hull', 'above', 'port'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('port', 'above', 'hull'), True)	(('hull', 'below', 'port'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('starboard', 'above', 'hull'), True)	(('hull', 'above', 'starboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('starboard', 'above', 'hull'), True)	(('hull', 'below', 'starboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('port', 'behind', 'gunwale'), True)	(('gunwale', 'behind', 'port'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('port', 'behind', 'gunwale'), True)	(('gunwale', 'in front of', 'port'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('starboard', 'behind', 'gunwale'), True)	(('gunwale', 'behind', 'starboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('starboard', 'behind', 'gunwale'), True)	(('gunwale', 'in front of', 'starboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gunwale', 'above', 'hull'), True)	(('hull', 'above', 'gunwale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gunwale', 'above', 'hull'), True)	(('hull', 'below', 'gunwale'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gunwale', 'behind', 'bow'), True)	(('bow', 'behind', 'gunwale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gunwale', 'behind', 'bow'), True)	(('bow', 'in front of', 'gunwale'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'transom')('transom', 'behind', 'port')	(('stern', 'behind', 'port'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'transom')('transom', 'behind', 'starboard')	(('stern', 'behind', 'starboard'), True)
Constraint 4 (True antecedent)	('transom', 'behind', 'port')('port', 'behind', 'gunwale')	(('transom', 'behind', 'gunwale'), True)
Constraint 4 (True antecedent)	('port', 'behind', 'gunwale')('gunwale', 'behind', 'bow')	(('port', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('starboard', 'behind', 'gunwale')('gunwale', 'behind', 'bow')	(('starboard', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('port', 'in front of', 'transom')('transom', 'in front of', 'stern')	(('port', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('starboard', 'in front of', 'transom')('transom', 'in front of', 'stern')	(('starboard', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('gunwale', 'in front of', 'port')('port', 'in front of', 'transom')	(('gunwale', 'in front of', 'transom'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'gunwale')('gunwale', 'in front of', 'port')	(('bow', 'in front of', 'port'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'gunwale')('gunwale', 'in front of', 'starboard')	(('bow', 'in front of', 'starboard'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('transom', 'behind', 'stern'), False)	(('stern', 'in front of', 'transom'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('port', 'behind', 'transom'), False)	(('transom', 'in front of', 'port'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('starboard', 'behind', 'transom'), False)	(('transom', 'in front of', 'starboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hull', 'above', 'port'), False)	(('port', 'below', 'hull'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hull', 'above', 'starboard'), False)	(('starboard', 'below', 'hull'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gunwale', 'behind', 'port'), False)	(('port', 'in front of', 'gunwale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gunwale', 'behind', 'starboard'), False)	(('starboard', 'in front of', 'gunwale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hull', 'above', 'gunwale'), False)	(('gunwale', 'below', 'hull'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'behind', 'gunwale'), False)	(('gunwale', 'in front of', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'port'), True)	(('port', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'starboard'), True)	(('starboard', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('transom', 'behind', 'gunwale'), True)	(('gunwale', 'behind', 'transom'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('port', 'behind', 'bow'), True)	(('bow', 'behind', 'port'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('starboard', 'behind', 'bow'), True)	(('bow', 'behind', 'starboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('port', 'in front of', 'stern'), True)	(('stern', 'in front of', 'port'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('starboard', 'in front of', 'stern'), True)	(('stern', 'in front of', 'starboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gunwale', 'in front of', 'transom'), True)	(('transom', 'in front of', 'gunwale'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'port'), True)	(('port', 'in front of', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'starboard'), True)	(('starboard', 'in front of', 'bow'), False)
Constraint 4 (True antecedent)	('stern', 'behind', 'transom')('transom', 'behind', 'gunwale')	(('stern', 'behind', 'gunwale'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'port')('port', 'behind', 'bow')	(('stern', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('transom', 'behind', 'port')('port', 'behind', 'bow')	(('transom', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('gunwale', 'in front of', 'port')('port', 'in front of', 'stern')	(('gunwale', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'gunwale')('gunwale', 'in front of', 'transom')	(('bow', 'in front of', 'transom'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'port')('port', 'in front of', 'stern')	(('bow', 'in front of', 'stern'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'gunwale'), True)	(('gunwale', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'bow'), True)	(('bow', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('transom', 'behind', 'bow'), True)	(('bow', 'behind', 'transom'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gunwale', 'in front of', 'stern'), True)	(('stern', 'in front of', 'gunwale'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'transom'), True)	(('transom', 'in front of', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'stern'), True)	(('stern', 'in front of', 'bow'), False)
Round 4 ...
boat worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'transom'), True)	(('transom', 'behind', 'stern'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'behind', 'transom'), True)	(('transom', 'in front of', 'stern'), True)
Constraint 1: x rln y <-> y rln x	(('transom', 'next to', 'port'), True)	(('port', 'next to', 'transom'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('transom', 'above', 'hull'), True)	(('hull', 'above', 'transom'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transom', 'above', 'hull'), True)	(('hull', 'below', 'transom'), True)
Constraint 1: x rln y <-> y rln x	(('transom', 'next to', 'starboard'), True)	(('starboard', 'next to', 'transom'), True)
Constraint 1: x rln y <-> y rln x	(('port', 'connects', 'hull'), True)	(('hull', 'connects', 'port'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hull', 'behind', 'bow'), True)	(('bow', 'behind', 'hull'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hull', 'behind', 'bow'), True)	(('bow', 'in front of', 'hull'), True)
Constraint 1: x rln y <-> y rln x	(('hull', 'connects', 'starboard'), True)	(('starboard', 'connects', 'hull'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gunwale', 'above', 'bow'), True)	(('bow', 'above', 'gunwale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gunwale', 'above', 'bow'), True)	(('bow', 'below', 'gunwale'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gunwale', 'above', 'starboard'), True)	(('starboard', 'above', 'gunwale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gunwale', 'above', 'starboard'), True)	(('starboard', 'below', 'gunwale'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('transom', 'behind', 'stern'), False)	(('stern', 'in front of', 'transom'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hull', 'above', 'transom'), False)	(('transom', 'below', 'hull'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'behind', 'hull'), False)	(('hull', 'in front of', 'bow'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'above', 'gunwale'), False)	(('gunwale', 'below', 'bow'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('starboard', 'above', 'gunwale'), False)	(('gunwale', 'below', 'starboard'), False)
Round 3 ...
boat worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('transom', 'part of', 'stern'), True)	(('stern', 'part of', 'transom'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transom', 'part of', 'stern'), True)	(('stern', 'has part', 'transom'), True)
Constraint 1: x rln y <-> y rln x	(('stern', 'connects', 'hull'), True)	(('hull', 'connects', 'stern'), True)
Constraint 1: x rln y <-> y rln x	(('port', 'connects', 'hull'), True)	(('hull', 'connects', 'port'), True)
Constraint 1: x rln y <-> y rln x	(('hull', 'connects', 'starboard'), True)	(('starboard', 'connects', 'hull'), True)
Constraint 1: x rln y <-> y rln x	(('hull', 'connects', 'gunwale'), True)	(('gunwale', 'connects', 'hull'), True)
Constraint 1: x rln y <-> y rln x	(('hull', 'connects', 'bow'), True)	(('bow', 'connects', 'hull'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'part of', 'transom'), False)	(('transom', 'has part', 'stern'), False)
Round 3 ...
digital camera worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('power switch', 'next to', 'mode dial'), True)	(('mode dial', 'next to', 'power switch'), True)
Constraint 1: x rln y <-> y rln x	(('mode dial', 'next to', 'main dial'), True)	(('main dial', 'next to', 'mode dial'), True)
Constraint 1: x rln y <-> y rln x	(('main dial', 'next to', 'shutter button'), True)	(('shutter button', 'next to', 'main dial'), True)
Constraint 1: x rln y <-> y rln x	(('power switch', 'next to', 'shutter button'), True)	(('shutter button', 'next to', 'power switch'), True)
Constraint 1: x rln y <-> y rln x	(('mode dial', 'next to', 'flash'), True)	(('flash', 'next to', 'mode dial'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flash', 'requires', 'flash button'), True)	(('flash button', 'requires', 'flash'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flash', 'requires', 'flash button'), True)	(('flash button', 'required by', 'flash'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flash', 'above', 'lens'), True)	(('lens', 'above', 'flash'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flash', 'above', 'lens'), True)	(('lens', 'below', 'flash'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flash button', 'above', 'lens'), True)	(('lens', 'above', 'flash button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flash button', 'above', 'lens'), True)	(('lens', 'below', 'flash button'), True)
Constraint 1: x rln y <-> y rln x	(('lens', 'next to', 'lens release'), True)	(('lens release', 'next to', 'lens'), True)
Constraint 1: x rln y <-> y rln x	(('lens', 'next to', 'focus switch mode'), True)	(('focus switch mode', 'next to', 'lens'), True)
Constraint 1: x rln y <-> y rln x	(('lens', 'next to', 'shutter button'), True)	(('shutter button', 'next to', 'lens'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('flash button', 'requires', 'flash'), False)	(('flash', 'required by', 'flash button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lens', 'above', 'flash'), False)	(('flash', 'below', 'lens'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lens', 'above', 'flash button'), False)	(('flash button', 'below', 'lens'), False)
Round 3 ...
digital camera worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('mode dial', 'next to', 'flash'), True)	(('flash', 'next to', 'mode dial'), True)
Constraint 1: x rln y <-> y rln x	(('mode dial', 'next to', 'power switch'), True)	(('power switch', 'next to', 'mode dial'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flash', 'above', 'flash button'), True)	(('flash button', 'above', 'flash'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flash', 'above', 'flash button'), True)	(('flash button', 'below', 'flash'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flash button', 'above', 'lens release'), True)	(('lens release', 'above', 'flash button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flash button', 'above', 'lens release'), True)	(('lens release', 'below', 'flash button'), True)
Constraint 1: x rln y <-> y rln x	(('lens release', 'next to', 'lens'), True)	(('lens', 'next to', 'lens release'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power switch', 'above', 'shutter button'), True)	(('shutter button', 'above', 'power switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power switch', 'above', 'shutter button'), True)	(('shutter button', 'below', 'power switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('settings', 'behind', 'lens'), True)	(('lens', 'behind', 'settings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('settings', 'behind', 'lens'), True)	(('lens', 'in front of', 'settings'), True)
Constraint 4 (True antecedent)	('flash', 'above', 'flash button')('flash button', 'above', 'lens release')	(('flash', 'above', 'lens release'), True)
Constraint 4 (True antecedent)	('lens release', 'below', 'flash button')('flash button', 'below', 'flash')	(('lens release', 'below', 'flash'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('flash button', 'above', 'flash'), False)	(('flash', 'below', 'flash button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lens release', 'above', 'flash button'), False)	(('flash button', 'below', 'lens release'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shutter button', 'above', 'power switch'), False)	(('power switch', 'below', 'shutter button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lens', 'behind', 'settings'), False)	(('settings', 'in front of', 'lens'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flash', 'above', 'lens release'), True)	(('lens release', 'above', 'flash'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lens release', 'below', 'flash'), True)	(('flash', 'below', 'lens release'), False)
Round 3 ...
digital camera worker_105...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('power button', 'next to', 'shutter button'), True)	(('shutter button', 'next to', 'power button'), True)
Constraint 1: x rln y <-> y rln x	(('power button', 'next to', 'mode dial'), True)	(('mode dial', 'next to', 'power button'), True)
Constraint 1: x rln y <-> y rln x	(('mode dial', 'next to', 'flash'), True)	(('flash', 'next to', 'mode dial'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flash', 'above', 'lens release'), True)	(('lens release', 'above', 'flash'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flash', 'above', 'lens release'), True)	(('lens release', 'below', 'flash'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lens release', 'behind', 'lens'), True)	(('lens', 'behind', 'lens release'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lens release', 'behind', 'lens'), True)	(('lens', 'in front of', 'lens release'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lens release', 'behind', 'shutter'), True)	(('shutter', 'behind', 'lens release'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lens release', 'behind', 'shutter'), True)	(('shutter', 'in front of', 'lens release'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('display', 'behind', 'lens release'), True)	(('lens release', 'behind', 'display'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('display', 'behind', 'lens release'), True)	(('lens release', 'in front of', 'display'), True)
Constraint 1: x rln y <-> y rln x	(('display', 'next to', 'settings'), True)	(('settings', 'next to', 'display'), True)
Constraint 4 (True antecedent)	('display', 'behind', 'lens release')('lens release', 'behind', 'lens')	(('display', 'behind', 'lens'), True)
Constraint 4 (True antecedent)	('display', 'behind', 'lens release')('lens release', 'behind', 'shutter')	(('display', 'behind', 'shutter'), True)
Constraint 4 (True antecedent)	('lens', 'in front of', 'lens release')('lens release', 'in front of', 'display')	(('lens', 'in front of', 'display'), True)
Constraint 4 (True antecedent)	('shutter', 'in front of', 'lens release')('lens release', 'in front of', 'display')	(('shutter', 'in front of', 'display'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lens release', 'above', 'flash'), False)	(('flash', 'below', 'lens release'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lens', 'behind', 'lens release'), False)	(('lens release', 'in front of', 'lens'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shutter', 'behind', 'lens release'), False)	(('lens release', 'in front of', 'shutter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lens release', 'behind', 'display'), False)	(('display', 'in front of', 'lens release'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('display', 'behind', 'lens'), True)	(('lens', 'behind', 'display'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('display', 'behind', 'shutter'), True)	(('shutter', 'behind', 'display'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lens', 'in front of', 'display'), True)	(('display', 'in front of', 'lens'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shutter', 'in front of', 'display'), True)	(('display', 'in front of', 'shutter'), False)
Round 3 ...
elevator worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'floor indicator'), True)	(('floor indicator', 'above', 'ceiling and lighting'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ceiling and lighting', 'above', 'floor indicator'), True)	(('floor indicator', 'below', 'ceiling and lighting'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'door cladding'), True)	(('door cladding', 'above', 'ceiling and lighting'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ceiling and lighting', 'above', 'door cladding'), True)	(('door cladding', 'below', 'ceiling and lighting'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'panels'), True)	(('panels', 'above', 'ceiling and lighting'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ceiling and lighting', 'above', 'panels'), True)	(('panels', 'below', 'ceiling and lighting'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'above', 'handrails'), True)	(('handrails', 'above', 'panels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('panels', 'above', 'handrails'), True)	(('handrails', 'below', 'panels'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('floor indicator', 'above', 'car operating panel'), True)	(('car operating panel', 'above', 'floor indicator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('floor indicator', 'above', 'car operating panel'), True)	(('car operating panel', 'below', 'floor indicator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('car operating panel', 'above', 'toe kick'), True)	(('toe kick', 'above', 'car operating panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('car operating panel', 'above', 'toe kick'), True)	(('toe kick', 'below', 'car operating panel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door cladding', 'above', 'flooring'), True)	(('flooring', 'above', 'door cladding'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door cladding', 'above', 'flooring'), True)	(('flooring', 'below', 'door cladding'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handrails', 'above', 'flooring'), True)	(('flooring', 'above', 'handrails'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handrails', 'above', 'flooring'), True)	(('flooring', 'below', 'handrails'), True)
Constraint 1: x rln y <-> y rln x	(('door cladding', 'next to', 'toe kick'), True)	(('toe kick', 'next to', 'door cladding'), True)
Constraint 4 (True antecedent)	('ceiling and lighting', 'above', 'floor indicator')('floor indicator', 'above', 'car operating panel')	(('ceiling and lighting', 'above', 'car operating panel'), True)
Constraint 4 (True antecedent)	('ceiling and lighting', 'above', 'door cladding')('door cladding', 'above', 'flooring')	(('ceiling and lighting', 'above', 'flooring'), True)
Constraint 4 (True antecedent)	('ceiling and lighting', 'above', 'panels')('panels', 'above', 'handrails')	(('ceiling and lighting', 'above', 'handrails'), True)
Constraint 4 (True antecedent)	('panels', 'above', 'handrails')('handrails', 'above', 'flooring')	(('panels', 'above', 'flooring'), True)
Constraint 4 (True antecedent)	('floor indicator', 'above', 'car operating panel')('car operating panel', 'above', 'toe kick')	(('floor indicator', 'above', 'toe kick'), True)
Constraint 4 (True antecedent)	('handrails', 'below', 'panels')('panels', 'below', 'ceiling and lighting')	(('handrails', 'below', 'ceiling and lighting'), True)
Constraint 4 (True antecedent)	('car operating panel', 'below', 'floor indicator')('floor indicator', 'below', 'ceiling and lighting')	(('car operating panel', 'below', 'ceiling and lighting'), True)
Constraint 4 (True antecedent)	('toe kick', 'below', 'car operating panel')('car operating panel', 'below', 'floor indicator')	(('toe kick', 'below', 'floor indicator'), True)
Constraint 4 (True antecedent)	('flooring', 'below', 'door cladding')('door cladding', 'below', 'ceiling and lighting')	(('flooring', 'below', 'ceiling and lighting'), True)
Constraint 4 (True antecedent)	('flooring', 'below', 'handrails')('handrails', 'below', 'panels')	(('flooring', 'below', 'panels'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('floor indicator', 'above', 'ceiling and lighting'), False)	(('ceiling and lighting', 'below', 'floor indicator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door cladding', 'above', 'ceiling and lighting'), False)	(('ceiling and lighting', 'below', 'door cladding'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('panels', 'above', 'ceiling and lighting'), False)	(('ceiling and lighting', 'below', 'panels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handrails', 'above', 'panels'), False)	(('panels', 'below', 'handrails'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('car operating panel', 'above', 'floor indicator'), False)	(('floor indicator', 'below', 'car operating panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toe kick', 'above', 'car operating panel'), False)	(('car operating panel', 'below', 'toe kick'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flooring', 'above', 'door cladding'), False)	(('door cladding', 'below', 'flooring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flooring', 'above', 'handrails'), False)	(('handrails', 'below', 'flooring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'car operating panel'), True)	(('car operating panel', 'above', 'ceiling and lighting'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'flooring'), True)	(('flooring', 'above', 'ceiling and lighting'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'handrails'), True)	(('handrails', 'above', 'ceiling and lighting'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'above', 'flooring'), True)	(('flooring', 'above', 'panels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('floor indicator', 'above', 'toe kick'), True)	(('toe kick', 'above', 'floor indicator'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handrails', 'below', 'ceiling and lighting'), True)	(('ceiling and lighting', 'below', 'handrails'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('car operating panel', 'below', 'ceiling and lighting'), True)	(('ceiling and lighting', 'below', 'car operating panel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe kick', 'below', 'floor indicator'), True)	(('floor indicator', 'below', 'toe kick'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flooring', 'below', 'ceiling and lighting'), True)	(('ceiling and lighting', 'below', 'flooring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flooring', 'below', 'panels'), True)	(('panels', 'below', 'flooring'), False)
Constraint 4 (True antecedent)	('ceiling and lighting', 'above', 'floor indicator')('floor indicator', 'above', 'toe kick')	(('ceiling and lighting', 'above', 'toe kick'), True)
Constraint 4 (True antecedent)	('toe kick', 'below', 'car operating panel')('car operating panel', 'below', 'ceiling and lighting')	(('toe kick', 'below', 'ceiling and lighting'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'toe kick'), True)	(('toe kick', 'above', 'ceiling and lighting'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe kick', 'below', 'ceiling and lighting'), True)	(('ceiling and lighting', 'below', 'toe kick'), False)
Round 4 ...
elevator worker_106...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'floor indicator'), True)	(('floor indicator', 'above', 'ceiling and lighting'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ceiling and lighting', 'above', 'floor indicator'), True)	(('floor indicator', 'below', 'ceiling and lighting'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'top band'), True)	(('top band', 'above', 'ceiling and lighting'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ceiling and lighting', 'above', 'top band'), True)	(('top band', 'below', 'ceiling and lighting'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top band', 'above', 'panels'), True)	(('panels', 'above', 'top band'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top band', 'above', 'panels'), True)	(('panels', 'below', 'top band'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'above', 'handrails'), True)	(('handrails', 'above', 'panels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('panels', 'above', 'handrails'), True)	(('handrails', 'below', 'panels'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handrails', 'above', 'toe kick'), True)	(('toe kick', 'above', 'handrails'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handrails', 'above', 'toe kick'), True)	(('toe kick', 'below', 'handrails'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('toe kick', 'above', 'flooring'), True)	(('flooring', 'above', 'toe kick'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toe kick', 'above', 'flooring'), True)	(('flooring', 'below', 'toe kick'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('floor indicator', 'above', 'car operating panel'), True)	(('car operating panel', 'above', 'floor indicator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('floor indicator', 'above', 'car operating panel'), True)	(('car operating panel', 'below', 'floor indicator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door cladding', 'requires', 'car operating panel'), True)	(('car operating panel', 'requires', 'door cladding'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door cladding', 'requires', 'car operating panel'), True)	(('car operating panel', 'required by', 'door cladding'), True)
Constraint 4 (True antecedent)	('ceiling and lighting', 'above', 'floor indicator')('floor indicator', 'above', 'car operating panel')	(('ceiling and lighting', 'above', 'car operating panel'), True)
Constraint 4 (True antecedent)	('ceiling and lighting', 'above', 'top band')('top band', 'above', 'panels')	(('ceiling and lighting', 'above', 'panels'), True)
Constraint 4 (True antecedent)	('top band', 'above', 'panels')('panels', 'above', 'handrails')	(('top band', 'above', 'handrails'), True)
Constraint 4 (True antecedent)	('panels', 'above', 'handrails')('handrails', 'above', 'toe kick')	(('panels', 'above', 'toe kick'), True)
Constraint 4 (True antecedent)	('handrails', 'above', 'toe kick')('toe kick', 'above', 'flooring')	(('handrails', 'above', 'flooring'), True)
Constraint 4 (True antecedent)	('panels', 'below', 'top band')('top band', 'below', 'ceiling and lighting')	(('panels', 'below', 'ceiling and lighting'), True)
Constraint 4 (True antecedent)	('handrails', 'below', 'panels')('panels', 'below', 'top band')	(('handrails', 'below', 'top band'), True)
Constraint 4 (True antecedent)	('toe kick', 'below', 'handrails')('handrails', 'below', 'panels')	(('toe kick', 'below', 'panels'), True)
Constraint 4 (True antecedent)	('flooring', 'below', 'toe kick')('toe kick', 'below', 'handrails')	(('flooring', 'below', 'handrails'), True)
Constraint 4 (True antecedent)	('car operating panel', 'below', 'floor indicator')('floor indicator', 'below', 'ceiling and lighting')	(('car operating panel', 'below', 'ceiling and lighting'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('floor indicator', 'above', 'ceiling and lighting'), False)	(('ceiling and lighting', 'below', 'floor indicator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top band', 'above', 'ceiling and lighting'), False)	(('ceiling and lighting', 'below', 'top band'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('panels', 'above', 'top band'), False)	(('top band', 'below', 'panels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handrails', 'above', 'panels'), False)	(('panels', 'below', 'handrails'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toe kick', 'above', 'handrails'), False)	(('handrails', 'below', 'toe kick'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flooring', 'above', 'toe kick'), False)	(('toe kick', 'below', 'flooring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('car operating panel', 'above', 'floor indicator'), False)	(('floor indicator', 'below', 'car operating panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('car operating panel', 'requires', 'door cladding'), False)	(('door cladding', 'required by', 'car operating panel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'car operating panel'), True)	(('car operating panel', 'above', 'ceiling and lighting'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'panels'), True)	(('panels', 'above', 'ceiling and lighting'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top band', 'above', 'handrails'), True)	(('handrails', 'above', 'top band'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'above', 'toe kick'), True)	(('toe kick', 'above', 'panels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handrails', 'above', 'flooring'), True)	(('flooring', 'above', 'handrails'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'below', 'ceiling and lighting'), True)	(('ceiling and lighting', 'below', 'panels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handrails', 'below', 'top band'), True)	(('top band', 'below', 'handrails'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe kick', 'below', 'panels'), True)	(('panels', 'below', 'toe kick'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flooring', 'below', 'handrails'), True)	(('handrails', 'below', 'flooring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('car operating panel', 'below', 'ceiling and lighting'), True)	(('ceiling and lighting', 'below', 'car operating panel'), False)
Constraint 4 (True antecedent)	('ceiling and lighting', 'above', 'top band')('top band', 'above', 'handrails')	(('ceiling and lighting', 'above', 'handrails'), True)
Constraint 4 (True antecedent)	('ceiling and lighting', 'above', 'panels')('panels', 'above', 'toe kick')	(('ceiling and lighting', 'above', 'toe kick'), True)
Constraint 4 (True antecedent)	('top band', 'above', 'panels')('panels', 'above', 'toe kick')	(('top band', 'above', 'toe kick'), True)
Constraint 4 (True antecedent)	('top band', 'above', 'handrails')('handrails', 'above', 'flooring')	(('top band', 'above', 'flooring'), True)
Constraint 4 (True antecedent)	('panels', 'above', 'handrails')('handrails', 'above', 'flooring')	(('panels', 'above', 'flooring'), True)
Constraint 4 (True antecedent)	('handrails', 'below', 'panels')('panels', 'below', 'ceiling and lighting')	(('handrails', 'below', 'ceiling and lighting'), True)
Constraint 4 (True antecedent)	('toe kick', 'below', 'handrails')('handrails', 'below', 'top band')	(('toe kick', 'below', 'top band'), True)
Constraint 4 (True antecedent)	('toe kick', 'below', 'panels')('panels', 'below', 'ceiling and lighting')	(('toe kick', 'below', 'ceiling and lighting'), True)
Constraint 4 (True antecedent)	('flooring', 'below', 'toe kick')('toe kick', 'below', 'panels')	(('flooring', 'below', 'panels'), True)
Constraint 4 (True antecedent)	('flooring', 'below', 'handrails')('handrails', 'below', 'top band')	(('flooring', 'below', 'top band'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'handrails'), True)	(('handrails', 'above', 'ceiling and lighting'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'toe kick'), True)	(('toe kick', 'above', 'ceiling and lighting'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top band', 'above', 'toe kick'), True)	(('toe kick', 'above', 'top band'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top band', 'above', 'flooring'), True)	(('flooring', 'above', 'top band'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'above', 'flooring'), True)	(('flooring', 'above', 'panels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handrails', 'below', 'ceiling and lighting'), True)	(('ceiling and lighting', 'below', 'handrails'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe kick', 'below', 'top band'), True)	(('top band', 'below', 'toe kick'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe kick', 'below', 'ceiling and lighting'), True)	(('ceiling and lighting', 'below', 'toe kick'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flooring', 'below', 'panels'), True)	(('panels', 'below', 'flooring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flooring', 'below', 'top band'), True)	(('top band', 'below', 'flooring'), False)
Constraint 4 (True antecedent)	('ceiling and lighting', 'above', 'top band')('top band', 'above', 'flooring')	(('ceiling and lighting', 'above', 'flooring'), True)
Constraint 4 (True antecedent)	('flooring', 'below', 'toe kick')('toe kick', 'below', 'ceiling and lighting')	(('flooring', 'below', 'ceiling and lighting'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'flooring'), True)	(('flooring', 'above', 'ceiling and lighting'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flooring', 'below', 'ceiling and lighting'), True)	(('ceiling and lighting', 'below', 'flooring'), False)
Round 5 ...
elevator worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('ceiling and lighting', 'connects', 'panels'), True)	(('panels', 'connects', 'ceiling and lighting'), True)
Constraint 1: x rln y <-> y rln x	(('ceiling and lighting', 'connects', 'door cladding'), True)	(('door cladding', 'connects', 'ceiling and lighting'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ceiling and lighting', 'above', 'flooring'), True)	(('flooring', 'above', 'ceiling and lighting'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ceiling and lighting', 'above', 'flooring'), True)	(('flooring', 'below', 'ceiling and lighting'), True)
Constraint 1: x rln y <-> y rln x	(('panels', 'connects', 'flooring'), True)	(('flooring', 'connects', 'panels'), True)
Constraint 1: x rln y <-> y rln x	(('handrails', 'next to', 'door cladding'), True)	(('door cladding', 'next to', 'handrails'), True)
Constraint 1: x rln y <-> y rln x	(('door cladding', 'next to', 'car operating panel'), True)	(('car operating panel', 'next to', 'door cladding'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('floor indicator', 'above', 'car operating panel'), True)	(('car operating panel', 'above', 'floor indicator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('floor indicator', 'above', 'car operating panel'), True)	(('car operating panel', 'below', 'floor indicator'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('flooring', 'above', 'ceiling and lighting'), False)	(('ceiling and lighting', 'below', 'flooring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('car operating panel', 'above', 'floor indicator'), False)	(('floor indicator', 'below', 'car operating panel'), False)
Round 3 ...
flashlight worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('switch', 'connects', 'case'), True)	(('case', 'connects', 'switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('case', 'surrounds', 'protective glass'), True)	(('protective glass', 'surrounds', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'surrounds', 'protective glass'), True)	(('protective glass', 'surrounded by', 'case'), True)
Constraint 1: x rln y <-> y rln x	(('protective glass', 'connects', 'reflector'), True)	(('reflector', 'connects', 'protective glass'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reflector', 'surrounds', 'bulb'), True)	(('bulb', 'surrounds', 'reflector'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reflector', 'surrounds', 'bulb'), True)	(('bulb', 'surrounded by', 'reflector'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reflector', 'behind', 'protective glass'), True)	(('protective glass', 'behind', 'reflector'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reflector', 'behind', 'protective glass'), True)	(('protective glass', 'in front of', 'reflector'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('case', 'surrounds', 'reflector'), True)	(('reflector', 'surrounds', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'surrounds', 'reflector'), True)	(('reflector', 'surrounded by', 'case'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('case', 'surrounds', 'bulb'), True)	(('bulb', 'surrounds', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'surrounds', 'bulb'), True)	(('bulb', 'surrounded by', 'case'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('case', 'surrounds', 'batteries'), True)	(('batteries', 'surrounds', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'surrounds', 'batteries'), True)	(('batteries', 'surrounded by', 'case'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'requires', 'batteries'), True)	(('batteries', 'requires', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'requires', 'batteries'), True)	(('batteries', 'required by', 'bulb'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('batteries', 'behind', 'bulb'), True)	(('bulb', 'behind', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'behind', 'bulb'), True)	(('bulb', 'in front of', 'batteries'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'behind', 'batteries'), True)	(('batteries', 'behind', 'metal spring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal spring', 'behind', 'batteries'), True)	(('batteries', 'in front of', 'metal spring'), True)
Constraint 1: x rln y <-> y rln x	(('metal spring', 'connects', 'batteries'), True)	(('batteries', 'connects', 'metal spring'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'surrounds', 'case'), True)	(('case', 'surrounds', 'metal spring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal spring', 'surrounds', 'case'), True)	(('case', 'surrounded by', 'metal spring'), True)
Constraint 4 (True antecedent)	('metal spring', 'behind', 'batteries')('batteries', 'behind', 'bulb')	(('metal spring', 'behind', 'bulb'), True)
Constraint 4 (True antecedent)	('metal spring', 'surrounds', 'case')('case', 'surrounds', 'protective glass')	(('metal spring', 'surrounds', 'protective glass'), True)
Constraint 4 (True antecedent)	('metal spring', 'surrounds', 'case')('case', 'surrounds', 'reflector')	(('metal spring', 'surrounds', 'reflector'), True)
Constraint 4 (True antecedent)	('metal spring', 'surrounds', 'case')('case', 'surrounds', 'bulb')	(('metal spring', 'surrounds', 'bulb'), True)
Constraint 4 (True antecedent)	('metal spring', 'surrounds', 'case')('case', 'surrounds', 'batteries')	(('metal spring', 'surrounds', 'batteries'), True)
Constraint 4 (True antecedent)	('protective glass', 'surrounded by', 'case')('case', 'surrounded by', 'metal spring')	(('protective glass', 'surrounded by', 'metal spring'), True)
Constraint 4 (True antecedent)	('bulb', 'surrounded by', 'case')('case', 'surrounded by', 'metal spring')	(('bulb', 'surrounded by', 'metal spring'), True)
Constraint 4 (True antecedent)	('reflector', 'surrounded by', 'case')('case', 'surrounded by', 'metal spring')	(('reflector', 'surrounded by', 'metal spring'), True)
Constraint 4 (True antecedent)	('batteries', 'surrounded by', 'case')('case', 'surrounded by', 'metal spring')	(('batteries', 'surrounded by', 'metal spring'), True)
Constraint 4 (True antecedent)	('bulb', 'in front of', 'batteries')('batteries', 'in front of', 'metal spring')	(('bulb', 'in front of', 'metal spring'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('protective glass', 'surrounds', 'case'), False)	(('case', 'surrounded by', 'protective glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'surrounds', 'reflector'), False)	(('reflector', 'surrounded by', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('protective glass', 'behind', 'reflector'), False)	(('reflector', 'in front of', 'protective glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reflector', 'surrounds', 'case'), False)	(('case', 'surrounded by', 'reflector'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'surrounds', 'case'), False)	(('case', 'surrounded by', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'surrounds', 'case'), False)	(('case', 'surrounded by', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'requires', 'bulb'), False)	(('bulb', 'required by', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'behind', 'batteries'), False)	(('batteries', 'in front of', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'behind', 'metal spring'), False)	(('metal spring', 'in front of', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'surrounds', 'metal spring'), False)	(('metal spring', 'surrounded by', 'case'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'behind', 'bulb'), True)	(('bulb', 'behind', 'metal spring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'surrounds', 'protective glass'), True)	(('protective glass', 'surrounds', 'metal spring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'surrounds', 'reflector'), True)	(('reflector', 'surrounds', 'metal spring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'surrounds', 'bulb'), True)	(('bulb', 'surrounds', 'metal spring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'surrounds', 'batteries'), True)	(('batteries', 'surrounds', 'metal spring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('protective glass', 'surrounded by', 'metal spring'), True)	(('metal spring', 'surrounded by', 'protective glass'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'surrounded by', 'metal spring'), True)	(('metal spring', 'surrounded by', 'bulb'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('reflector', 'surrounded by', 'metal spring'), True)	(('metal spring', 'surrounded by', 'reflector'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('batteries', 'surrounded by', 'metal spring'), True)	(('metal spring', 'surrounded by', 'batteries'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'in front of', 'metal spring'), True)	(('metal spring', 'in front of', 'bulb'), False)
Round 3 ...
flashlight worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'behind', 'batteries'), True)	(('batteries', 'behind', 'metal spring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal spring', 'behind', 'batteries'), True)	(('batteries', 'in front of', 'metal spring'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'above', 'batteries'), True)	(('batteries', 'above', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'above', 'batteries'), True)	(('batteries', 'below', 'switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('batteries', 'behind', 'bulb'), True)	(('bulb', 'behind', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'behind', 'bulb'), True)	(('bulb', 'in front of', 'batteries'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'requires', 'batteries'), True)	(('batteries', 'requires', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'requires', 'batteries'), True)	(('batteries', 'required by', 'bulb'), True)
Constraint 1: x rln y <-> y rln x	(('bulb', 'next to', 'reflector'), True)	(('reflector', 'next to', 'bulb'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('protective glass', 'surrounds', 'reflector'), True)	(('reflector', 'surrounds', 'protective glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('protective glass', 'surrounds', 'reflector'), True)	(('reflector', 'surrounded by', 'protective glass'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('protective glass', 'surrounds', 'bulb'), True)	(('bulb', 'surrounds', 'protective glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('protective glass', 'surrounds', 'bulb'), True)	(('bulb', 'surrounded by', 'protective glass'), True)
Constraint 4 (True antecedent)	('metal spring', 'behind', 'batteries')('batteries', 'behind', 'bulb')	(('metal spring', 'behind', 'bulb'), True)
Constraint 4 (True antecedent)	('bulb', 'in front of', 'batteries')('batteries', 'in front of', 'metal spring')	(('bulb', 'in front of', 'metal spring'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'behind', 'metal spring'), False)	(('metal spring', 'in front of', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'above', 'switch'), False)	(('switch', 'below', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'behind', 'batteries'), False)	(('batteries', 'in front of', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'requires', 'bulb'), False)	(('bulb', 'required by', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reflector', 'surrounds', 'protective glass'), False)	(('protective glass', 'surrounded by', 'reflector'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'surrounds', 'protective glass'), False)	(('protective glass', 'surrounded by', 'bulb'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'behind', 'bulb'), True)	(('bulb', 'behind', 'metal spring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'in front of', 'metal spring'), True)	(('metal spring', 'in front of', 'bulb'), False)
Round 3 ...
flashlight worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'inside', 'case'), True)	(('case', 'inside', 'metal spring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal spring', 'inside', 'case'), True)	(('case', 'contains', 'metal spring'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('metal spring', 'behind', 'batteries'), True)	(('batteries', 'behind', 'metal spring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal spring', 'behind', 'batteries'), True)	(('batteries', 'in front of', 'metal spring'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('batteries', 'inside', 'case'), True)	(('case', 'inside', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'inside', 'case'), True)	(('case', 'contains', 'batteries'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'above', 'case'), True)	(('case', 'above', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'above', 'case'), True)	(('case', 'below', 'switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'requires', 'batteries'), True)	(('batteries', 'requires', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'requires', 'batteries'), True)	(('batteries', 'required by', 'bulb'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'inside', 'protective glass'), True)	(('protective glass', 'inside', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'inside', 'protective glass'), True)	(('protective glass', 'contains', 'bulb'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reflector', 'inside', 'protective glass'), True)	(('protective glass', 'inside', 'reflector'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reflector', 'inside', 'protective glass'), True)	(('protective glass', 'contains', 'reflector'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('protective glass', 'inside', 'batteries'), True)	(('batteries', 'inside', 'protective glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('protective glass', 'inside', 'batteries'), True)	(('batteries', 'contains', 'protective glass'), True)
Constraint 4 (True antecedent)	('bulb', 'inside', 'protective glass')('protective glass', 'inside', 'batteries')	(('bulb', 'inside', 'batteries'), True)
Constraint 4 (True antecedent)	('reflector', 'inside', 'protective glass')('protective glass', 'inside', 'batteries')	(('reflector', 'inside', 'batteries'), True)
Constraint 4 (True antecedent)	('protective glass', 'inside', 'batteries')('batteries', 'inside', 'case')	(('protective glass', 'inside', 'case'), True)
Constraint 4 (True antecedent)	('case', 'contains', 'batteries')('batteries', 'contains', 'protective glass')	(('case', 'contains', 'protective glass'), True)
Constraint 4 (True antecedent)	('batteries', 'contains', 'protective glass')('protective glass', 'contains', 'bulb')	(('batteries', 'contains', 'bulb'), True)
Constraint 4 (True antecedent)	('batteries', 'contains', 'protective glass')('protective glass', 'contains', 'reflector')	(('batteries', 'contains', 'reflector'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'metal spring'), False)	(('metal spring', 'contains', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'behind', 'metal spring'), False)	(('metal spring', 'in front of', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'batteries'), False)	(('batteries', 'contains', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'above', 'switch'), False)	(('switch', 'below', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'requires', 'bulb'), False)	(('bulb', 'required by', 'batteries'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('protective glass', 'inside', 'bulb'), False)	(('bulb', 'contains', 'protective glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('protective glass', 'inside', 'reflector'), False)	(('reflector', 'contains', 'protective glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('batteries', 'inside', 'protective glass'), False)	(('protective glass', 'contains', 'batteries'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'inside', 'batteries'), True)	(('batteries', 'inside', 'bulb'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('reflector', 'inside', 'batteries'), True)	(('batteries', 'inside', 'reflector'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('protective glass', 'inside', 'case'), True)	(('case', 'inside', 'protective glass'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('case', 'contains', 'protective glass'), True)	(('protective glass', 'contains', 'case'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('batteries', 'contains', 'bulb'), True)	(('bulb', 'contains', 'batteries'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('batteries', 'contains', 'reflector'), True)	(('reflector', 'contains', 'batteries'), False)
Constraint 4 (True antecedent)	('bulb', 'inside', 'protective glass')('protective glass', 'inside', 'case')	(('bulb', 'inside', 'case'), True)
Constraint 4 (True antecedent)	('reflector', 'inside', 'protective glass')('protective glass', 'inside', 'case')	(('reflector', 'inside', 'case'), True)
Constraint 4 (True antecedent)	('case', 'contains', 'batteries')('batteries', 'contains', 'bulb')	(('case', 'contains', 'bulb'), True)
Constraint 4 (True antecedent)	('case', 'contains', 'batteries')('batteries', 'contains', 'reflector')	(('case', 'contains', 'reflector'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'inside', 'case'), True)	(('case', 'inside', 'bulb'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('reflector', 'inside', 'case'), True)	(('case', 'inside', 'reflector'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('case', 'contains', 'bulb'), True)	(('bulb', 'contains', 'case'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('case', 'contains', 'reflector'), True)	(('reflector', 'contains', 'case'), False)
Round 4 ...
glider worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('right aileron', 'part of', 'right wing'), True)	(('right wing', 'part of', 'right aileron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('right aileron', 'part of', 'right wing'), True)	(('right wing', 'has part', 'right aileron'), True)
Constraint 1: x rln y <-> y rln x	(('right wing', 'connects', 'body'), True)	(('body', 'connects', 'right wing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'inside', 'body'), True)	(('body', 'inside', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'inside', 'body'), True)	(('body', 'contains', 'cockpit'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'left wing'), True)	(('left wing', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('left aileron', 'part of', 'left wing'), True)	(('left wing', 'part of', 'left aileron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('left aileron', 'part of', 'left wing'), True)	(('left wing', 'has part', 'left aileron'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'vertical stabilizer'), True)	(('vertical stabilizer', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rudder', 'behind', 'vertical stabilizer'), True)	(('vertical stabilizer', 'behind', 'rudder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rudder', 'behind', 'vertical stabilizer'), True)	(('vertical stabilizer', 'in front of', 'rudder'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('horizontal stabilizer', 'above', 'vertical stabilizer'), True)	(('vertical stabilizer', 'above', 'horizontal stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horizontal stabilizer', 'above', 'vertical stabilizer'), True)	(('vertical stabilizer', 'below', 'horizontal stabilizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('elevator', 'above', 'vertical stabilizer'), True)	(('vertical stabilizer', 'above', 'elevator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('elevator', 'above', 'vertical stabilizer'), True)	(('vertical stabilizer', 'below', 'elevator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('horizontal stabilizer', 'above', 'rudder'), True)	(('rudder', 'above', 'horizontal stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horizontal stabilizer', 'above', 'rudder'), True)	(('rudder', 'below', 'horizontal stabilizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('elevator', 'behind', 'horizontal stabilizer'), True)	(('horizontal stabilizer', 'behind', 'elevator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('elevator', 'behind', 'horizontal stabilizer'), True)	(('horizontal stabilizer', 'in front of', 'elevator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('elevator', 'above', 'rudder'), True)	(('rudder', 'above', 'elevator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('elevator', 'above', 'rudder'), True)	(('rudder', 'below', 'elevator'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('right wing', 'part of', 'right aileron'), False)	(('right aileron', 'has part', 'right wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'inside', 'cockpit'), False)	(('cockpit', 'contains', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('left wing', 'part of', 'left aileron'), False)	(('left aileron', 'has part', 'left wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vertical stabilizer', 'behind', 'rudder'), False)	(('rudder', 'in front of', 'vertical stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vertical stabilizer', 'above', 'horizontal stabilizer'), False)	(('horizontal stabilizer', 'below', 'vertical stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vertical stabilizer', 'above', 'elevator'), False)	(('elevator', 'below', 'vertical stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rudder', 'above', 'horizontal stabilizer'), False)	(('horizontal stabilizer', 'below', 'rudder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horizontal stabilizer', 'behind', 'elevator'), False)	(('elevator', 'in front of', 'horizontal stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rudder', 'above', 'elevator'), False)	(('elevator', 'below', 'rudder'), False)
Round 3 ...
glider worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('cockpit', 'connects', 'fuselage'), True)	(('fuselage', 'connects', 'cockpit'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'behind', 'cockpit'), True)	(('cockpit', 'in front of', 'fuselage'), True)
Constraint 1: x rln y <-> y rln x	(('fuselage', 'connects', 'wing'), True)	(('wing', 'connects', 'fuselage'), True)
Constraint 1: x rln y <-> y rln x	(('fuselage', 'connects', 'vertical stabilizer'), True)	(('vertical stabilizer', 'connects', 'fuselage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('vertical stabilizer', 'behind', 'wind'), True)	(('wind', 'behind', 'vertical stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vertical stabilizer', 'behind', 'wind'), True)	(('wind', 'in front of', 'vertical stabilizer'), True)
Constraint 1: x rln y <-> y rln x	(('vertical stabilizer', 'next to', 'rudder'), True)	(('rudder', 'next to', 'vertical stabilizer'), True)
Constraint 1: x rln y <-> y rln x	(('rudder', 'connects', 'elevator'), True)	(('elevator', 'connects', 'rudder'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rudder', 'behind', 'vertical stabilizer'), True)	(('vertical stabilizer', 'behind', 'rudder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rudder', 'behind', 'vertical stabilizer'), True)	(('vertical stabilizer', 'in front of', 'rudder'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('aileron', 'part of', 'wing'), True)	(('wing', 'part of', 'aileron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('aileron', 'part of', 'wing'), True)	(('wing', 'has part', 'aileron'), True)
Constraint 1: x rln y <-> y rln x	(('vertical stabilizer', 'connects', 'horizontal stabilizer'), True)	(('horizontal stabilizer', 'connects', 'vertical stabilizer'), True)
Constraint 1: x rln y <-> y rln x	(('horizontal stabilizer', 'next to', 'elevator'), True)	(('elevator', 'next to', 'horizontal stabilizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('elevator', 'behind', 'horizontal stabilizer'), True)	(('horizontal stabilizer', 'behind', 'elevator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('elevator', 'behind', 'horizontal stabilizer'), True)	(('horizontal stabilizer', 'in front of', 'elevator'), True)
Constraint 4 (True antecedent)	('rudder', 'behind', 'vertical stabilizer')('vertical stabilizer', 'behind', 'wind')	(('rudder', 'behind', 'wind'), True)
Constraint 4 (True antecedent)	('wind', 'in front of', 'vertical stabilizer')('vertical stabilizer', 'in front of', 'rudder')	(('wind', 'in front of', 'rudder'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'behind', 'fuselage'), False)	(('fuselage', 'in front of', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wind', 'behind', 'vertical stabilizer'), False)	(('vertical stabilizer', 'in front of', 'wind'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vertical stabilizer', 'behind', 'rudder'), False)	(('rudder', 'in front of', 'vertical stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'part of', 'aileron'), False)	(('aileron', 'has part', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horizontal stabilizer', 'behind', 'elevator'), False)	(('elevator', 'in front of', 'horizontal stabilizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rudder', 'behind', 'wind'), True)	(('wind', 'behind', 'rudder'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wind', 'in front of', 'rudder'), True)	(('rudder', 'in front of', 'wind'), False)
Round 3 ...
glider worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('aileron', 'part of', 'wing'), True)	(('wing', 'part of', 'aileron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('aileron', 'part of', 'wing'), True)	(('wing', 'has part', 'aileron'), True)
Constraint 1: x rln y <-> y rln x	(('aileron', 'connects', 'wing'), True)	(('wing', 'connects', 'aileron'), True)
Constraint 1: x rln y <-> y rln x	(('wing', 'connects', 'fuselage'), True)	(('fuselage', 'connects', 'wing'), True)
Constraint 1: x rln y <-> y rln x	(('cockpit', 'connects', 'fuselage'), True)	(('fuselage', 'connects', 'cockpit'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'behind', 'cockpit'), True)	(('cockpit', 'in front of', 'fuselage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('vertical stabilizer', 'behind', 'fuselage'), True)	(('fuselage', 'behind', 'vertical stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vertical stabilizer', 'behind', 'fuselage'), True)	(('fuselage', 'in front of', 'vertical stabilizer'), True)
Constraint 1: x rln y <-> y rln x	(('fuselage', 'connects', 'vertical stabilizer'), True)	(('vertical stabilizer', 'connects', 'fuselage'), True)
Constraint 1: x rln y <-> y rln x	(('vertical stabilizer', 'next to', 'rudder'), True)	(('rudder', 'next to', 'vertical stabilizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('horizontal stabilizer', 'above', 'vertical stabilizer'), True)	(('vertical stabilizer', 'above', 'horizontal stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horizontal stabilizer', 'above', 'vertical stabilizer'), True)	(('vertical stabilizer', 'below', 'horizontal stabilizer'), True)
Constraint 1: x rln y <-> y rln x	(('horizontal stabilizer', 'next to', 'elevator'), True)	(('elevator', 'next to', 'horizontal stabilizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('elevator', 'above', 'vertical stabilizer'), True)	(('vertical stabilizer', 'above', 'elevator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('elevator', 'above', 'vertical stabilizer'), True)	(('vertical stabilizer', 'below', 'elevator'), True)
Constraint 4 (True antecedent)	('vertical stabilizer', 'behind', 'fuselage')('fuselage', 'behind', 'cockpit')	(('vertical stabilizer', 'behind', 'cockpit'), True)
Constraint 4 (True antecedent)	('cockpit', 'in front of', 'fuselage')('fuselage', 'in front of', 'vertical stabilizer')	(('cockpit', 'in front of', 'vertical stabilizer'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'part of', 'aileron'), False)	(('aileron', 'has part', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'behind', 'fuselage'), False)	(('fuselage', 'in front of', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'behind', 'vertical stabilizer'), False)	(('vertical stabilizer', 'in front of', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vertical stabilizer', 'above', 'horizontal stabilizer'), False)	(('horizontal stabilizer', 'below', 'vertical stabilizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vertical stabilizer', 'above', 'elevator'), False)	(('elevator', 'below', 'vertical stabilizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('vertical stabilizer', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'vertical stabilizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'in front of', 'vertical stabilizer'), True)	(('vertical stabilizer', 'in front of', 'cockpit'), False)
Round 3 ...
guitar worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'part of', 'fingerboard'), True)	(('fingerboard', 'part of', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'part of', 'fingerboard'), True)	(('fingerboard', 'has part', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frets', 'part of', 'fingerboard'), True)	(('fingerboard', 'part of', 'frets'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frets', 'part of', 'fingerboard'), True)	(('fingerboard', 'has part', 'frets'), True)
Constraint 1: x rln y <-> y rln x	(('fingerboard', 'connects', 'nut'), True)	(('nut', 'connects', 'fingerboard'), True)
Constraint 1: x rln y <-> y rln x	(('fingerboard', 'next to', 'nut'), True)	(('nut', 'next to', 'fingerboard'), True)
Constraint 1: x rln y <-> y rln x	(('fingerboard', 'connects', 'body'), True)	(('body', 'connects', 'fingerboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('strings', 'above', 'fingerboard'), True)	(('fingerboard', 'above', 'strings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'above', 'fingerboard'), True)	(('fingerboard', 'below', 'strings'), True)
Constraint 1: x rln y <-> y rln x	(('headstock', 'connects', 'nut'), True)	(('nut', 'connects', 'headstock'), True)
Constraint 1: x rln y <-> y rln x	(('headstock', 'next to', 'nut'), True)	(('nut', 'next to', 'headstock'), True)
Constraint 1: x rln y <-> y rln x	(('headstock', 'connects', 'turners'), True)	(('turners', 'connects', 'headstock'), True)
Constraint 1: x rln y <-> y rln x	(('headstock', 'next to', 'turners'), True)	(('turners', 'next to', 'headstock'), True)
Constraint 1: x rln y <-> y rln x	(('turners', 'connects', 'strings'), True)	(('strings', 'connects', 'turners'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('strings', 'above', 'body'), True)	(('body', 'above', 'strings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'above', 'body'), True)	(('body', 'below', 'strings'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'pick guard'), True)	(('pick guard', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pick guard', 'above', 'body'), True)	(('body', 'above', 'pick guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pick guard', 'above', 'body'), True)	(('body', 'below', 'pick guard'), True)
Constraint 1: x rln y <-> y rln x	(('strings', 'connects', 'bridge'), True)	(('bridge', 'connects', 'strings'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bridge', 'above', 'body'), True)	(('body', 'above', 'bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridge', 'above', 'body'), True)	(('body', 'below', 'bridge'), True)
Constraint 1: x rln y <-> y rln x	(('bridge', 'connects', 'body'), True)	(('body', 'connects', 'bridge'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('fingerboard', 'part of', 'neck'), False)	(('neck', 'has part', 'fingerboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fingerboard', 'part of', 'frets'), False)	(('frets', 'has part', 'fingerboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fingerboard', 'above', 'strings'), False)	(('strings', 'below', 'fingerboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'strings'), False)	(('strings', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'pick guard'), False)	(('pick guard', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'bridge'), False)	(('bridge', 'below', 'body'), False)
Round 3 ...
guitar worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('turners', 'above', 'neck'), True)	(('neck', 'above', 'turners'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('turners', 'above', 'neck'), True)	(('neck', 'below', 'turners'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'body'), True)	(('body', 'above', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'above', 'body'), True)	(('body', 'below', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'behind', 'strings'), True)	(('strings', 'behind', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'behind', 'strings'), True)	(('strings', 'in front of', 'neck'), True)
Constraint 1: x rln y <-> y rln x	(('strings', 'next to', 'pick guard'), True)	(('pick guard', 'next to', 'strings'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pick guard', 'above', 'bridge'), True)	(('bridge', 'above', 'pick guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pick guard', 'above', 'bridge'), True)	(('bridge', 'below', 'pick guard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'strings'), True)	(('strings', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'strings'), True)	(('strings', 'in front of', 'body'), True)
Constraint 4 (True antecedent)	('turners', 'above', 'neck')('neck', 'above', 'body')	(('turners', 'above', 'body'), True)
Constraint 4 (True antecedent)	('body', 'below', 'neck')('neck', 'below', 'turners')	(('body', 'below', 'turners'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'above', 'turners'), False)	(('turners', 'below', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'neck'), False)	(('neck', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'behind', 'neck'), False)	(('neck', 'in front of', 'strings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridge', 'above', 'pick guard'), False)	(('pick guard', 'below', 'bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'behind', 'body'), False)	(('body', 'in front of', 'strings'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('turners', 'above', 'body'), True)	(('body', 'above', 'turners'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'turners'), True)	(('turners', 'below', 'body'), False)
Round 3 ...
guitar worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('headstock', 'connects', 'neck'), True)	(('neck', 'connects', 'headstock'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('turners', 'part of', 'headstock'), True)	(('headstock', 'part of', 'turners'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('turners', 'part of', 'headstock'), True)	(('headstock', 'has part', 'turners'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fingerboard', 'part of', 'neck'), True)	(('neck', 'part of', 'fingerboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fingerboard', 'part of', 'neck'), True)	(('neck', 'has part', 'fingerboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frets', 'part of', 'neck'), True)	(('neck', 'part of', 'frets'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frets', 'part of', 'neck'), True)	(('neck', 'has part', 'frets'), True)
Constraint 1: x rln y <-> y rln x	(('neck', 'connects', 'body'), True)	(('body', 'connects', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'body'), True)	(('body', 'above', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'above', 'body'), True)	(('body', 'below', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('strings', 'part of', 'body'), True)	(('body', 'part of', 'strings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'part of', 'body'), True)	(('body', 'has part', 'strings'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('strrings', 'part of', 'neck'), True)	(('neck', 'part of', 'strrings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strrings', 'part of', 'neck'), True)	(('neck', 'has part', 'strrings'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bridge', 'part of', 'body'), True)	(('body', 'part of', 'bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridge', 'part of', 'body'), True)	(('body', 'has part', 'bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pick guard', 'part of', 'body'), True)	(('body', 'part of', 'pick guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pick guard', 'part of', 'body'), True)	(('body', 'has part', 'pick guard'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('headstock', 'part of', 'turners'), False)	(('turners', 'has part', 'headstock'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'part of', 'fingerboard'), False)	(('fingerboard', 'has part', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'part of', 'frets'), False)	(('frets', 'has part', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'neck'), False)	(('neck', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'strings'), False)	(('strings', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'part of', 'strrings'), False)	(('strrings', 'has part', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'bridge'), False)	(('bridge', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'pick guard'), False)	(('pick guard', 'has part', 'body'), False)
Round 3 ...
house worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('garage', 'connects', 'house'), True)	(('house', 'connects', 'garage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('window', 'part of', 'house'), True)	(('house', 'part of', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'part of', 'house'), True)	(('house', 'has part', 'window'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'part of', 'house'), True)	(('house', 'part of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'house'), True)	(('house', 'has part', 'door'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'house'), True)	(('house', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'house'), True)	(('house', 'below', 'roof'), True)
Constraint 1: x rln y <-> y rln x	(('house', 'connects', 'chimney'), True)	(('chimney', 'connects', 'house'), True)
Constraint 1: x rln y <-> y rln x	(('roof', 'connects', 'chimney'), True)	(('chimney', 'connects', 'roof'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('driveway', 'part of', 'yard'), True)	(('yard', 'part of', 'driveway'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('driveway', 'part of', 'yard'), True)	(('yard', 'has part', 'driveway'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('letterboy', 'part of', 'yard'), True)	(('yard', 'part of', 'letterboy'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('letterboy', 'part of', 'yard'), True)	(('yard', 'has part', 'letterboy'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('path', 'part of', 'yard'), True)	(('yard', 'part of', 'path'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('path', 'part of', 'yard'), True)	(('yard', 'has part', 'path'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('yard', 'surrounds', 'house'), True)	(('house', 'surrounds', 'yard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yard', 'surrounds', 'house'), True)	(('house', 'surrounded by', 'yard'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('house', 'part of', 'window'), False)	(('window', 'has part', 'house'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('house', 'part of', 'door'), False)	(('door', 'has part', 'house'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('house', 'above', 'roof'), False)	(('roof', 'below', 'house'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yard', 'part of', 'driveway'), False)	(('driveway', 'has part', 'yard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yard', 'part of', 'letterboy'), False)	(('letterboy', 'has part', 'yard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yard', 'part of', 'path'), False)	(('path', 'has part', 'yard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('house', 'surrounds', 'yard'), False)	(('yard', 'surrounded by', 'house'), False)
Round 3 ...
house worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('driveway', 'connects', 'garage'), True)	(('garage', 'connects', 'driveway'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('garage', 'behind', 'driveway'), True)	(('driveway', 'behind', 'garage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('garage', 'behind', 'driveway'), True)	(('driveway', 'in front of', 'garage'), True)
Constraint 1: x rln y <-> y rln x	(('garage', 'next to', 'walls'), True)	(('walls', 'next to', 'garage'), True)
Constraint 1: x rln y <-> y rln x	(('garage', 'connects', 'walls'), True)	(('walls', 'connects', 'garage'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'connects', 'walls'), True)	(('walls', 'connects', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('walls', 'connects', 'balcony'), True)	(('balcony', 'connects', 'walls'), True)
Constraint 1: x rln y <-> y rln x	(('walls', 'next to', 'balcony'), True)	(('balcony', 'next to', 'walls'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('walls', 'surrounds', 'window'), True)	(('window', 'surrounds', 'walls'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('walls', 'surrounds', 'window'), True)	(('window', 'surrounded by', 'walls'), True)
Constraint 1: x rln y <-> y rln x	(('walls', 'connects', 'yard'), True)	(('yard', 'connects', 'walls'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('walls', 'behind', 'yard'), True)	(('yard', 'behind', 'walls'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('walls', 'behind', 'yard'), True)	(('yard', 'in front of', 'walls'), True)
Constraint 1: x rln y <-> y rln x	(('yard', 'next to', 'path'), True)	(('path', 'next to', 'yard'), True)
Constraint 1: x rln y <-> y rln x	(('yard', 'connects', 'path'), True)	(('path', 'connects', 'yard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('yard', 'surrounds', 'letterbox'), True)	(('letterbox', 'surrounds', 'yard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yard', 'surrounds', 'letterbox'), True)	(('letterbox', 'surrounded by', 'yard'), True)
Constraint 1: x rln y <-> y rln x	(('path', 'next to', 'letterbox'), True)	(('letterbox', 'next to', 'path'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'behind', 'yard'), True)	(('yard', 'behind', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'yard'), True)	(('yard', 'in front of', 'door'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('chimney', 'above', 'roof'), True)	(('roof', 'above', 'chimney'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chimney', 'above', 'roof'), True)	(('roof', 'below', 'chimney'), True)
Constraint 1: x rln y <-> y rln x	(('chimney', 'connects', 'roof'), True)	(('roof', 'connects', 'chimney'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'walls'), True)	(('walls', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'walls'), True)	(('walls', 'below', 'roof'), True)
Constraint 1: x rln y <-> y rln x	(('roof', 'connects', 'walls'), True)	(('walls', 'connects', 'roof'), True)
Constraint 4 (True antecedent)	('chimney', 'above', 'roof')('roof', 'above', 'walls')	(('chimney', 'above', 'walls'), True)
Constraint 4 (True antecedent)	('walls', 'below', 'roof')('roof', 'below', 'chimney')	(('walls', 'below', 'chimney'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('driveway', 'behind', 'garage'), False)	(('garage', 'in front of', 'driveway'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'surrounds', 'walls'), False)	(('walls', 'surrounded by', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yard', 'behind', 'walls'), False)	(('walls', 'in front of', 'yard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('letterbox', 'surrounds', 'yard'), False)	(('yard', 'surrounded by', 'letterbox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yard', 'behind', 'door'), False)	(('door', 'in front of', 'yard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'chimney'), False)	(('chimney', 'below', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('walls', 'above', 'roof'), False)	(('roof', 'below', 'walls'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('chimney', 'above', 'walls'), True)	(('walls', 'above', 'chimney'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('walls', 'below', 'chimney'), True)	(('chimney', 'below', 'walls'), False)
Round 3 ...
house worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('chimney', 'part of', 'roof'), True)	(('roof', 'part of', 'chimney'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chimney', 'part of', 'roof'), True)	(('roof', 'has part', 'chimney'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'window'), True)	(('window', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'window'), True)	(('window', 'below', 'roof'), True)
Constraint 1: x rln y <-> y rln x	(('window', 'next to', 'balcony'), True)	(('balcony', 'next to', 'window'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'door'), True)	(('door', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'door'), True)	(('door', 'below', 'roof'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'connects', 'path'), True)	(('path', 'connects', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('path', 'next to', 'driveway'), True)	(('driveway', 'next to', 'path'), True)
Constraint 1: x rln y <-> y rln x	(('driveway', 'connects', 'garage'), True)	(('garage', 'connects', 'driveway'), True)
Constraint 1: x rln y <-> y rln x	(('path', 'next to', 'yard'), True)	(('yard', 'next to', 'path'), True)
Constraint 1: x rln y <-> y rln x	(('letterbox', 'next to', 'yard'), True)	(('yard', 'next to', 'letterbox'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'part of', 'chimney'), False)	(('chimney', 'has part', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'above', 'roof'), False)	(('roof', 'below', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'roof'), False)	(('roof', 'below', 'door'), False)
Round 3 ...
laptop worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('camera', 'above', 'screen'), True)	(('screen', 'above', 'camera'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('camera', 'above', 'screen'), True)	(('screen', 'below', 'camera'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('screen', 'above', 'keyboard'), True)	(('keyboard', 'above', 'screen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screen', 'above', 'keyboard'), True)	(('keyboard', 'below', 'screen'), True)
Constraint 1: x rln y <-> y rln x	(('keyboard', 'next to', 'left side ports'), True)	(('left side ports', 'next to', 'keyboard'), True)
Constraint 1: x rln y <-> y rln x	(('keyboard', 'next to', 'right side ports'), True)	(('right side ports', 'next to', 'keyboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'above', 'touchpad'), True)	(('touchpad', 'above', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'above', 'touchpad'), True)	(('touchpad', 'below', 'keyboard'), True)
Constraint 4 (True antecedent)	('camera', 'above', 'screen')('screen', 'above', 'keyboard')	(('camera', 'above', 'keyboard'), True)
Constraint 4 (True antecedent)	('screen', 'above', 'keyboard')('keyboard', 'above', 'touchpad')	(('screen', 'above', 'touchpad'), True)
Constraint 4 (True antecedent)	('keyboard', 'below', 'screen')('screen', 'below', 'camera')	(('keyboard', 'below', 'camera'), True)
Constraint 4 (True antecedent)	('touchpad', 'below', 'keyboard')('keyboard', 'below', 'screen')	(('touchpad', 'below', 'screen'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('screen', 'above', 'camera'), False)	(('camera', 'below', 'screen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'above', 'screen'), False)	(('screen', 'below', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('touchpad', 'above', 'keyboard'), False)	(('keyboard', 'below', 'touchpad'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('camera', 'above', 'keyboard'), True)	(('keyboard', 'above', 'camera'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('screen', 'above', 'touchpad'), True)	(('touchpad', 'above', 'screen'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'below', 'camera'), True)	(('camera', 'below', 'keyboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('touchpad', 'below', 'screen'), True)	(('screen', 'below', 'touchpad'), False)
Constraint 4 (True antecedent)	('camera', 'above', 'screen')('screen', 'above', 'touchpad')	(('camera', 'above', 'touchpad'), True)
Constraint 4 (True antecedent)	('touchpad', 'below', 'keyboard')('keyboard', 'below', 'camera')	(('touchpad', 'below', 'camera'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('camera', 'above', 'touchpad'), True)	(('touchpad', 'above', 'camera'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('touchpad', 'below', 'camera'), True)	(('camera', 'below', 'touchpad'), False)
Round 4 ...
laptop worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('camera', 'above', 'screen'), True)	(('screen', 'above', 'camera'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('camera', 'above', 'screen'), True)	(('screen', 'below', 'camera'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('screen', 'above', 'keyboard'), True)	(('keyboard', 'above', 'screen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screen', 'above', 'keyboard'), True)	(('keyboard', 'below', 'screen'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'behind', 'touchpad'), True)	(('touchpad', 'behind', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'behind', 'touchpad'), True)	(('touchpad', 'in front of', 'keyboard'), True)
Constraint 1: x rln y <-> y rln x	(('ports', 'next to', 'keyboard'), True)	(('keyboard', 'next to', 'ports'), True)
Constraint 4 (True antecedent)	('camera', 'above', 'screen')('screen', 'above', 'keyboard')	(('camera', 'above', 'keyboard'), True)
Constraint 4 (True antecedent)	('keyboard', 'below', 'screen')('screen', 'below', 'camera')	(('keyboard', 'below', 'camera'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('screen', 'above', 'camera'), False)	(('camera', 'below', 'screen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'above', 'screen'), False)	(('screen', 'below', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('touchpad', 'behind', 'keyboard'), False)	(('keyboard', 'in front of', 'touchpad'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('camera', 'above', 'keyboard'), True)	(('keyboard', 'above', 'camera'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'below', 'camera'), True)	(('camera', 'below', 'keyboard'), False)
Round 3 ...
laptop worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('left side ports', 'next to', 'keyboard'), True)	(('keyboard', 'next to', 'left side ports'), True)
Constraint 1: x rln y <-> y rln x	(('right side ports', 'next to', 'keyboard'), True)	(('keyboard', 'next to', 'right side ports'), True)
Constraint 1: x rln y <-> y rln x	(('touchpad', 'next to', 'keyboard'), True)	(('keyboard', 'next to', 'touchpad'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('camera', 'above', 'screen'), True)	(('screen', 'above', 'camera'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('camera', 'above', 'screen'), True)	(('screen', 'below', 'camera'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('screen', 'above', 'keyboard'), True)	(('keyboard', 'above', 'screen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screen', 'above', 'keyboard'), True)	(('keyboard', 'below', 'screen'), True)
Constraint 4 (True antecedent)	('camera', 'above', 'screen')('screen', 'above', 'keyboard')	(('camera', 'above', 'keyboard'), True)
Constraint 4 (True antecedent)	('keyboard', 'below', 'screen')('screen', 'below', 'camera')	(('keyboard', 'below', 'camera'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('screen', 'above', 'camera'), False)	(('camera', 'below', 'screen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'above', 'screen'), False)	(('screen', 'below', 'keyboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('camera', 'above', 'keyboard'), True)	(('keyboard', 'above', 'camera'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'below', 'camera'), True)	(('camera', 'below', 'keyboard'), False)
Round 3 ...
pencil sharpener worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('keyring loop', 'part of', 'body'), True)	(('body', 'part of', 'keyring loop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyring loop', 'part of', 'body'), True)	(('body', 'has part', 'keyring loop'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'blade'), True)	(('blade', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'surrounds', 'blade'), True)	(('blade', 'surrounds', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'surrounds', 'blade'), True)	(('blade', 'surrounded by', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tapered hole', 'part of', 'body'), True)	(('body', 'part of', 'tapered hole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tapered hole', 'part of', 'body'), True)	(('body', 'has part', 'tapered hole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('screw', 'above', 'blade'), True)	(('blade', 'above', 'screw'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screw', 'above', 'blade'), True)	(('blade', 'below', 'screw'), True)
Constraint 1: x rln y <-> y rln x	(('screw', 'connects', 'blade'), True)	(('blade', 'connects', 'screw'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'keyring loop'), False)	(('keyring loop', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'surrounds', 'body'), False)	(('body', 'surrounded by', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'tapered hole'), False)	(('tapered hole', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'above', 'screw'), False)	(('screw', 'below', 'blade'), False)
Round 3 ...
pencil sharpener worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('tapered hole', 'next to', 'blade'), True)	(('blade', 'next to', 'tapered hole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tapered hole', 'inside', 'body'), True)	(('body', 'inside', 'tapered hole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tapered hole', 'inside', 'body'), True)	(('body', 'contains', 'tapered hole'), True)
Constraint 1: x rln y <-> y rln x	(('blade', 'connects', 'screw'), True)	(('screw', 'connects', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'inside', 'body'), True)	(('body', 'inside', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'inside', 'body'), True)	(('body', 'contains', 'blade'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'screw'), True)	(('screw', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyring loop', 'part of', 'body'), True)	(('body', 'part of', 'keyring loop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyring loop', 'part of', 'body'), True)	(('body', 'has part', 'keyring loop'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'inside', 'tapered hole'), False)	(('tapered hole', 'contains', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'inside', 'blade'), False)	(('blade', 'contains', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'keyring loop'), False)	(('keyring loop', 'has part', 'body'), False)
Round 3 ...
pencil sharpener worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tapered hole', 'part of', 'body'), True)	(('body', 'part of', 'tapered hole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tapered hole', 'part of', 'body'), True)	(('body', 'has part', 'tapered hole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('screw', 'part of', 'blade'), True)	(('blade', 'part of', 'screw'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screw', 'part of', 'blade'), True)	(('blade', 'has part', 'screw'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'part of', 'body'), True)	(('body', 'part of', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'body'), True)	(('body', 'has part', 'blade'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'tapered hole'), False)	(('tapered hole', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'screw'), False)	(('screw', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'blade'), False)	(('blade', 'has part', 'body'), False)
Round 3 ...
pillow worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('pillow cover', 'surrounds', 'outer shell'), True)	(('outer shell', 'surrounds', 'pillow cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pillow cover', 'surrounds', 'outer shell'), True)	(('outer shell', 'surrounded by', 'pillow cover'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('outer shell', 'surrounds', 'filling'), True)	(('filling', 'surrounds', 'outer shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer shell', 'surrounds', 'filling'), True)	(('filling', 'surrounded by', 'outer shell'), True)
Constraint 4 (True antecedent)	('pillow cover', 'surrounds', 'outer shell')('outer shell', 'surrounds', 'filling')	(('pillow cover', 'surrounds', 'filling'), True)
Constraint 4 (True antecedent)	('filling', 'surrounded by', 'outer shell')('outer shell', 'surrounded by', 'pillow cover')	(('filling', 'surrounded by', 'pillow cover'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('outer shell', 'surrounds', 'pillow cover'), False)	(('pillow cover', 'surrounded by', 'outer shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filling', 'surrounds', 'outer shell'), False)	(('outer shell', 'surrounded by', 'filling'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pillow cover', 'surrounds', 'filling'), True)	(('filling', 'surrounds', 'pillow cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('filling', 'surrounded by', 'pillow cover'), True)	(('pillow cover', 'surrounded by', 'filling'), False)
Round 3 ...
pillow worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('pillow cover', 'surrounds', 'outer shell'), True)	(('outer shell', 'surrounds', 'pillow cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pillow cover', 'surrounds', 'outer shell'), True)	(('outer shell', 'surrounded by', 'pillow cover'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('outer shell', 'surrounds', 'filling'), True)	(('filling', 'surrounds', 'outer shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer shell', 'surrounds', 'filling'), True)	(('filling', 'surrounded by', 'outer shell'), True)
Constraint 4 (True antecedent)	('pillow cover', 'surrounds', 'outer shell')('outer shell', 'surrounds', 'filling')	(('pillow cover', 'surrounds', 'filling'), True)
Constraint 4 (True antecedent)	('filling', 'surrounded by', 'outer shell')('outer shell', 'surrounded by', 'pillow cover')	(('filling', 'surrounded by', 'pillow cover'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('outer shell', 'surrounds', 'pillow cover'), False)	(('pillow cover', 'surrounded by', 'outer shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filling', 'surrounds', 'outer shell'), False)	(('outer shell', 'surrounded by', 'filling'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pillow cover', 'surrounds', 'filling'), True)	(('filling', 'surrounds', 'pillow cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('filling', 'surrounded by', 'pillow cover'), True)	(('pillow cover', 'surrounded by', 'filling'), False)
Round 3 ...
pillow worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('pillow cover', 'surrounds', 'outer shell'), True)	(('outer shell', 'surrounds', 'pillow cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pillow cover', 'surrounds', 'outer shell'), True)	(('outer shell', 'surrounded by', 'pillow cover'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filling', 'inside', 'outer shell'), True)	(('outer shell', 'inside', 'filling'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filling', 'inside', 'outer shell'), True)	(('outer shell', 'contains', 'filling'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('outer shell', 'surrounds', 'pillow cover'), False)	(('pillow cover', 'surrounded by', 'outer shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer shell', 'inside', 'filling'), False)	(('filling', 'contains', 'outer shell'), False)
Round 3 ...
stroller worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('arm rest', 'connects', 'armrest adjust button'), True)	(('armrest adjust button', 'connects', 'arm rest'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeping basket', 'behind', 'armrest'), True)	(('armrest', 'behind', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'behind', 'armrest'), True)	(('armrest', 'in front of', 'sleeping basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'above', 'sleeping basket'), True)	(('sleeping basket', 'above', 'handlebar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handlebar', 'above', 'sleeping basket'), True)	(('sleeping basket', 'below', 'handlebar'), True)
Constraint 1: x rln y <-> y rln x	(('armrest', 'connects', 'frame'), True)	(('frame', 'connects', 'armrest'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'above', 'canopy'), True)	(('canopy', 'above', 'handlebar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handlebar', 'above', 'canopy'), True)	(('canopy', 'below', 'handlebar'), True)
Constraint 1: x rln y <-> y rln x	(('canopy', 'connects', 'frame'), True)	(('frame', 'connects', 'canopy'), True)
Constraint 1: x rln y <-> y rln x	(('handlebar', 'connects', 'frame'), True)	(('frame', 'connects', 'handlebar'), True)
Constraint 1: x rln y <-> y rln x	(('braking foot rest', 'connects', 'wheels'), True)	(('wheels', 'connects', 'braking foot rest'), True)
Constraint 1: x rln y <-> y rln x	(('wheels', 'connects', 'frame'), True)	(('frame', 'connects', 'wheels'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'wheels'), True)	(('wheels', 'above', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'wheels'), True)	(('wheels', 'below', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('folding button', 'connects', 'frame'), True)	(('frame', 'connects', 'folding button'), True)
Constraint 1: x rln y <-> y rln x	(('foot rest', 'connects', 'frame'), True)	(('frame', 'connects', 'foot rest'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('storage basket', 'above', 'wheels'), True)	(('wheels', 'above', 'storage basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('storage basket', 'above', 'wheels'), True)	(('wheels', 'below', 'storage basket'), True)
Constraint 1: x rln y <-> y rln x	(('sleeping basket', 'connects', 'frame'), True)	(('frame', 'connects', 'sleeping basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeping basket', 'above', 'storage basket'), True)	(('storage basket', 'above', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'storage basket'), True)	(('storage basket', 'below', 'sleeping basket'), True)
Constraint 4 (True antecedent)	('handlebar', 'above', 'sleeping basket')('sleeping basket', 'above', 'storage basket')	(('handlebar', 'above', 'storage basket'), True)
Constraint 4 (True antecedent)	('sleeping basket', 'above', 'storage basket')('storage basket', 'above', 'wheels')	(('sleeping basket', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'storage basket')('storage basket', 'below', 'sleeping basket')	(('wheels', 'below', 'sleeping basket'), True)
Constraint 4 (True antecedent)	('storage basket', 'below', 'sleeping basket')('sleeping basket', 'below', 'handlebar')	(('storage basket', 'below', 'handlebar'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('armrest', 'behind', 'sleeping basket'), False)	(('sleeping basket', 'in front of', 'armrest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'handlebar'), False)	(('handlebar', 'below', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('canopy', 'above', 'handlebar'), False)	(('handlebar', 'below', 'canopy'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'frame'), False)	(('frame', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'storage basket'), False)	(('storage basket', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('storage basket', 'above', 'sleeping basket'), False)	(('sleeping basket', 'below', 'storage basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'above', 'storage basket'), True)	(('storage basket', 'above', 'handlebar'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeping basket', 'above', 'wheels'), True)	(('wheels', 'above', 'sleeping basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'sleeping basket'), True)	(('sleeping basket', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('storage basket', 'below', 'handlebar'), True)	(('handlebar', 'below', 'storage basket'), False)
Constraint 4 (True antecedent)	('handlebar', 'above', 'sleeping basket')('sleeping basket', 'above', 'wheels')	(('handlebar', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'storage basket')('storage basket', 'below', 'handlebar')	(('wheels', 'below', 'handlebar'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'above', 'wheels'), True)	(('wheels', 'above', 'handlebar'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'handlebar'), True)	(('handlebar', 'below', 'wheels'), False)
Round 4 ...
stroller worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('brakes', 'next to', 'wheels'), True)	(('wheels', 'next to', 'brakes'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('foot rest', 'above', 'wheels'), True)	(('wheels', 'above', 'foot rest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot rest', 'above', 'wheels'), True)	(('wheels', 'below', 'foot rest'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeping basket', 'above', 'foot rest'), True)	(('foot rest', 'above', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'foot rest'), True)	(('foot rest', 'below', 'sleeping basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeping basket', 'above', 'storage basket'), True)	(('storage basket', 'above', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'storage basket'), True)	(('storage basket', 'below', 'sleeping basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'sleeping basket'), True)	(('sleeping basket', 'above', 'canopy'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('canopy', 'above', 'sleeping basket'), True)	(('sleeping basket', 'below', 'canopy'), True)
Constraint 1: x rln y <-> y rln x	(('canopy', 'next to', 'folding button'), True)	(('folding button', 'next to', 'canopy'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'above', 'folding button'), True)	(('folding button', 'above', 'handlebar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handlebar', 'above', 'folding button'), True)	(('folding button', 'below', 'handlebar'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'behind', 'canopy'), True)	(('canopy', 'behind', 'handlebar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handlebar', 'behind', 'canopy'), True)	(('canopy', 'in front of', 'handlebar'), True)
Constraint 4 (True antecedent)	('sleeping basket', 'above', 'foot rest')('foot rest', 'above', 'wheels')	(('sleeping basket', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('canopy', 'above', 'sleeping basket')('sleeping basket', 'above', 'foot rest')	(('canopy', 'above', 'foot rest'), True)
Constraint 4 (True antecedent)	('canopy', 'above', 'sleeping basket')('sleeping basket', 'above', 'storage basket')	(('canopy', 'above', 'storage basket'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'foot rest')('foot rest', 'below', 'sleeping basket')	(('wheels', 'below', 'sleeping basket'), True)
Constraint 4 (True antecedent)	('foot rest', 'below', 'sleeping basket')('sleeping basket', 'below', 'canopy')	(('foot rest', 'below', 'canopy'), True)
Constraint 4 (True antecedent)	('storage basket', 'below', 'sleeping basket')('sleeping basket', 'below', 'canopy')	(('storage basket', 'below', 'canopy'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'foot rest'), False)	(('foot rest', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot rest', 'above', 'sleeping basket'), False)	(('sleeping basket', 'below', 'foot rest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('storage basket', 'above', 'sleeping basket'), False)	(('sleeping basket', 'below', 'storage basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'canopy'), False)	(('canopy', 'below', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('folding button', 'above', 'handlebar'), False)	(('handlebar', 'below', 'folding button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('canopy', 'behind', 'handlebar'), False)	(('handlebar', 'in front of', 'canopy'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeping basket', 'above', 'wheels'), True)	(('wheels', 'above', 'sleeping basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'foot rest'), True)	(('foot rest', 'above', 'canopy'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'storage basket'), True)	(('storage basket', 'above', 'canopy'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'sleeping basket'), True)	(('sleeping basket', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot rest', 'below', 'canopy'), True)	(('canopy', 'below', 'foot rest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('storage basket', 'below', 'canopy'), True)	(('canopy', 'below', 'storage basket'), False)
Constraint 4 (True antecedent)	('canopy', 'above', 'sleeping basket')('sleeping basket', 'above', 'wheels')	(('canopy', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'foot rest')('foot rest', 'below', 'canopy')	(('wheels', 'below', 'canopy'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'wheels'), True)	(('wheels', 'above', 'canopy'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'canopy'), True)	(('canopy', 'below', 'wheels'), False)
Round 4 ...
stroller worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('folding button', 'part of', 'handlebar'), True)	(('handlebar', 'part of', 'folding button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('folding button', 'part of', 'handlebar'), True)	(('handlebar', 'has part', 'folding button'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'above', 'sleeping basket'), True)	(('sleeping basket', 'above', 'handlebar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handlebar', 'above', 'sleeping basket'), True)	(('sleeping basket', 'below', 'handlebar'), True)
Constraint 1: x rln y <-> y rln x	(('handlebar', 'connects', 'armrest'), True)	(('armrest', 'connects', 'handlebar'), True)
Constraint 1: x rln y <-> y rln x	(('handlebar', 'connects', 'canopy'), True)	(('canopy', 'connects', 'handlebar'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('armrest', 'above', 'sleeping basket'), True)	(('sleeping basket', 'above', 'armrest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('armrest', 'above', 'sleeping basket'), True)	(('sleeping basket', 'below', 'armrest'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'sleeping basket'), True)	(('sleeping basket', 'above', 'canopy'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('canopy', 'above', 'sleeping basket'), True)	(('sleeping basket', 'below', 'canopy'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeping basket', 'above', 'foot rest'), True)	(('foot rest', 'above', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'foot rest'), True)	(('foot rest', 'below', 'sleeping basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeping basket', 'above', 'storage basket'), True)	(('storage basket', 'above', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'storage basket'), True)	(('storage basket', 'below', 'sleeping basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('storage basket', 'above', 'wheels'), True)	(('wheels', 'above', 'storage basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('storage basket', 'above', 'wheels'), True)	(('wheels', 'below', 'storage basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('foot rest', 'above', 'wheels'), True)	(('wheels', 'above', 'foot rest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot rest', 'above', 'wheels'), True)	(('wheels', 'below', 'foot rest'), True)
Constraint 1: x rln y <-> y rln x	(('wheels', 'connects', 'brakes'), True)	(('brakes', 'connects', 'wheels'), True)
Constraint 4 (True antecedent)	('handlebar', 'above', 'sleeping basket')('sleeping basket', 'above', 'foot rest')	(('handlebar', 'above', 'foot rest'), True)
Constraint 4 (True antecedent)	('handlebar', 'above', 'sleeping basket')('sleeping basket', 'above', 'storage basket')	(('handlebar', 'above', 'storage basket'), True)
Constraint 4 (True antecedent)	('armrest', 'above', 'sleeping basket')('sleeping basket', 'above', 'foot rest')	(('armrest', 'above', 'foot rest'), True)
Constraint 4 (True antecedent)	('armrest', 'above', 'sleeping basket')('sleeping basket', 'above', 'storage basket')	(('armrest', 'above', 'storage basket'), True)
Constraint 4 (True antecedent)	('canopy', 'above', 'sleeping basket')('sleeping basket', 'above', 'foot rest')	(('canopy', 'above', 'foot rest'), True)
Constraint 4 (True antecedent)	('canopy', 'above', 'sleeping basket')('sleeping basket', 'above', 'storage basket')	(('canopy', 'above', 'storage basket'), True)
Constraint 4 (True antecedent)	('sleeping basket', 'above', 'foot rest')('foot rest', 'above', 'wheels')	(('sleeping basket', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('foot rest', 'below', 'sleeping basket')('sleeping basket', 'below', 'handlebar')	(('foot rest', 'below', 'handlebar'), True)
Constraint 4 (True antecedent)	('foot rest', 'below', 'sleeping basket')('sleeping basket', 'below', 'armrest')	(('foot rest', 'below', 'armrest'), True)
Constraint 4 (True antecedent)	('foot rest', 'below', 'sleeping basket')('sleeping basket', 'below', 'canopy')	(('foot rest', 'below', 'canopy'), True)
Constraint 4 (True antecedent)	('storage basket', 'below', 'sleeping basket')('sleeping basket', 'below', 'handlebar')	(('storage basket', 'below', 'handlebar'), True)
Constraint 4 (True antecedent)	('storage basket', 'below', 'sleeping basket')('sleeping basket', 'below', 'armrest')	(('storage basket', 'below', 'armrest'), True)
Constraint 4 (True antecedent)	('storage basket', 'below', 'sleeping basket')('sleeping basket', 'below', 'canopy')	(('storage basket', 'below', 'canopy'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'storage basket')('storage basket', 'below', 'sleeping basket')	(('wheels', 'below', 'sleeping basket'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('handlebar', 'part of', 'folding button'), False)	(('folding button', 'has part', 'handlebar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'handlebar'), False)	(('handlebar', 'below', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'armrest'), False)	(('armrest', 'below', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeping basket', 'above', 'canopy'), False)	(('canopy', 'below', 'sleeping basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot rest', 'above', 'sleeping basket'), False)	(('sleeping basket', 'below', 'foot rest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('storage basket', 'above', 'sleeping basket'), False)	(('sleeping basket', 'below', 'storage basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'storage basket'), False)	(('storage basket', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'foot rest'), False)	(('foot rest', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'above', 'foot rest'), True)	(('foot rest', 'above', 'handlebar'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'above', 'storage basket'), True)	(('storage basket', 'above', 'handlebar'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('armrest', 'above', 'foot rest'), True)	(('foot rest', 'above', 'armrest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('armrest', 'above', 'storage basket'), True)	(('storage basket', 'above', 'armrest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'foot rest'), True)	(('foot rest', 'above', 'canopy'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'storage basket'), True)	(('storage basket', 'above', 'canopy'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeping basket', 'above', 'wheels'), True)	(('wheels', 'above', 'sleeping basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot rest', 'below', 'handlebar'), True)	(('handlebar', 'below', 'foot rest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot rest', 'below', 'armrest'), True)	(('armrest', 'below', 'foot rest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot rest', 'below', 'canopy'), True)	(('canopy', 'below', 'foot rest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('storage basket', 'below', 'handlebar'), True)	(('handlebar', 'below', 'storage basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('storage basket', 'below', 'armrest'), True)	(('armrest', 'below', 'storage basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('storage basket', 'below', 'canopy'), True)	(('canopy', 'below', 'storage basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'sleeping basket'), True)	(('sleeping basket', 'below', 'wheels'), False)
Constraint 4 (True antecedent)	('handlebar', 'above', 'sleeping basket')('sleeping basket', 'above', 'wheels')	(('handlebar', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('armrest', 'above', 'sleeping basket')('sleeping basket', 'above', 'wheels')	(('armrest', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('canopy', 'above', 'sleeping basket')('sleeping basket', 'above', 'wheels')	(('canopy', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'storage basket')('storage basket', 'below', 'handlebar')	(('wheels', 'below', 'handlebar'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'storage basket')('storage basket', 'below', 'armrest')	(('wheels', 'below', 'armrest'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'storage basket')('storage basket', 'below', 'canopy')	(('wheels', 'below', 'canopy'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('handlebar', 'above', 'wheels'), True)	(('wheels', 'above', 'handlebar'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('armrest', 'above', 'wheels'), True)	(('wheels', 'above', 'armrest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'wheels'), True)	(('wheels', 'above', 'canopy'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'handlebar'), True)	(('handlebar', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'armrest'), True)	(('armrest', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'canopy'), True)	(('canopy', 'below', 'wheels'), False)
Round 4 ...
table fan worker_106...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('guard', 'connects', 'chip'), True)	(('chip', 'connects', 'guard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'inside', 'guard'), True)	(('guard', 'inside', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'inside', 'guard'), True)	(('guard', 'contains', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'part of', 'blade shank'), True)	(('blade shank', 'part of', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'blade shank'), True)	(('blade shank', 'has part', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stator', 'above', 'blade shank'), True)	(('blade shank', 'above', 'stator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stator', 'above', 'blade shank'), True)	(('blade shank', 'below', 'stator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stator', 'above', 'rotor'), True)	(('rotor', 'above', 'stator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stator', 'above', 'rotor'), True)	(('rotor', 'below', 'stator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rotor', 'above', 'stand'), True)	(('stand', 'above', 'rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rotor', 'above', 'stand'), True)	(('stand', 'below', 'rotor'), True)
Constraint 1: x rln y <-> y rln x	(('capacitor', 'connects', 'stand'), True)	(('stand', 'connects', 'capacitor'), True)
Constraint 1: x rln y <-> y rln x	(('speed controller', 'connects', 'stand'), True)	(('stand', 'connects', 'speed controller'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('oscillator knob', 'above', 'knob spindle'), True)	(('knob spindle', 'above', 'oscillator knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oscillator knob', 'above', 'knob spindle'), True)	(('knob spindle', 'below', 'oscillator knob'), True)
Constraint 1: x rln y <-> y rln x	(('knob spindle', 'connects', 'rotor'), True)	(('rotor', 'connects', 'knob spindle'), True)
Constraint 1: x rln y <-> y rln x	(('knob spindle', 'connects', 'false cover'), True)	(('false cover', 'connects', 'knob spindle'), True)
Constraint 4 (True antecedent)	('stator', 'above', 'rotor')('rotor', 'above', 'stand')	(('stator', 'above', 'stand'), True)
Constraint 4 (True antecedent)	('stand', 'below', 'rotor')('rotor', 'below', 'stator')	(('stand', 'below', 'stator'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('guard', 'inside', 'blade'), False)	(('blade', 'contains', 'guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade shank', 'part of', 'blade'), False)	(('blade', 'has part', 'blade shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade shank', 'above', 'stator'), False)	(('stator', 'below', 'blade shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rotor', 'above', 'stator'), False)	(('stator', 'below', 'rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stand', 'above', 'rotor'), False)	(('rotor', 'below', 'stand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('knob spindle', 'above', 'oscillator knob'), False)	(('oscillator knob', 'below', 'knob spindle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stator', 'above', 'stand'), True)	(('stand', 'above', 'stator'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stand', 'below', 'stator'), True)	(('stator', 'below', 'stand'), False)
Round 3 ...
table fan worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('speed control knob', 'part of', 'stand'), True)	(('stand', 'part of', 'speed control knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('speed control knob', 'part of', 'stand'), True)	(('stand', 'has part', 'speed control knob'), True)
Constraint 1: x rln y <-> y rln x	(('stand', 'connects', 'stator'), True)	(('stator', 'connects', 'stand'), True)
Constraint 1: x rln y <-> y rln x	(('stand', 'connects', 'rotor'), True)	(('rotor', 'connects', 'stand'), True)
Constraint 1: x rln y <-> y rln x	(('rotor', 'connects', 'stator'), True)	(('stator', 'connects', 'rotor'), True)
Constraint 1: x rln y <-> y rln x	(('rotor', 'connects', 'blade shank'), True)	(('blade shank', 'connects', 'rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('guard', 'surrounds', 'blade shank'), True)	(('blade shank', 'surrounds', 'guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guard', 'surrounds', 'blade shank'), True)	(('blade shank', 'surrounded by', 'guard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('guard', 'surrounds', 'blade'), True)	(('blade', 'surrounds', 'guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guard', 'surrounds', 'blade'), True)	(('blade', 'surrounded by', 'guard'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('stand', 'part of', 'speed control knob'), False)	(('speed control knob', 'has part', 'stand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade shank', 'surrounds', 'guard'), False)	(('guard', 'surrounded by', 'blade shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'surrounds', 'guard'), False)	(('guard', 'surrounded by', 'blade'), False)
Round 3 ...
table fan worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('speed control knob', 'part of', 'stand'), True)	(('stand', 'part of', 'speed control knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('speed control knob', 'part of', 'stand'), True)	(('stand', 'has part', 'speed control knob'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'inside', 'guard'), True)	(('guard', 'inside', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'inside', 'guard'), True)	(('guard', 'contains', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'above', 'stand'), True)	(('stand', 'above', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'above', 'stand'), True)	(('stand', 'below', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('blade shank', 'behind', 'blade'), True)	(('blade', 'behind', 'blade shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade shank', 'behind', 'blade'), True)	(('blade', 'in front of', 'blade shank'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rotor', 'behind', 'stator'), True)	(('stator', 'behind', 'rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rotor', 'behind', 'stator'), True)	(('stator', 'in front of', 'rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stator', 'behind', 'blade shank'), True)	(('blade shank', 'behind', 'stator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stator', 'behind', 'blade shank'), True)	(('blade shank', 'in front of', 'stator'), True)
Constraint 4 (True antecedent)	('rotor', 'behind', 'stator')('stator', 'behind', 'blade shank')	(('rotor', 'behind', 'blade shank'), True)
Constraint 4 (True antecedent)	('stator', 'behind', 'blade shank')('blade shank', 'behind', 'blade')	(('stator', 'behind', 'blade'), True)
Constraint 4 (True antecedent)	('blade', 'in front of', 'blade shank')('blade shank', 'in front of', 'stator')	(('blade', 'in front of', 'stator'), True)
Constraint 4 (True antecedent)	('blade shank', 'in front of', 'stator')('stator', 'in front of', 'rotor')	(('blade shank', 'in front of', 'rotor'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('stand', 'part of', 'speed control knob'), False)	(('speed control knob', 'has part', 'stand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guard', 'inside', 'blade'), False)	(('blade', 'contains', 'guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stand', 'above', 'blade'), False)	(('blade', 'below', 'stand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'behind', 'blade shank'), False)	(('blade shank', 'in front of', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stator', 'behind', 'rotor'), False)	(('rotor', 'in front of', 'stator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade shank', 'behind', 'stator'), False)	(('stator', 'in front of', 'blade shank'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rotor', 'behind', 'blade shank'), True)	(('blade shank', 'behind', 'rotor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stator', 'behind', 'blade'), True)	(('blade', 'behind', 'stator'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'in front of', 'stator'), True)	(('stator', 'in front of', 'blade'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('blade shank', 'in front of', 'rotor'), True)	(('rotor', 'in front of', 'blade shank'), False)
Constraint 4 (True antecedent)	('rotor', 'behind', 'stator')('stator', 'behind', 'blade')	(('rotor', 'behind', 'blade'), True)
Constraint 4 (True antecedent)	('blade', 'in front of', 'blade shank')('blade shank', 'in front of', 'rotor')	(('blade', 'in front of', 'rotor'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('rotor', 'behind', 'blade'), True)	(('blade', 'behind', 'rotor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'in front of', 'rotor'), True)	(('rotor', 'in front of', 'blade'), False)
Round 4 ...
truck worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('chassis', 'connects', 'trailer'), True)	(('trailer', 'connects', 'chassis'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trailer', 'above', 'chassis'), True)	(('chassis', 'above', 'trailer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trailer', 'above', 'chassis'), True)	(('chassis', 'below', 'trailer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('chassis', 'above', 'wheels'), True)	(('wheels', 'above', 'chassis'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chassis', 'above', 'wheels'), True)	(('wheels', 'below', 'chassis'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trailer', 'above', 'wheels'), True)	(('wheels', 'above', 'trailer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trailer', 'above', 'wheels'), True)	(('wheels', 'below', 'trailer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trailer', 'behind', 'cab'), True)	(('cab', 'behind', 'trailer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trailer', 'behind', 'cab'), True)	(('cab', 'in front of', 'trailer'), True)
Constraint 1: x rln y <-> y rln x	(('trailer', 'connects', 'cab'), True)	(('cab', 'connects', 'trailer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cab', 'behind', 'engine'), True)	(('engine', 'behind', 'cab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cab', 'behind', 'engine'), True)	(('engine', 'in front of', 'cab'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cab', 'above', 'wheels'), True)	(('wheels', 'above', 'cab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cab', 'above', 'wheels'), True)	(('wheels', 'below', 'cab'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'above', 'wheels'), True)	(('wheels', 'above', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'above', 'wheels'), True)	(('wheels', 'below', 'engine'), True)
Constraint 4 (True antecedent)	('trailer', 'behind', 'cab')('cab', 'behind', 'engine')	(('trailer', 'behind', 'engine'), True)
Constraint 4 (True antecedent)	('engine', 'in front of', 'cab')('cab', 'in front of', 'trailer')	(('engine', 'in front of', 'trailer'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('chassis', 'above', 'trailer'), False)	(('trailer', 'below', 'chassis'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'chassis'), False)	(('chassis', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'trailer'), False)	(('trailer', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cab', 'behind', 'trailer'), False)	(('trailer', 'in front of', 'cab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'cab'), False)	(('cab', 'in front of', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'cab'), False)	(('cab', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'engine'), False)	(('engine', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('trailer', 'behind', 'engine'), True)	(('engine', 'behind', 'trailer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'in front of', 'trailer'), True)	(('trailer', 'in front of', 'engine'), False)
Round 3 ...
truck worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'inside', 'cab'), True)	(('cab', 'inside', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'inside', 'cab'), True)	(('cab', 'contains', 'engine'), True)
Constraint 1: x rln y <-> y rln x	(('engine', 'connects', 'chassis'), True)	(('chassis', 'connects', 'engine'), True)
Constraint 1: x rln y <-> y rln x	(('chassis', 'connects', 'cab'), True)	(('cab', 'connects', 'chassis'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('chassis', 'behind', 'cab'), True)	(('cab', 'behind', 'chassis'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chassis', 'behind', 'cab'), True)	(('cab', 'in front of', 'chassis'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trailer', 'above', 'chassis'), True)	(('chassis', 'above', 'trailer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trailer', 'above', 'chassis'), True)	(('chassis', 'below', 'trailer'), True)
Constraint 1: x rln y <-> y rln x	(('trailer', 'connects', 'chassis'), True)	(('chassis', 'connects', 'trailer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trailer', 'above', 'wheels'), True)	(('wheels', 'above', 'trailer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trailer', 'above', 'wheels'), True)	(('wheels', 'below', 'trailer'), True)
Constraint 1: x rln y <-> y rln x	(('wheels', 'connects', 'chassis'), True)	(('chassis', 'connects', 'wheels'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cab', 'inside', 'engine'), False)	(('engine', 'contains', 'cab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cab', 'behind', 'chassis'), False)	(('chassis', 'in front of', 'cab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chassis', 'above', 'trailer'), False)	(('trailer', 'below', 'chassis'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'trailer'), False)	(('trailer', 'below', 'wheels'), False)
Round 3 ...
truck worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('cab', 'above', 'wheels'), True)	(('wheels', 'above', 'cab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cab', 'above', 'wheels'), True)	(('wheels', 'below', 'cab'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cab', 'requires', 'engine'), True)	(('engine', 'requires', 'cab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cab', 'requires', 'engine'), True)	(('engine', 'required by', 'cab'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cab', 'behind', 'engine'), True)	(('engine', 'behind', 'cab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cab', 'behind', 'engine'), True)	(('engine', 'in front of', 'cab'), True)
Constraint 1: x rln y <-> y rln x	(('cab', 'connects', 'trailer'), True)	(('trailer', 'connects', 'cab'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trailer', 'behind', 'cab'), True)	(('cab', 'behind', 'trailer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trailer', 'behind', 'cab'), True)	(('cab', 'in front of', 'trailer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trailer', 'above', 'chassis'), True)	(('chassis', 'above', 'trailer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trailer', 'above', 'chassis'), True)	(('chassis', 'below', 'trailer'), True)
Constraint 4 (True antecedent)	('trailer', 'behind', 'cab')('cab', 'behind', 'engine')	(('trailer', 'behind', 'engine'), True)
Constraint 4 (True antecedent)	('engine', 'in front of', 'cab')('cab', 'in front of', 'trailer')	(('engine', 'in front of', 'trailer'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'cab'), False)	(('cab', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'requires', 'cab'), False)	(('cab', 'required by', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'cab'), False)	(('cab', 'in front of', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cab', 'behind', 'trailer'), False)	(('trailer', 'in front of', 'cab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chassis', 'above', 'trailer'), False)	(('trailer', 'below', 'chassis'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('trailer', 'behind', 'engine'), True)	(('engine', 'behind', 'trailer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'in front of', 'trailer'), True)	(('trailer', 'in front of', 'engine'), False)
Round 3 ...
washing machine worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('water inlet waves', 'connects', 'drum'), True)	(('drum', 'connects', 'water inlet waves'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'drum'), True)	(('drum', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'drum'), True)	(('drum', 'below', 'lid'), True)
Constraint 1: x rln y <-> y rln x	(('lid', 'connects', 'lid switch'), True)	(('lid switch', 'connects', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('drum', 'surrounds', 'agitator'), True)	(('agitator', 'surrounds', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'surrounds', 'agitator'), True)	(('agitator', 'surrounded by', 'drum'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('agitator', 'above', 'transmission'), True)	(('transmission', 'above', 'agitator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('agitator', 'above', 'transmission'), True)	(('transmission', 'below', 'agitator'), True)
Constraint 1: x rln y <-> y rln x	(('agitator', 'connects', 'transmission'), True)	(('transmission', 'connects', 'agitator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'surrounds', 'transmission'), True)	(('transmission', 'surrounds', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'surrounds', 'transmission'), True)	(('transmission', 'surrounded by', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'surrounds', 'motor'), True)	(('motor', 'surrounds', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'surrounds', 'motor'), True)	(('motor', 'surrounded by', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('lid switch', 'connects', 'frame'), True)	(('frame', 'connects', 'lid switch'), True)
Constraint 1: x rln y <-> y rln x	(('drain hose', 'connects', 'water pump'), True)	(('water pump', 'connects', 'drain hose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'surrounds', 'water pump'), True)	(('water pump', 'surrounds', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'surrounds', 'water pump'), True)	(('water pump', 'surrounded by', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'leveling feet'), True)	(('leveling feet', 'above', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'leveling feet'), True)	(('leveling feet', 'below', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('leveling feet', 'connects', 'frame'), True)	(('frame', 'connects', 'leveling feet'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'power supply'), True)	(('power supply', 'connects', 'frame'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'above', 'lid'), False)	(('lid', 'below', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('agitator', 'surrounds', 'drum'), False)	(('drum', 'surrounded by', 'agitator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transmission', 'above', 'agitator'), False)	(('agitator', 'below', 'transmission'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transmission', 'surrounds', 'frame'), False)	(('frame', 'surrounded by', 'transmission'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('motor', 'surrounds', 'frame'), False)	(('frame', 'surrounded by', 'motor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water pump', 'surrounds', 'frame'), False)	(('frame', 'surrounded by', 'water pump'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leveling feet', 'above', 'frame'), False)	(('frame', 'below', 'leveling feet'), False)
Round 3 ...
washing machine worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('controls', 'next to', 'monitors'), True)	(('monitors', 'next to', 'controls'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('controls', 'above', 'lid'), True)	(('lid', 'above', 'controls'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('controls', 'above', 'lid'), True)	(('lid', 'below', 'controls'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('monitors', 'above', 'lid'), True)	(('lid', 'above', 'monitors'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('monitors', 'above', 'lid'), True)	(('lid', 'below', 'monitors'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'drum'), True)	(('drum', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'drum'), True)	(('drum', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('drum', 'above', 'transmission'), True)	(('transmission', 'above', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'above', 'transmission'), True)	(('transmission', 'below', 'drum'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('drum', 'above', 'motor'), True)	(('motor', 'above', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'above', 'motor'), True)	(('motor', 'below', 'drum'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('agitator', 'inside', 'drum'), True)	(('drum', 'inside', 'agitator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('agitator', 'inside', 'drum'), True)	(('drum', 'contains', 'agitator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power supply', 'behind', 'drum'), True)	(('drum', 'behind', 'power supply'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power supply', 'behind', 'drum'), True)	(('drum', 'in front of', 'power supply'), True)
Constraint 1: x rln y <-> y rln x	(('transmission', 'next to', 'motor'), True)	(('motor', 'next to', 'transmission'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('transmission', 'requires', 'motor supply'), True)	(('motor supply', 'requires', 'transmission'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transmission', 'requires', 'motor supply'), True)	(('motor supply', 'required by', 'transmission'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'requires', 'power supply'), True)	(('power supply', 'requires', 'motor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('motor', 'requires', 'power supply'), True)	(('power supply', 'required by', 'motor'), True)
Constraint 1: x rln y <-> y rln x	(('water pump', 'next to', 'transmission'), True)	(('transmission', 'next to', 'water pump'), True)
Constraint 4 (True antecedent)	('controls', 'above', 'lid')('lid', 'above', 'drum')	(('controls', 'above', 'drum'), True)
Constraint 4 (True antecedent)	('monitors', 'above', 'lid')('lid', 'above', 'drum')	(('monitors', 'above', 'drum'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'drum')('drum', 'above', 'transmission')	(('lid', 'above', 'transmission'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'drum')('drum', 'above', 'motor')	(('lid', 'above', 'motor'), True)
Constraint 4 (True antecedent)	('drum', 'below', 'lid')('lid', 'below', 'controls')	(('drum', 'below', 'controls'), True)
Constraint 4 (True antecedent)	('drum', 'below', 'lid')('lid', 'below', 'monitors')	(('drum', 'below', 'monitors'), True)
Constraint 4 (True antecedent)	('transmission', 'below', 'drum')('drum', 'below', 'lid')	(('transmission', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('motor', 'below', 'drum')('drum', 'below', 'lid')	(('motor', 'below', 'lid'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'controls'), False)	(('controls', 'below', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'monitors'), False)	(('monitors', 'below', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'above', 'lid'), False)	(('lid', 'below', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transmission', 'above', 'drum'), False)	(('drum', 'below', 'transmission'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('motor', 'above', 'drum'), False)	(('drum', 'below', 'motor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'inside', 'agitator'), False)	(('agitator', 'contains', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'behind', 'power supply'), False)	(('power supply', 'in front of', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('motor supply', 'requires', 'transmission'), False)	(('transmission', 'required by', 'motor supply'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power supply', 'requires', 'motor'), False)	(('motor', 'required by', 'power supply'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('controls', 'above', 'drum'), True)	(('drum', 'above', 'controls'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('monitors', 'above', 'drum'), True)	(('drum', 'above', 'monitors'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'transmission'), True)	(('transmission', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'motor'), True)	(('motor', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drum', 'below', 'controls'), True)	(('controls', 'below', 'drum'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drum', 'below', 'monitors'), True)	(('monitors', 'below', 'drum'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('transmission', 'below', 'lid'), True)	(('lid', 'below', 'transmission'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'below', 'lid'), True)	(('lid', 'below', 'motor'), False)
Constraint 4 (True antecedent)	('controls', 'above', 'lid')('lid', 'above', 'transmission')	(('controls', 'above', 'transmission'), True)
Constraint 4 (True antecedent)	('controls', 'above', 'lid')('lid', 'above', 'motor')	(('controls', 'above', 'motor'), True)
Constraint 4 (True antecedent)	('monitors', 'above', 'lid')('lid', 'above', 'transmission')	(('monitors', 'above', 'transmission'), True)
Constraint 4 (True antecedent)	('monitors', 'above', 'lid')('lid', 'above', 'motor')	(('monitors', 'above', 'motor'), True)
Constraint 4 (True antecedent)	('transmission', 'below', 'drum')('drum', 'below', 'controls')	(('transmission', 'below', 'controls'), True)
Constraint 4 (True antecedent)	('transmission', 'below', 'drum')('drum', 'below', 'monitors')	(('transmission', 'below', 'monitors'), True)
Constraint 4 (True antecedent)	('motor', 'below', 'drum')('drum', 'below', 'controls')	(('motor', 'below', 'controls'), True)
Constraint 4 (True antecedent)	('motor', 'below', 'drum')('drum', 'below', 'monitors')	(('motor', 'below', 'monitors'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('controls', 'above', 'transmission'), True)	(('transmission', 'above', 'controls'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('controls', 'above', 'motor'), True)	(('motor', 'above', 'controls'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('monitors', 'above', 'transmission'), True)	(('transmission', 'above', 'monitors'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('monitors', 'above', 'motor'), True)	(('motor', 'above', 'monitors'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('transmission', 'below', 'controls'), True)	(('controls', 'below', 'transmission'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('transmission', 'below', 'monitors'), True)	(('monitors', 'below', 'transmission'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'below', 'controls'), True)	(('controls', 'below', 'motor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'below', 'monitors'), True)	(('monitors', 'below', 'motor'), False)
Round 4 ...
washing machine worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('power supply', 'behind', 'water pump'), True)	(('water pump', 'behind', 'power supply'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power supply', 'behind', 'water pump'), True)	(('water pump', 'in front of', 'power supply'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('water pump', 'behind', 'transmission'), True)	(('transmission', 'behind', 'water pump'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water pump', 'behind', 'transmission'), True)	(('transmission', 'in front of', 'water pump'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('transmission', 'behind', 'motor'), True)	(('motor', 'behind', 'transmission'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transmission', 'behind', 'motor'), True)	(('motor', 'in front of', 'transmission'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('transmission', 'above', 'levelling feet'), True)	(('levelling feet', 'above', 'transmission'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transmission', 'above', 'levelling feet'), True)	(('levelling feet', 'below', 'transmission'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('agitator', 'above', 'transmission'), True)	(('transmission', 'above', 'agitator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('agitator', 'above', 'transmission'), True)	(('transmission', 'below', 'agitator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('agitator', 'surrounds', 'drum'), True)	(('drum', 'surrounds', 'agitator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('agitator', 'surrounds', 'drum'), True)	(('drum', 'surrounded by', 'agitator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('controls', 'above', 'lid'), True)	(('lid', 'above', 'controls'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('controls', 'above', 'lid'), True)	(('lid', 'below', 'controls'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'drum'), True)	(('drum', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'drum'), True)	(('drum', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('power supply', 'behind', 'water pump')('water pump', 'behind', 'transmission')	(('power supply', 'behind', 'transmission'), True)
Constraint 4 (True antecedent)	('water pump', 'behind', 'transmission')('transmission', 'behind', 'motor')	(('water pump', 'behind', 'motor'), True)
Constraint 4 (True antecedent)	('agitator', 'above', 'transmission')('transmission', 'above', 'levelling feet')	(('agitator', 'above', 'levelling feet'), True)
Constraint 4 (True antecedent)	('controls', 'above', 'lid')('lid', 'above', 'drum')	(('controls', 'above', 'drum'), True)
Constraint 4 (True antecedent)	('transmission', 'in front of', 'water pump')('water pump', 'in front of', 'power supply')	(('transmission', 'in front of', 'power supply'), True)
Constraint 4 (True antecedent)	('motor', 'in front of', 'transmission')('transmission', 'in front of', 'water pump')	(('motor', 'in front of', 'water pump'), True)
Constraint 4 (True antecedent)	('levelling feet', 'below', 'transmission')('transmission', 'below', 'agitator')	(('levelling feet', 'below', 'agitator'), True)
Constraint 4 (True antecedent)	('drum', 'below', 'lid')('lid', 'below', 'controls')	(('drum', 'below', 'controls'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('water pump', 'behind', 'power supply'), False)	(('power supply', 'in front of', 'water pump'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transmission', 'behind', 'water pump'), False)	(('water pump', 'in front of', 'transmission'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('motor', 'behind', 'transmission'), False)	(('transmission', 'in front of', 'motor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('levelling feet', 'above', 'transmission'), False)	(('transmission', 'below', 'levelling feet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('transmission', 'above', 'agitator'), False)	(('agitator', 'below', 'transmission'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'surrounds', 'agitator'), False)	(('agitator', 'surrounded by', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'controls'), False)	(('controls', 'below', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'above', 'lid'), False)	(('lid', 'below', 'drum'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('power supply', 'behind', 'transmission'), True)	(('transmission', 'behind', 'power supply'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('water pump', 'behind', 'motor'), True)	(('motor', 'behind', 'water pump'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('agitator', 'above', 'levelling feet'), True)	(('levelling feet', 'above', 'agitator'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('controls', 'above', 'drum'), True)	(('drum', 'above', 'controls'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('transmission', 'in front of', 'power supply'), True)	(('power supply', 'in front of', 'transmission'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'in front of', 'water pump'), True)	(('water pump', 'in front of', 'motor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('levelling feet', 'below', 'agitator'), True)	(('agitator', 'below', 'levelling feet'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drum', 'below', 'controls'), True)	(('controls', 'below', 'drum'), False)
Constraint 4 (True antecedent)	('power supply', 'behind', 'water pump')('water pump', 'behind', 'motor')	(('power supply', 'behind', 'motor'), True)
Constraint 4 (True antecedent)	('motor', 'in front of', 'transmission')('transmission', 'in front of', 'power supply')	(('motor', 'in front of', 'power supply'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('power supply', 'behind', 'motor'), True)	(('motor', 'behind', 'power supply'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'in front of', 'power supply'), True)	(('power supply', 'in front of', 'motor'), False)
Round 4 ...
wheelchair worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('push handle', 'above', 'backseat'), True)	(('backseat', 'above', 'push handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('push handle', 'above', 'backseat'), True)	(('backseat', 'below', 'push handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('backseat', 'behind', 'seat'), True)	(('seat', 'behind', 'backseat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('backseat', 'behind', 'seat'), True)	(('seat', 'in front of', 'backseat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fork', 'above', 'frame'), True)	(('frame', 'above', 'fork'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fork', 'above', 'frame'), True)	(('frame', 'below', 'fork'), True)
Constraint 1: x rln y <-> y rln x	(('backseat', 'connects', 'seat'), True)	(('seat', 'connects', 'backseat'), True)
Constraint 1: x rln y <-> y rln x	(('backseat', 'connects', 'frame'), True)	(('frame', 'connects', 'backseat'), True)
Constraint 1: x rln y <-> y rln x	(('fork', 'connects', 'frame'), True)	(('frame', 'connects', 'fork'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'connects', 'frame'), True)	(('frame', 'connects', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'seat'), True)	(('seat', 'above', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'seat'), True)	(('seat', 'below', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('push handle', 'connects', 'frame'), True)	(('frame', 'connects', 'push handle'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'armrest'), True)	(('armrest', 'connects', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('armrest', 'above', 'wheel'), True)	(('wheel', 'above', 'armrest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('armrest', 'above', 'wheel'), True)	(('wheel', 'below', 'armrest'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'wheel'), True)	(('wheel', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('wheels', 'next to', 'frame'), True)	(('frame', 'next to', 'wheels'), True)
Constraint 1: x rln y <-> y rln x	(('brake', 'next to', 'wheel'), True)	(('wheel', 'next to', 'brake'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'footrest'), True)	(('footrest', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('footrest', 'connects', 'footplate'), True)	(('footplate', 'connects', 'footrest'), True)
Constraint 1: x rln y <-> y rln x	(('footrest', 'connects', 'heel loop'), True)	(('heel loop', 'connects', 'footrest'), True)
Constraint 1: x rln y <-> y rln x	(('heel loop', 'connects', 'footplate'), True)	(('footplate', 'connects', 'heel loop'), True)
Constraint 1: x rln y <-> y rln x	(('caster wheel', 'connects', 'fork'), True)	(('fork', 'connects', 'caster wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fork', 'above', 'caster wheel'), True)	(('caster wheel', 'above', 'fork'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fork', 'above', 'caster wheel'), True)	(('caster wheel', 'below', 'fork'), True)
Constraint 4 (True antecedent)	('fork', 'above', 'frame')('frame', 'above', 'seat')	(('fork', 'above', 'seat'), True)
Constraint 4 (True antecedent)	('seat', 'below', 'frame')('frame', 'below', 'fork')	(('seat', 'below', 'fork'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('backseat', 'above', 'push handle'), False)	(('push handle', 'below', 'backseat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'behind', 'backseat'), False)	(('backseat', 'in front of', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'fork'), False)	(('fork', 'below', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'frame'), False)	(('frame', 'below', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheel', 'above', 'armrest'), False)	(('armrest', 'below', 'wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('caster wheel', 'above', 'fork'), False)	(('fork', 'below', 'caster wheel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fork', 'above', 'seat'), True)	(('seat', 'above', 'fork'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'below', 'fork'), True)	(('fork', 'below', 'seat'), False)
Round 3 ...
wheelchair worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('push handle', 'above', 'backseat'), True)	(('backseat', 'above', 'push handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('push handle', 'above', 'backseat'), True)	(('backseat', 'below', 'push handle'), True)
Constraint 1: x rln y <-> y rln x	(('backseat', 'connects', 'frame'), True)	(('frame', 'connects', 'backseat'), True)
Constraint 1: x rln y <-> y rln x	(('push handle', 'connects', 'frame'), True)	(('frame', 'connects', 'push handle'), True)
Constraint 1: x rln y <-> y rln x	(('backseat', 'connects', 'seat'), True)	(('seat', 'connects', 'backseat'), True)
Constraint 1: x rln y <-> y rln x	(('armrest', 'connects', 'frame'), True)	(('frame', 'connects', 'armrest'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('armrest', 'above', 'seat'), True)	(('seat', 'above', 'armrest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('armrest', 'above', 'seat'), True)	(('seat', 'below', 'armrest'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'wheels'), True)	(('wheels', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'wheels'), True)	(('wheels', 'below', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'requires', 'brake'), True)	(('brake', 'requires', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'requires', 'brake'), True)	(('brake', 'required by', 'wheels'), True)
Constraint 1: x rln y <-> y rln x	(('wheels', 'next to', 'brake'), True)	(('brake', 'next to', 'wheels'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'footplate'), True)	(('footplate', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'footplate'), True)	(('footplate', 'below', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('footplate', 'part of', 'footrest'), True)	(('footrest', 'part of', 'footplate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('footplate', 'part of', 'footrest'), True)	(('footrest', 'has part', 'footplate'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'footrest'), True)	(('footrest', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'footrest'), True)	(('footrest', 'below', 'seat'), True)
Constraint 4 (True antecedent)	('armrest', 'above', 'seat')('seat', 'above', 'wheels')	(('armrest', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('armrest', 'above', 'seat')('seat', 'above', 'footplate')	(('armrest', 'above', 'footplate'), True)
Constraint 4 (True antecedent)	('armrest', 'above', 'seat')('seat', 'above', 'footrest')	(('armrest', 'above', 'footrest'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'seat')('seat', 'below', 'armrest')	(('wheels', 'below', 'armrest'), True)
Constraint 4 (True antecedent)	('footplate', 'below', 'seat')('seat', 'below', 'armrest')	(('footplate', 'below', 'armrest'), True)
Constraint 4 (True antecedent)	('footrest', 'below', 'seat')('seat', 'below', 'armrest')	(('footrest', 'below', 'armrest'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('backseat', 'above', 'push handle'), False)	(('push handle', 'below', 'backseat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'armrest'), False)	(('armrest', 'below', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'seat'), False)	(('seat', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('brake', 'requires', 'wheels'), False)	(('wheels', 'required by', 'brake'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('footplate', 'above', 'seat'), False)	(('seat', 'below', 'footplate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('footrest', 'part of', 'footplate'), False)	(('footplate', 'has part', 'footrest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('footrest', 'above', 'seat'), False)	(('seat', 'below', 'footrest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('armrest', 'above', 'wheels'), True)	(('wheels', 'above', 'armrest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('armrest', 'above', 'footplate'), True)	(('footplate', 'above', 'armrest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('armrest', 'above', 'footrest'), True)	(('footrest', 'above', 'armrest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'armrest'), True)	(('armrest', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('footplate', 'below', 'armrest'), True)	(('armrest', 'below', 'footplate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('footrest', 'below', 'armrest'), True)	(('armrest', 'below', 'footrest'), False)
Round 3 ...
wheelchair worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('backseat', 'connects', 'seat'), True)	(('seat', 'connects', 'backseat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('backseat', 'above', 'seat'), True)	(('seat', 'above', 'backseat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('backseat', 'above', 'seat'), True)	(('seat', 'below', 'backseat'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'connects', 'footrest'), True)	(('footrest', 'connects', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'footrest'), True)	(('footrest', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'footrest'), True)	(('footrest', 'below', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('footrest', 'connects', 'footplate'), True)	(('footplate', 'connects', 'footrest'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('footrest', 'above', 'footplate'), True)	(('footplate', 'above', 'footrest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('footrest', 'above', 'footplate'), True)	(('footplate', 'below', 'footrest'), True)
Constraint 1: x rln y <-> y rln x	(('footrest', 'connects', 'frame'), True)	(('frame', 'connects', 'footrest'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'wheels'), True)	(('wheels', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('wheels', 'connects', 'brake'), True)	(('brake', 'connects', 'wheels'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'connects', 'frame'), True)	(('frame', 'connects', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'connects', 'armrest'), True)	(('armrest', 'connects', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('armrest', 'connects', 'frame'), True)	(('frame', 'connects', 'armrest'), True)
Constraint 1: x rln y <-> y rln x	(('backseat', 'connects', 'armrest'), True)	(('armrest', 'connects', 'backseat'), True)
Constraint 1: x rln y <-> y rln x	(('backseat', 'connects', 'frame'), True)	(('frame', 'connects', 'backseat'), True)
Constraint 1: x rln y <-> y rln x	(('pull handle', 'connects', 'frame'), True)	(('frame', 'connects', 'pull handle'), True)
Constraint 4 (True antecedent)	('backseat', 'above', 'seat')('seat', 'above', 'footrest')	(('backseat', 'above', 'footrest'), True)
Constraint 4 (True antecedent)	('seat', 'above', 'footrest')('footrest', 'above', 'footplate')	(('seat', 'above', 'footplate'), True)
Constraint 4 (True antecedent)	('footrest', 'below', 'seat')('seat', 'below', 'backseat')	(('footrest', 'below', 'backseat'), True)
Constraint 4 (True antecedent)	('footplate', 'below', 'footrest')('footrest', 'below', 'seat')	(('footplate', 'below', 'seat'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'backseat'), False)	(('backseat', 'below', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('footrest', 'above', 'seat'), False)	(('seat', 'below', 'footrest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('footplate', 'above', 'footrest'), False)	(('footrest', 'below', 'footplate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('backseat', 'above', 'footrest'), True)	(('footrest', 'above', 'backseat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'footplate'), True)	(('footplate', 'above', 'seat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('footrest', 'below', 'backseat'), True)	(('backseat', 'below', 'footrest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('footplate', 'below', 'seat'), True)	(('seat', 'below', 'footplate'), False)
Constraint 4 (True antecedent)	('backseat', 'above', 'seat')('seat', 'above', 'footplate')	(('backseat', 'above', 'footplate'), True)
Constraint 4 (True antecedent)	('footplate', 'below', 'footrest')('footrest', 'below', 'backseat')	(('footplate', 'below', 'backseat'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('backseat', 'above', 'footplate'), True)	(('footplate', 'above', 'backseat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('footplate', 'below', 'backseat'), True)	(('backseat', 'below', 'footplate'), False)
Round 4 ...
zipper worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tape end', 'part of', 'tape'), True)	(('tape', 'part of', 'tape end'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tape end', 'part of', 'tape'), True)	(('tape', 'has part', 'tape end'), True)
Constraint 1: x rln y <-> y rln x	(('tape', 'connects', 'top stop'), True)	(('top stop', 'connects', 'tape'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top stop', 'above', 'chain'), True)	(('chain', 'above', 'top stop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top stop', 'above', 'chain'), True)	(('chain', 'below', 'top stop'), True)
Constraint 1: x rln y <-> y rln x	(('tape', 'connects', 'chain'), True)	(('chain', 'connects', 'tape'), True)
Constraint 1: x rln y <-> y rln x	(('pull tab', 'next to', 'slider'), True)	(('slider', 'next to', 'pull tab'), True)
Constraint 1: x rln y <-> y rln x	(('pull tab', 'connects', 'slider'), True)	(('slider', 'connects', 'pull tab'), True)
Constraint 1: x rln y <-> y rln x	(('slider', 'connects', 'chain'), True)	(('chain', 'connects', 'slider'), True)
Constraint 1: x rln y <-> y rln x	(('slider', 'next to', 'chain'), True)	(('chain', 'next to', 'slider'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('teeth', 'part of', 'chain'), True)	(('chain', 'part of', 'teeth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('teeth', 'part of', 'chain'), True)	(('chain', 'has part', 'teeth'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('tape', 'part of', 'tape end'), False)	(('tape end', 'has part', 'tape'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chain', 'above', 'top stop'), False)	(('top stop', 'below', 'chain'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chain', 'part of', 'teeth'), False)	(('teeth', 'has part', 'chain'), False)
Round 3 ...
zipper worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top stop', 'above', 'teeth'), True)	(('teeth', 'above', 'top stop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top stop', 'above', 'teeth'), True)	(('teeth', 'below', 'top stop'), True)
Constraint 1: x rln y <-> y rln x	(('top stop', 'connects', 'chain'), True)	(('chain', 'connects', 'top stop'), True)
Constraint 1: x rln y <-> y rln x	(('tape', 'connects', 'chain'), True)	(('chain', 'connects', 'tape'), True)
Constraint 1: x rln y <-> y rln x	(('teeth', 'connects', 'chain'), True)	(('chain', 'connects', 'teeth'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('teeth', 'above', 'bottom stop'), True)	(('bottom stop', 'above', 'teeth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('teeth', 'above', 'bottom stop'), True)	(('bottom stop', 'below', 'teeth'), True)
Constraint 1: x rln y <-> y rln x	(('chain', 'connects', 'bottom stop'), True)	(('bottom stop', 'connects', 'chain'), True)
Constraint 1: x rln y <-> y rln x	(('chain', 'connects', 'slider'), True)	(('slider', 'connects', 'chain'), True)
Constraint 1: x rln y <-> y rln x	(('slider', 'connects', 'pull tab'), True)	(('pull tab', 'connects', 'slider'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pull tab', 'above', 'bottom stop'), True)	(('bottom stop', 'above', 'pull tab'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pull tab', 'above', 'bottom stop'), True)	(('bottom stop', 'below', 'pull tab'), True)
Constraint 4 (True antecedent)	('top stop', 'above', 'teeth')('teeth', 'above', 'bottom stop')	(('top stop', 'above', 'bottom stop'), True)
Constraint 4 (True antecedent)	('bottom stop', 'below', 'teeth')('teeth', 'below', 'top stop')	(('bottom stop', 'below', 'top stop'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('teeth', 'above', 'top stop'), False)	(('top stop', 'below', 'teeth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom stop', 'above', 'teeth'), False)	(('teeth', 'below', 'bottom stop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom stop', 'above', 'pull tab'), False)	(('pull tab', 'below', 'bottom stop'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top stop', 'above', 'bottom stop'), True)	(('bottom stop', 'above', 'top stop'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottom stop', 'below', 'top stop'), True)	(('top stop', 'below', 'bottom stop'), False)
Round 3 ...
zipper worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top stop', 'above', 'teeth'), True)	(('teeth', 'above', 'top stop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top stop', 'above', 'teeth'), True)	(('teeth', 'below', 'top stop'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('teeth', 'behind', 'slider'), True)	(('slider', 'behind', 'teeth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('teeth', 'behind', 'slider'), True)	(('slider', 'in front of', 'teeth'), True)
Constraint 1: x rln y <-> y rln x	(('slider', 'connects', 'pull tab'), True)	(('pull tab', 'connects', 'slider'), True)
Constraint 1: x rln y <-> y rln x	(('teeth', 'connects', 'chain'), True)	(('chain', 'connects', 'teeth'), True)
Constraint 1: x rln y <-> y rln x	(('chain', 'next to', 'tape'), True)	(('tape', 'next to', 'chain'), True)
Constraint 1: x rln y <-> y rln x	(('tape', 'next to', 'teeth'), True)	(('teeth', 'next to', 'tape'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('chain', 'above', 'bottom stop'), True)	(('bottom stop', 'above', 'chain'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chain', 'above', 'bottom stop'), True)	(('bottom stop', 'below', 'chain'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('teeth', 'above', 'top stop'), False)	(('top stop', 'below', 'teeth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('slider', 'behind', 'teeth'), False)	(('teeth', 'in front of', 'slider'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom stop', 'above', 'chain'), False)	(('chain', 'below', 'bottom stop'), False)
Round 3 ...
apple worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('seeds', 'part of', 'core'), True)	(('core', 'part of', 'seeds'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seeds', 'part of', 'core'), True)	(('core', 'has part', 'seeds'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flesh', 'surrounds', 'core'), True)	(('core', 'surrounds', 'flesh'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flesh', 'surrounds', 'core'), True)	(('core', 'surrounded by', 'flesh'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('skin', 'surrounds', 'flesh'), True)	(('flesh', 'surrounds', 'skin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skin', 'surrounds', 'flesh'), True)	(('flesh', 'surrounded by', 'skin'), True)
Constraint 1: x rln y <-> y rln x	(('stem', 'connects', 'skin'), True)	(('skin', 'connects', 'stem'), True)
Constraint 1: x rln y <-> y rln x	(('stem', 'connects', 'leaf'), True)	(('leaf', 'connects', 'stem'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leaf', 'above', 'stem'), True)	(('stem', 'above', 'leaf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaf', 'above', 'stem'), True)	(('stem', 'below', 'leaf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stem', 'above', 'skin'), True)	(('skin', 'above', 'stem'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stem', 'above', 'skin'), True)	(('skin', 'below', 'stem'), True)
Constraint 4 (True antecedent)	('skin', 'surrounds', 'flesh')('flesh', 'surrounds', 'core')	(('skin', 'surrounds', 'core'), True)
Constraint 4 (True antecedent)	('leaf', 'above', 'stem')('stem', 'above', 'skin')	(('leaf', 'above', 'skin'), True)
Constraint 4 (True antecedent)	('core', 'surrounded by', 'flesh')('flesh', 'surrounded by', 'skin')	(('core', 'surrounded by', 'skin'), True)
Constraint 4 (True antecedent)	('skin', 'below', 'stem')('stem', 'below', 'leaf')	(('skin', 'below', 'leaf'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('core', 'part of', 'seeds'), False)	(('seeds', 'has part', 'core'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('core', 'surrounds', 'flesh'), False)	(('flesh', 'surrounded by', 'core'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flesh', 'surrounds', 'skin'), False)	(('skin', 'surrounded by', 'flesh'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stem', 'above', 'leaf'), False)	(('leaf', 'below', 'stem'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skin', 'above', 'stem'), False)	(('stem', 'below', 'skin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('skin', 'surrounds', 'core'), True)	(('core', 'surrounds', 'skin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leaf', 'above', 'skin'), True)	(('skin', 'above', 'leaf'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('core', 'surrounded by', 'skin'), True)	(('skin', 'surrounded by', 'core'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('skin', 'below', 'leaf'), True)	(('leaf', 'below', 'skin'), False)
Round 3 ...
apple worker_108...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('seeds', 'inside', 'core'), True)	(('core', 'inside', 'seeds'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seeds', 'inside', 'core'), True)	(('core', 'contains', 'seeds'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('core', 'part of', 'seeds'), True)	(('seeds', 'part of', 'core'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('core', 'part of', 'seeds'), True)	(('seeds', 'has part', 'core'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('core', 'surrounds', 'flesh'), True)	(('flesh', 'surrounds', 'core'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('core', 'surrounds', 'flesh'), True)	(('flesh', 'surrounded by', 'core'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flesh', 'requires', 'skin'), True)	(('skin', 'requires', 'flesh'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flesh', 'requires', 'skin'), True)	(('skin', 'required by', 'flesh'), True)
Constraint 1: x rln y <-> y rln x	(('skin', 'connects', 'stem'), True)	(('stem', 'connects', 'skin'), True)
Constraint 1: x rln y <-> y rln x	(('stem', 'next to', 'leaf'), True)	(('leaf', 'next to', 'stem'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('core', 'inside', 'seeds'), False)	(('seeds', 'contains', 'core'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seeds', 'part of', 'core'), False)	(('core', 'has part', 'seeds'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flesh', 'surrounds', 'core'), False)	(('core', 'surrounded by', 'flesh'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skin', 'requires', 'flesh'), False)	(('flesh', 'required by', 'skin'), False)
Round 3 ...
apple worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('seeds', 'inside', 'core'), True)	(('core', 'inside', 'seeds'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seeds', 'inside', 'core'), True)	(('core', 'contains', 'seeds'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('core', 'inside', 'flesh'), True)	(('flesh', 'inside', 'core'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('core', 'inside', 'flesh'), True)	(('flesh', 'contains', 'core'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('skin', 'surrounds', 'flesh'), True)	(('flesh', 'surrounds', 'skin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skin', 'surrounds', 'flesh'), True)	(('flesh', 'surrounded by', 'skin'), True)
Constraint 1: x rln y <-> y rln x	(('skin', 'connects', 'stem'), True)	(('stem', 'connects', 'skin'), True)
Constraint 1: x rln y <-> y rln x	(('stem', 'connects', 'leaf'), True)	(('leaf', 'connects', 'stem'), True)
Constraint 4 (True antecedent)	('seeds', 'inside', 'core')('core', 'inside', 'flesh')	(('seeds', 'inside', 'flesh'), True)
Constraint 4 (True antecedent)	('flesh', 'contains', 'core')('core', 'contains', 'seeds')	(('flesh', 'contains', 'seeds'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('core', 'inside', 'seeds'), False)	(('seeds', 'contains', 'core'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flesh', 'inside', 'core'), False)	(('core', 'contains', 'flesh'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flesh', 'surrounds', 'skin'), False)	(('skin', 'surrounded by', 'flesh'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('seeds', 'inside', 'flesh'), True)	(('flesh', 'inside', 'seeds'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flesh', 'contains', 'seeds'), True)	(('seeds', 'contains', 'flesh'), False)
Round 3 ...
barbeque grill worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('grease tray', 'behind', 'heat plates'), True)	(('heat plates', 'behind', 'grease tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('grease tray', 'behind', 'heat plates'), True)	(('heat plates', 'in front of', 'grease tray'), True)
Constraint 1: x rln y <-> y rln x	(('burner', 'next to', 'heat plates'), True)	(('heat plates', 'next to', 'burner'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heat plates', 'above', 'carryover tubes'), True)	(('carryover tubes', 'above', 'heat plates'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heat plates', 'above', 'carryover tubes'), True)	(('carryover tubes', 'below', 'heat plates'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control knobs', 'behind', 'heat plates'), True)	(('heat plates', 'behind', 'control knobs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control knobs', 'behind', 'heat plates'), True)	(('heat plates', 'in front of', 'control knobs'), True)
Constraint 1: x rln y <-> y rln x	(('heat plates', 'next to', 'cooking grate'), True)	(('cooking grate', 'next to', 'heat plates'), True)
Constraint 1: x rln y <-> y rln x	(('control knobs', 'next to', 'ignitor'), True)	(('ignitor', 'next to', 'control knobs'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('temperature gauge', 'above', 'warming rack'), True)	(('warming rack', 'above', 'temperature gauge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('temperature gauge', 'above', 'warming rack'), True)	(('warming rack', 'below', 'temperature gauge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('warming rack', 'above', 'cooking grate'), True)	(('cooking grate', 'above', 'warming rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warming rack', 'above', 'cooking grate'), True)	(('cooking grate', 'below', 'warming rack'), True)
Constraint 4 (True antecedent)	('temperature gauge', 'above', 'warming rack')('warming rack', 'above', 'cooking grate')	(('temperature gauge', 'above', 'cooking grate'), True)
Constraint 4 (True antecedent)	('cooking grate', 'below', 'warming rack')('warming rack', 'below', 'temperature gauge')	(('cooking grate', 'below', 'temperature gauge'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('heat plates', 'behind', 'grease tray'), False)	(('grease tray', 'in front of', 'heat plates'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carryover tubes', 'above', 'heat plates'), False)	(('heat plates', 'below', 'carryover tubes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heat plates', 'behind', 'control knobs'), False)	(('control knobs', 'in front of', 'heat plates'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warming rack', 'above', 'temperature gauge'), False)	(('temperature gauge', 'below', 'warming rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking grate', 'above', 'warming rack'), False)	(('warming rack', 'below', 'cooking grate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('temperature gauge', 'above', 'cooking grate'), True)	(('cooking grate', 'above', 'temperature gauge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking grate', 'below', 'temperature gauge'), True)	(('temperature gauge', 'below', 'cooking grate'), False)
Round 3 ...
barbeque grill worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('temperature gauge', 'above', 'warming rack'), True)	(('warming rack', 'above', 'temperature gauge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('temperature gauge', 'above', 'warming rack'), True)	(('warming rack', 'below', 'temperature gauge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('warming rack', 'above', 'cooking grate'), True)	(('cooking grate', 'above', 'warming rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warming rack', 'above', 'cooking grate'), True)	(('cooking grate', 'below', 'warming rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking grate', 'above', 'heat plates'), True)	(('heat plates', 'above', 'cooking grate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking grate', 'above', 'heat plates'), True)	(('heat plates', 'below', 'cooking grate'), True)
Constraint 1: x rln y <-> y rln x	(('heat plates', 'next to', 'burner'), True)	(('burner', 'next to', 'heat plates'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('burner', 'above', 'carryover tubes'), True)	(('carryover tubes', 'above', 'burner'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('burner', 'above', 'carryover tubes'), True)	(('carryover tubes', 'below', 'burner'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking grate', 'above', 'control knobs'), True)	(('control knobs', 'above', 'cooking grate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking grate', 'above', 'control knobs'), True)	(('control knobs', 'below', 'cooking grate'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking grate', 'above', 'ignitor'), True)	(('ignitor', 'above', 'cooking grate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking grate', 'above', 'ignitor'), True)	(('ignitor', 'below', 'cooking grate'), True)
Constraint 1: x rln y <-> y rln x	(('control knobs', 'next to', 'ignitor'), True)	(('ignitor', 'next to', 'control knobs'), True)
Constraint 4 (True antecedent)	('temperature gauge', 'above', 'warming rack')('warming rack', 'above', 'cooking grate')	(('temperature gauge', 'above', 'cooking grate'), True)
Constraint 4 (True antecedent)	('warming rack', 'above', 'cooking grate')('cooking grate', 'above', 'heat plates')	(('warming rack', 'above', 'heat plates'), True)
Constraint 4 (True antecedent)	('warming rack', 'above', 'cooking grate')('cooking grate', 'above', 'control knobs')	(('warming rack', 'above', 'control knobs'), True)
Constraint 4 (True antecedent)	('warming rack', 'above', 'cooking grate')('cooking grate', 'above', 'ignitor')	(('warming rack', 'above', 'ignitor'), True)
Constraint 4 (True antecedent)	('cooking grate', 'below', 'warming rack')('warming rack', 'below', 'temperature gauge')	(('cooking grate', 'below', 'temperature gauge'), True)
Constraint 4 (True antecedent)	('heat plates', 'below', 'cooking grate')('cooking grate', 'below', 'warming rack')	(('heat plates', 'below', 'warming rack'), True)
Constraint 4 (True antecedent)	('control knobs', 'below', 'cooking grate')('cooking grate', 'below', 'warming rack')	(('control knobs', 'below', 'warming rack'), True)
Constraint 4 (True antecedent)	('ignitor', 'below', 'cooking grate')('cooking grate', 'below', 'warming rack')	(('ignitor', 'below', 'warming rack'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('warming rack', 'above', 'temperature gauge'), False)	(('temperature gauge', 'below', 'warming rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking grate', 'above', 'warming rack'), False)	(('warming rack', 'below', 'cooking grate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heat plates', 'above', 'cooking grate'), False)	(('cooking grate', 'below', 'heat plates'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carryover tubes', 'above', 'burner'), False)	(('burner', 'below', 'carryover tubes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control knobs', 'above', 'cooking grate'), False)	(('cooking grate', 'below', 'control knobs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ignitor', 'above', 'cooking grate'), False)	(('cooking grate', 'below', 'ignitor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('temperature gauge', 'above', 'cooking grate'), True)	(('cooking grate', 'above', 'temperature gauge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming rack', 'above', 'heat plates'), True)	(('heat plates', 'above', 'warming rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming rack', 'above', 'control knobs'), True)	(('control knobs', 'above', 'warming rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming rack', 'above', 'ignitor'), True)	(('ignitor', 'above', 'warming rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking grate', 'below', 'temperature gauge'), True)	(('temperature gauge', 'below', 'cooking grate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heat plates', 'below', 'warming rack'), True)	(('warming rack', 'below', 'heat plates'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('control knobs', 'below', 'warming rack'), True)	(('warming rack', 'below', 'control knobs'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ignitor', 'below', 'warming rack'), True)	(('warming rack', 'below', 'ignitor'), False)
Constraint 4 (True antecedent)	('temperature gauge', 'above', 'warming rack')('warming rack', 'above', 'heat plates')	(('temperature gauge', 'above', 'heat plates'), True)
Constraint 4 (True antecedent)	('temperature gauge', 'above', 'warming rack')('warming rack', 'above', 'control knobs')	(('temperature gauge', 'above', 'control knobs'), True)
Constraint 4 (True antecedent)	('temperature gauge', 'above', 'warming rack')('warming rack', 'above', 'ignitor')	(('temperature gauge', 'above', 'ignitor'), True)
Constraint 4 (True antecedent)	('heat plates', 'below', 'cooking grate')('cooking grate', 'below', 'temperature gauge')	(('heat plates', 'below', 'temperature gauge'), True)
Constraint 4 (True antecedent)	('control knobs', 'below', 'cooking grate')('cooking grate', 'below', 'temperature gauge')	(('control knobs', 'below', 'temperature gauge'), True)
Constraint 4 (True antecedent)	('ignitor', 'below', 'cooking grate')('cooking grate', 'below', 'temperature gauge')	(('ignitor', 'below', 'temperature gauge'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('temperature gauge', 'above', 'heat plates'), True)	(('heat plates', 'above', 'temperature gauge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('temperature gauge', 'above', 'control knobs'), True)	(('control knobs', 'above', 'temperature gauge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('temperature gauge', 'above', 'ignitor'), True)	(('ignitor', 'above', 'temperature gauge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heat plates', 'below', 'temperature gauge'), True)	(('temperature gauge', 'below', 'heat plates'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('control knobs', 'below', 'temperature gauge'), True)	(('temperature gauge', 'below', 'control knobs'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ignitor', 'below', 'temperature gauge'), True)	(('temperature gauge', 'below', 'ignitor'), False)
Round 4 ...
barbeque grill worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('temperature gauge', 'above', 'warming rack'), True)	(('warming rack', 'above', 'temperature gauge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('temperature gauge', 'above', 'warming rack'), True)	(('warming rack', 'below', 'temperature gauge'), True)
Constraint 1: x rln y <-> y rln x	(('warming rack', 'next to', 'burner'), True)	(('burner', 'next to', 'warming rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('burner', 'above', 'carryover tubes'), True)	(('carryover tubes', 'above', 'burner'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('burner', 'above', 'carryover tubes'), True)	(('carryover tubes', 'below', 'burner'), True)
Constraint 1: x rln y <-> y rln x	(('carryover tubes', 'next to', 'control knobs'), True)	(('control knobs', 'next to', 'carryover tubes'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('warming rack', 'above', 'control knobs'), True)	(('control knobs', 'above', 'warming rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warming rack', 'above', 'control knobs'), True)	(('control knobs', 'below', 'warming rack'), True)
Constraint 1: x rln y <-> y rln x	(('control knobs', 'next to', 'ignitor'), True)	(('ignitor', 'next to', 'control knobs'), True)
Constraint 1: x rln y <-> y rln x	(('warming rack', 'next to', 'cooking grate'), True)	(('cooking grate', 'next to', 'warming rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking grate', 'above', 'ignitor'), True)	(('ignitor', 'above', 'cooking grate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking grate', 'above', 'ignitor'), True)	(('ignitor', 'below', 'cooking grate'), True)
Constraint 4 (True antecedent)	('temperature gauge', 'above', 'warming rack')('warming rack', 'above', 'control knobs')	(('temperature gauge', 'above', 'control knobs'), True)
Constraint 4 (True antecedent)	('control knobs', 'below', 'warming rack')('warming rack', 'below', 'temperature gauge')	(('control knobs', 'below', 'temperature gauge'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('warming rack', 'above', 'temperature gauge'), False)	(('temperature gauge', 'below', 'warming rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carryover tubes', 'above', 'burner'), False)	(('burner', 'below', 'carryover tubes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control knobs', 'above', 'warming rack'), False)	(('warming rack', 'below', 'control knobs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ignitor', 'above', 'cooking grate'), False)	(('cooking grate', 'below', 'ignitor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('temperature gauge', 'above', 'control knobs'), True)	(('control knobs', 'above', 'temperature gauge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('control knobs', 'below', 'temperature gauge'), True)	(('temperature gauge', 'below', 'control knobs'), False)
Round 3 ...
coffee maker worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'above', 'signal lamp'), True)	(('signal lamp', 'above', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'above', 'signal lamp'), True)	(('signal lamp', 'below', 'reservoir'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('water level', 'inside', 'reservoir'), True)	(('reservoir', 'inside', 'water level'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water level', 'inside', 'reservoir'), True)	(('reservoir', 'contains', 'water level'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('signal lamp', 'above', 'switch'), True)	(('switch', 'above', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'above', 'switch'), True)	(('switch', 'below', 'signal lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'behind', 'carafe'), True)	(('carafe', 'behind', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'behind', 'carafe'), True)	(('carafe', 'in front of', 'switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('signal lamp', 'behind', 'carafe'), True)	(('carafe', 'behind', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'behind', 'carafe'), True)	(('carafe', 'in front of', 'signal lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'behind', 'carafe'), True)	(('carafe', 'behind', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'behind', 'carafe'), True)	(('carafe', 'in front of', 'reservoir'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('carafe', 'above', 'warming plate'), True)	(('warming plate', 'above', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'above', 'warming plate'), True)	(('warming plate', 'below', 'carafe'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filter', 'inside', 'filter basket'), True)	(('filter basket', 'inside', 'filter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter', 'inside', 'filter basket'), True)	(('filter basket', 'contains', 'filter'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'filter basket'), True)	(('filter basket', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'filter basket'), True)	(('filter basket', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filter basket', 'above', 'carafe'), True)	(('carafe', 'above', 'filter basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter basket', 'above', 'carafe'), True)	(('carafe', 'below', 'filter basket'), True)
Constraint 4 (True antecedent)	('reservoir', 'above', 'signal lamp')('signal lamp', 'above', 'switch')	(('reservoir', 'above', 'switch'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'filter basket')('filter basket', 'above', 'carafe')	(('lid', 'above', 'carafe'), True)
Constraint 4 (True antecedent)	('filter basket', 'above', 'carafe')('carafe', 'above', 'warming plate')	(('filter basket', 'above', 'warming plate'), True)
Constraint 4 (True antecedent)	('switch', 'below', 'signal lamp')('signal lamp', 'below', 'reservoir')	(('switch', 'below', 'reservoir'), True)
Constraint 4 (True antecedent)	('warming plate', 'below', 'carafe')('carafe', 'below', 'filter basket')	(('warming plate', 'below', 'filter basket'), True)
Constraint 4 (True antecedent)	('carafe', 'below', 'filter basket')('filter basket', 'below', 'lid')	(('carafe', 'below', 'lid'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'above', 'reservoir'), False)	(('reservoir', 'below', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'inside', 'water level'), False)	(('water level', 'contains', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'above', 'signal lamp'), False)	(('signal lamp', 'below', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'behind', 'switch'), False)	(('switch', 'in front of', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'behind', 'signal lamp'), False)	(('signal lamp', 'in front of', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'behind', 'reservoir'), False)	(('reservoir', 'in front of', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warming plate', 'above', 'carafe'), False)	(('carafe', 'below', 'warming plate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter basket', 'inside', 'filter'), False)	(('filter', 'contains', 'filter basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter basket', 'above', 'lid'), False)	(('lid', 'below', 'filter basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'above', 'filter basket'), False)	(('filter basket', 'below', 'carafe'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'above', 'switch'), True)	(('switch', 'above', 'reservoir'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'carafe'), True)	(('carafe', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('filter basket', 'above', 'warming plate'), True)	(('warming plate', 'above', 'filter basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'below', 'reservoir'), True)	(('reservoir', 'below', 'switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming plate', 'below', 'filter basket'), True)	(('filter basket', 'below', 'warming plate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('carafe', 'below', 'lid'), True)	(('lid', 'below', 'carafe'), False)
Constraint 4 (True antecedent)	('lid', 'above', 'filter basket')('filter basket', 'above', 'warming plate')	(('lid', 'above', 'warming plate'), True)
Constraint 4 (True antecedent)	('warming plate', 'below', 'carafe')('carafe', 'below', 'lid')	(('warming plate', 'below', 'lid'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'warming plate'), True)	(('warming plate', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming plate', 'below', 'lid'), True)	(('lid', 'below', 'warming plate'), False)
Round 4 ...
coffee maker worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'filter'), True)	(('filter', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'filter'), True)	(('filter', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'reservoir'), True)	(('reservoir', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'reservoir'), True)	(('reservoir', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'above', 'signal lamp'), True)	(('signal lamp', 'above', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'above', 'signal lamp'), True)	(('signal lamp', 'below', 'reservoir'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('signal lamp', 'behind', 'carafe'), True)	(('carafe', 'behind', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'behind', 'carafe'), True)	(('carafe', 'in front of', 'signal lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('signal lamp', 'above', 'switch'), True)	(('switch', 'above', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'above', 'switch'), True)	(('switch', 'below', 'signal lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'behind', 'carafe'), True)	(('carafe', 'behind', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'behind', 'carafe'), True)	(('carafe', 'in front of', 'switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('carafe', 'above', 'warming plate'), True)	(('warming plate', 'above', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'above', 'warming plate'), True)	(('warming plate', 'below', 'carafe'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'behind', 'carafe'), True)	(('carafe', 'behind', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'behind', 'carafe'), True)	(('carafe', 'in front of', 'reservoir'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'behind', 'filter basket'), True)	(('filter basket', 'behind', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'behind', 'filter basket'), True)	(('filter basket', 'in front of', 'reservoir'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'behind', 'filter'), True)	(('filter', 'behind', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'behind', 'filter'), True)	(('filter', 'in front of', 'reservoir'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filter', 'above', 'filter basket'), True)	(('filter basket', 'above', 'filter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter', 'above', 'filter basket'), True)	(('filter basket', 'below', 'filter'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filter basket', 'above', 'carafe'), True)	(('carafe', 'above', 'filter basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter basket', 'above', 'carafe'), True)	(('carafe', 'below', 'filter basket'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'filter')('filter', 'above', 'filter basket')	(('lid', 'above', 'filter basket'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'reservoir')('reservoir', 'above', 'signal lamp')	(('lid', 'above', 'signal lamp'), True)
Constraint 4 (True antecedent)	('reservoir', 'above', 'signal lamp')('signal lamp', 'above', 'switch')	(('reservoir', 'above', 'switch'), True)
Constraint 4 (True antecedent)	('filter', 'above', 'filter basket')('filter basket', 'above', 'carafe')	(('filter', 'above', 'carafe'), True)
Constraint 4 (True antecedent)	('filter basket', 'above', 'carafe')('carafe', 'above', 'warming plate')	(('filter basket', 'above', 'warming plate'), True)
Constraint 4 (True antecedent)	('signal lamp', 'below', 'reservoir')('reservoir', 'below', 'lid')	(('signal lamp', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('switch', 'below', 'signal lamp')('signal lamp', 'below', 'reservoir')	(('switch', 'below', 'reservoir'), True)
Constraint 4 (True antecedent)	('warming plate', 'below', 'carafe')('carafe', 'below', 'filter basket')	(('warming plate', 'below', 'filter basket'), True)
Constraint 4 (True antecedent)	('filter basket', 'below', 'filter')('filter', 'below', 'lid')	(('filter basket', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('carafe', 'below', 'filter basket')('filter basket', 'below', 'filter')	(('carafe', 'below', 'filter'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('filter', 'above', 'lid'), False)	(('lid', 'below', 'filter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'above', 'lid'), False)	(('lid', 'below', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'above', 'reservoir'), False)	(('reservoir', 'below', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'behind', 'signal lamp'), False)	(('signal lamp', 'in front of', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'above', 'signal lamp'), False)	(('signal lamp', 'below', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'behind', 'switch'), False)	(('switch', 'in front of', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warming plate', 'above', 'carafe'), False)	(('carafe', 'below', 'warming plate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'behind', 'reservoir'), False)	(('reservoir', 'in front of', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter basket', 'behind', 'reservoir'), False)	(('reservoir', 'in front of', 'filter basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter', 'behind', 'reservoir'), False)	(('reservoir', 'in front of', 'filter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter basket', 'above', 'filter'), False)	(('filter', 'below', 'filter basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'above', 'filter basket'), False)	(('filter basket', 'below', 'carafe'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'filter basket'), True)	(('filter basket', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'signal lamp'), True)	(('signal lamp', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'above', 'switch'), True)	(('switch', 'above', 'reservoir'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('filter', 'above', 'carafe'), True)	(('carafe', 'above', 'filter'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('filter basket', 'above', 'warming plate'), True)	(('warming plate', 'above', 'filter basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('signal lamp', 'below', 'lid'), True)	(('lid', 'below', 'signal lamp'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'below', 'reservoir'), True)	(('reservoir', 'below', 'switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming plate', 'below', 'filter basket'), True)	(('filter basket', 'below', 'warming plate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('filter basket', 'below', 'lid'), True)	(('lid', 'below', 'filter basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('carafe', 'below', 'filter'), True)	(('filter', 'below', 'carafe'), False)
Constraint 4 (True antecedent)	('lid', 'above', 'filter')('filter', 'above', 'carafe')	(('lid', 'above', 'carafe'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'reservoir')('reservoir', 'above', 'switch')	(('lid', 'above', 'switch'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'filter basket')('filter basket', 'above', 'warming plate')	(('lid', 'above', 'warming plate'), True)
Constraint 4 (True antecedent)	('filter', 'above', 'filter basket')('filter basket', 'above', 'warming plate')	(('filter', 'above', 'warming plate'), True)
Constraint 4 (True antecedent)	('switch', 'below', 'signal lamp')('signal lamp', 'below', 'lid')	(('switch', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('warming plate', 'below', 'carafe')('carafe', 'below', 'filter')	(('warming plate', 'below', 'filter'), True)
Constraint 4 (True antecedent)	('warming plate', 'below', 'filter basket')('filter basket', 'below', 'lid')	(('warming plate', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('carafe', 'below', 'filter basket')('filter basket', 'below', 'lid')	(('carafe', 'below', 'lid'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'carafe'), True)	(('carafe', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'switch'), True)	(('switch', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'warming plate'), True)	(('warming plate', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('filter', 'above', 'warming plate'), True)	(('warming plate', 'above', 'filter'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'below', 'lid'), True)	(('lid', 'below', 'switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming plate', 'below', 'filter'), True)	(('filter', 'below', 'warming plate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming plate', 'below', 'lid'), True)	(('lid', 'below', 'warming plate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('carafe', 'below', 'lid'), True)	(('lid', 'below', 'carafe'), False)
Round 4 ...
coffee maker worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'filter basket'), True)	(('filter basket', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'filter basket'), True)	(('filter basket', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'reservoir'), True)	(('reservoir', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'reservoir'), True)	(('reservoir', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'above', 'signal lamp'), True)	(('signal lamp', 'above', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'above', 'signal lamp'), True)	(('signal lamp', 'below', 'reservoir'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('signal lamp', 'above', 'switch'), True)	(('switch', 'above', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'above', 'switch'), True)	(('switch', 'below', 'signal lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filter basket', 'above', 'carafe'), True)	(('carafe', 'above', 'filter basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filter basket', 'above', 'carafe'), True)	(('carafe', 'below', 'filter basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('carafe', 'above', 'warming plate'), True)	(('warming plate', 'above', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'above', 'warming plate'), True)	(('warming plate', 'below', 'carafe'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'filter basket')('filter basket', 'above', 'carafe')	(('lid', 'above', 'carafe'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'reservoir')('reservoir', 'above', 'signal lamp')	(('lid', 'above', 'signal lamp'), True)
Constraint 4 (True antecedent)	('reservoir', 'above', 'signal lamp')('signal lamp', 'above', 'switch')	(('reservoir', 'above', 'switch'), True)
Constraint 4 (True antecedent)	('filter basket', 'above', 'carafe')('carafe', 'above', 'warming plate')	(('filter basket', 'above', 'warming plate'), True)
Constraint 4 (True antecedent)	('signal lamp', 'below', 'reservoir')('reservoir', 'below', 'lid')	(('signal lamp', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('switch', 'below', 'signal lamp')('signal lamp', 'below', 'reservoir')	(('switch', 'below', 'reservoir'), True)
Constraint 4 (True antecedent)	('carafe', 'below', 'filter basket')('filter basket', 'below', 'lid')	(('carafe', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('warming plate', 'below', 'carafe')('carafe', 'below', 'filter basket')	(('warming plate', 'below', 'filter basket'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('filter basket', 'above', 'lid'), False)	(('lid', 'below', 'filter basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reservoir', 'above', 'lid'), False)	(('lid', 'below', 'reservoir'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'above', 'reservoir'), False)	(('reservoir', 'below', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'above', 'signal lamp'), False)	(('signal lamp', 'below', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carafe', 'above', 'filter basket'), False)	(('filter basket', 'below', 'carafe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warming plate', 'above', 'carafe'), False)	(('carafe', 'below', 'warming plate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'carafe'), True)	(('carafe', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'signal lamp'), True)	(('signal lamp', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('reservoir', 'above', 'switch'), True)	(('switch', 'above', 'reservoir'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('filter basket', 'above', 'warming plate'), True)	(('warming plate', 'above', 'filter basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('signal lamp', 'below', 'lid'), True)	(('lid', 'below', 'signal lamp'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'below', 'reservoir'), True)	(('reservoir', 'below', 'switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('carafe', 'below', 'lid'), True)	(('lid', 'below', 'carafe'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming plate', 'below', 'filter basket'), True)	(('filter basket', 'below', 'warming plate'), False)
Constraint 4 (True antecedent)	('lid', 'above', 'filter basket')('filter basket', 'above', 'warming plate')	(('lid', 'above', 'warming plate'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'reservoir')('reservoir', 'above', 'switch')	(('lid', 'above', 'switch'), True)
Constraint 4 (True antecedent)	('switch', 'below', 'signal lamp')('signal lamp', 'below', 'lid')	(('switch', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('warming plate', 'below', 'carafe')('carafe', 'below', 'lid')	(('warming plate', 'below', 'lid'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'warming plate'), True)	(('warming plate', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'switch'), True)	(('switch', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'below', 'lid'), True)	(('lid', 'below', 'switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('warming plate', 'below', 'lid'), True)	(('lid', 'below', 'warming plate'), False)
Round 4 ...
digital clinical thermometer worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('display window', 'next to', 'on/off button'), True)	(('on/off button', 'next to', 'display window'), True)
Constraint 1: x rln y <-> y rln x	(('on/off button', 'next to', 'sensor'), True)	(('sensor', 'next to', 'on/off button'), True)
Constraint 1: x rln y <-> y rln x	(('sensor', 'connects', 'body'), True)	(('body', 'connects', 'sensor'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'battery cover'), True)	(('battery cover', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'display window'), True)	(('display window', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'on/off button'), True)	(('on/off button', 'connects', 'body'), True)
Round 2 ...
digital clinical thermometer worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('sensor', 'next to', 'display window'), True)	(('display window', 'next to', 'sensor'), True)
Constraint 1: x rln y <-> y rln x	(('display window', 'next to', 'on/off button'), True)	(('on/off button', 'next to', 'display window'), True)
Constraint 1: x rln y <-> y rln x	(('on/off button', 'next to', 'battery cover'), True)	(('battery cover', 'next to', 'on/off button'), True)
Round 2 ...
digital clinical thermometer worker_104...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('sensor', 'connects', 'display window'), True)	(('display window', 'connects', 'sensor'), True)
Constraint 1: x rln y <-> y rln x	(('display window', 'next to', 'on/off button'), True)	(('on/off button', 'next to', 'display window'), True)
Constraint 1: x rln y <-> y rln x	(('on/off button', 'next to', 'battery cover'), True)	(('battery cover', 'next to', 'on/off button'), True)
Constraint 1: x rln y <-> y rln x	(('battery cover', 'connects', 'bottom/back'), True)	(('bottom/back', 'connects', 'battery cover'), True)
Round 2 ...
dishwasher worker_105...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('control pad', 'above', 'door latch'), True)	(('door latch', 'above', 'control pad'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control pad', 'above', 'door latch'), True)	(('door latch', 'below', 'control pad'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door latch', 'above', 'dergent dispenser'), True)	(('dergent dispenser', 'above', 'door latch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door latch', 'above', 'dergent dispenser'), True)	(('dergent dispenser', 'below', 'door latch'), True)
Constraint 1: x rln y <-> y rln x	(('door latch', 'connects', 'door'), True)	(('door', 'connects', 'door latch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('upper rack', 'behind', 'door'), True)	(('door', 'behind', 'upper rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('upper rack', 'behind', 'door'), True)	(('door', 'in front of', 'upper rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'behind', 'door'), True)	(('door', 'behind', 'spray arms'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spray arms', 'behind', 'door'), True)	(('door', 'in front of', 'spray arms'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lower rack', 'behind', 'door'), True)	(('door', 'behind', 'lower rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lower rack', 'behind', 'door'), True)	(('door', 'in front of', 'lower rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('upper rack', 'above', 'spray arms'), True)	(('spray arms', 'above', 'upper rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('upper rack', 'above', 'spray arms'), True)	(('spray arms', 'below', 'upper rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'lower rack'), True)	(('lower rack', 'above', 'spray arms'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spray arms', 'above', 'lower rack'), True)	(('lower rack', 'below', 'spray arms'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lower rack', 'above', 'heating element'), True)	(('heating element', 'above', 'lower rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lower rack', 'above', 'heating element'), True)	(('heating element', 'below', 'lower rack'), True)
Constraint 1: x rln y <-> y rln x	(('heating element', 'next to', 'water inlet valve'), True)	(('water inlet valve', 'next to', 'heating element'), True)
Constraint 1: x rln y <-> y rln x	(('water inlet valve', 'next to', 'motor'), True)	(('motor', 'next to', 'water inlet valve'), True)
Constraint 1: x rln y <-> y rln x	(('motor', 'next to', 'fiteration system'), True)	(('fiteration system', 'next to', 'motor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lower rack', 'above', 'fiteration system'), True)	(('fiteration system', 'above', 'lower rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lower rack', 'above', 'fiteration system'), True)	(('fiteration system', 'below', 'lower rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lower rack', 'above', 'motor'), True)	(('motor', 'above', 'lower rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lower rack', 'above', 'motor'), True)	(('motor', 'below', 'lower rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lower rack', 'above', 'water inlet valve'), True)	(('water inlet valve', 'above', 'lower rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lower rack', 'above', 'water inlet valve'), True)	(('water inlet valve', 'below', 'lower rack'), True)
Constraint 4 (True antecedent)	('control pad', 'above', 'door latch')('door latch', 'above', 'dergent dispenser')	(('control pad', 'above', 'dergent dispenser'), True)
Constraint 4 (True antecedent)	('upper rack', 'above', 'spray arms')('spray arms', 'above', 'lower rack')	(('upper rack', 'above', 'lower rack'), True)
Constraint 4 (True antecedent)	('spray arms', 'above', 'lower rack')('lower rack', 'above', 'heating element')	(('spray arms', 'above', 'heating element'), True)
Constraint 4 (True antecedent)	('spray arms', 'above', 'lower rack')('lower rack', 'above', 'fiteration system')	(('spray arms', 'above', 'fiteration system'), True)
Constraint 4 (True antecedent)	('spray arms', 'above', 'lower rack')('lower rack', 'above', 'motor')	(('spray arms', 'above', 'motor'), True)
Constraint 4 (True antecedent)	('spray arms', 'above', 'lower rack')('lower rack', 'above', 'water inlet valve')	(('spray arms', 'above', 'water inlet valve'), True)
Constraint 4 (True antecedent)	('dergent dispenser', 'below', 'door latch')('door latch', 'below', 'control pad')	(('dergent dispenser', 'below', 'control pad'), True)
Constraint 4 (True antecedent)	('lower rack', 'below', 'spray arms')('spray arms', 'below', 'upper rack')	(('lower rack', 'below', 'upper rack'), True)
Constraint 4 (True antecedent)	('heating element', 'below', 'lower rack')('lower rack', 'below', 'spray arms')	(('heating element', 'below', 'spray arms'), True)
Constraint 4 (True antecedent)	('fiteration system', 'below', 'lower rack')('lower rack', 'below', 'spray arms')	(('fiteration system', 'below', 'spray arms'), True)
Constraint 4 (True antecedent)	('motor', 'below', 'lower rack')('lower rack', 'below', 'spray arms')	(('motor', 'below', 'spray arms'), True)
Constraint 4 (True antecedent)	('water inlet valve', 'below', 'lower rack')('lower rack', 'below', 'spray arms')	(('water inlet valve', 'below', 'spray arms'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('door latch', 'above', 'control pad'), False)	(('control pad', 'below', 'door latch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dergent dispenser', 'above', 'door latch'), False)	(('door latch', 'below', 'dergent dispenser'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'upper rack'), False)	(('upper rack', 'in front of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'spray arms'), False)	(('spray arms', 'in front of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'lower rack'), False)	(('lower rack', 'in front of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spray arms', 'above', 'upper rack'), False)	(('upper rack', 'below', 'spray arms'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lower rack', 'above', 'spray arms'), False)	(('spray arms', 'below', 'lower rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating element', 'above', 'lower rack'), False)	(('lower rack', 'below', 'heating element'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fiteration system', 'above', 'lower rack'), False)	(('lower rack', 'below', 'fiteration system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('motor', 'above', 'lower rack'), False)	(('lower rack', 'below', 'motor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water inlet valve', 'above', 'lower rack'), False)	(('lower rack', 'below', 'water inlet valve'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('control pad', 'above', 'dergent dispenser'), True)	(('dergent dispenser', 'above', 'control pad'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('upper rack', 'above', 'lower rack'), True)	(('lower rack', 'above', 'upper rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'heating element'), True)	(('heating element', 'above', 'spray arms'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'fiteration system'), True)	(('fiteration system', 'above', 'spray arms'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'motor'), True)	(('motor', 'above', 'spray arms'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'water inlet valve'), True)	(('water inlet valve', 'above', 'spray arms'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('dergent dispenser', 'below', 'control pad'), True)	(('control pad', 'below', 'dergent dispenser'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lower rack', 'below', 'upper rack'), True)	(('upper rack', 'below', 'lower rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heating element', 'below', 'spray arms'), True)	(('spray arms', 'below', 'heating element'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fiteration system', 'below', 'spray arms'), True)	(('spray arms', 'below', 'fiteration system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'below', 'spray arms'), True)	(('spray arms', 'below', 'motor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('water inlet valve', 'below', 'spray arms'), True)	(('spray arms', 'below', 'water inlet valve'), False)
Constraint 4 (True antecedent)	('upper rack', 'above', 'spray arms')('spray arms', 'above', 'heating element')	(('upper rack', 'above', 'heating element'), True)
Constraint 4 (True antecedent)	('upper rack', 'above', 'spray arms')('spray arms', 'above', 'fiteration system')	(('upper rack', 'above', 'fiteration system'), True)
Constraint 4 (True antecedent)	('upper rack', 'above', 'spray arms')('spray arms', 'above', 'motor')	(('upper rack', 'above', 'motor'), True)
Constraint 4 (True antecedent)	('upper rack', 'above', 'spray arms')('spray arms', 'above', 'water inlet valve')	(('upper rack', 'above', 'water inlet valve'), True)
Constraint 4 (True antecedent)	('heating element', 'below', 'lower rack')('lower rack', 'below', 'upper rack')	(('heating element', 'below', 'upper rack'), True)
Constraint 4 (True antecedent)	('fiteration system', 'below', 'lower rack')('lower rack', 'below', 'upper rack')	(('fiteration system', 'below', 'upper rack'), True)
Constraint 4 (True antecedent)	('motor', 'below', 'lower rack')('lower rack', 'below', 'upper rack')	(('motor', 'below', 'upper rack'), True)
Constraint 4 (True antecedent)	('water inlet valve', 'below', 'lower rack')('lower rack', 'below', 'upper rack')	(('water inlet valve', 'below', 'upper rack'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('upper rack', 'above', 'heating element'), True)	(('heating element', 'above', 'upper rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('upper rack', 'above', 'fiteration system'), True)	(('fiteration system', 'above', 'upper rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('upper rack', 'above', 'motor'), True)	(('motor', 'above', 'upper rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('upper rack', 'above', 'water inlet valve'), True)	(('water inlet valve', 'above', 'upper rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heating element', 'below', 'upper rack'), True)	(('upper rack', 'below', 'heating element'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fiteration system', 'below', 'upper rack'), True)	(('upper rack', 'below', 'fiteration system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'below', 'upper rack'), True)	(('upper rack', 'below', 'motor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('water inlet valve', 'below', 'upper rack'), True)	(('upper rack', 'below', 'water inlet valve'), False)
Round 4 ...
dishwasher worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('door latch', 'next to', 'control pad'), True)	(('control pad', 'next to', 'door latch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door latch', 'above', 'dergent dispenser'), True)	(('dergent dispenser', 'above', 'door latch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door latch', 'above', 'dergent dispenser'), True)	(('dergent dispenser', 'below', 'door latch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door latch', 'part of', 'door'), True)	(('door', 'part of', 'door latch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door latch', 'part of', 'door'), True)	(('door', 'has part', 'door latch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dergent dispenser', 'part of', 'door'), True)	(('door', 'part of', 'dergent dispenser'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dergent dispenser', 'part of', 'door'), True)	(('door', 'has part', 'dergent dispenser'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control pad', 'part of', 'door'), True)	(('door', 'part of', 'control pad'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control pad', 'part of', 'door'), True)	(('door', 'has part', 'control pad'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'connects', 'main compartment'), True)	(('main compartment', 'connects', 'door'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'inside', 'main compartment'), True)	(('main compartment', 'inside', 'racks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('racks', 'inside', 'main compartment'), True)	(('main compartment', 'contains', 'racks'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'above', 'spray arms'), True)	(('spray arms', 'above', 'racks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('racks', 'above', 'spray arms'), True)	(('spray arms', 'below', 'racks'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'silverware basket'), True)	(('silverware basket', 'above', 'spray arms'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spray arms', 'above', 'silverware basket'), True)	(('silverware basket', 'below', 'spray arms'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('silverware basket', 'above', 'heating element'), True)	(('heating element', 'above', 'silverware basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silverware basket', 'above', 'heating element'), True)	(('heating element', 'below', 'silverware basket'), True)
Constraint 1: x rln y <-> y rln x	(('heating element', 'next to', 'water inlet valve'), True)	(('water inlet valve', 'next to', 'heating element'), True)
Constraint 1: x rln y <-> y rln x	(('water inlet valve', 'next to', 'motor'), True)	(('motor', 'next to', 'water inlet valve'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('silverware basket', 'above', 'water inlet valve'), True)	(('water inlet valve', 'above', 'silverware basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silverware basket', 'above', 'water inlet valve'), True)	(('water inlet valve', 'below', 'silverware basket'), True)
Constraint 1: x rln y <-> y rln x	(('motor', 'next to', 'fiteration system'), True)	(('fiteration system', 'next to', 'motor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('silverware basket', 'above', 'fiteration system'), True)	(('fiteration system', 'above', 'silverware basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silverware basket', 'above', 'fiteration system'), True)	(('fiteration system', 'below', 'silverware basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('silverware basket', 'above', 'motor'), True)	(('motor', 'above', 'silverware basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silverware basket', 'above', 'motor'), True)	(('motor', 'below', 'silverware basket'), True)
Constraint 4 (True antecedent)	('racks', 'above', 'spray arms')('spray arms', 'above', 'silverware basket')	(('racks', 'above', 'silverware basket'), True)
Constraint 4 (True antecedent)	('spray arms', 'above', 'silverware basket')('silverware basket', 'above', 'heating element')	(('spray arms', 'above', 'heating element'), True)
Constraint 4 (True antecedent)	('spray arms', 'above', 'silverware basket')('silverware basket', 'above', 'water inlet valve')	(('spray arms', 'above', 'water inlet valve'), True)
Constraint 4 (True antecedent)	('spray arms', 'above', 'silverware basket')('silverware basket', 'above', 'fiteration system')	(('spray arms', 'above', 'fiteration system'), True)
Constraint 4 (True antecedent)	('spray arms', 'above', 'silverware basket')('silverware basket', 'above', 'motor')	(('spray arms', 'above', 'motor'), True)
Constraint 4 (True antecedent)	('silverware basket', 'below', 'spray arms')('spray arms', 'below', 'racks')	(('silverware basket', 'below', 'racks'), True)
Constraint 4 (True antecedent)	('heating element', 'below', 'silverware basket')('silverware basket', 'below', 'spray arms')	(('heating element', 'below', 'spray arms'), True)
Constraint 4 (True antecedent)	('water inlet valve', 'below', 'silverware basket')('silverware basket', 'below', 'spray arms')	(('water inlet valve', 'below', 'spray arms'), True)
Constraint 4 (True antecedent)	('fiteration system', 'below', 'silverware basket')('silverware basket', 'below', 'spray arms')	(('fiteration system', 'below', 'spray arms'), True)
Constraint 4 (True antecedent)	('motor', 'below', 'silverware basket')('silverware basket', 'below', 'spray arms')	(('motor', 'below', 'spray arms'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('dergent dispenser', 'above', 'door latch'), False)	(('door latch', 'below', 'dergent dispenser'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'door latch'), False)	(('door latch', 'has part', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'dergent dispenser'), False)	(('dergent dispenser', 'has part', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'control pad'), False)	(('control pad', 'has part', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main compartment', 'inside', 'racks'), False)	(('racks', 'contains', 'main compartment'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spray arms', 'above', 'racks'), False)	(('racks', 'below', 'spray arms'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silverware basket', 'above', 'spray arms'), False)	(('spray arms', 'below', 'silverware basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating element', 'above', 'silverware basket'), False)	(('silverware basket', 'below', 'heating element'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water inlet valve', 'above', 'silverware basket'), False)	(('silverware basket', 'below', 'water inlet valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fiteration system', 'above', 'silverware basket'), False)	(('silverware basket', 'below', 'fiteration system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('motor', 'above', 'silverware basket'), False)	(('silverware basket', 'below', 'motor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'above', 'silverware basket'), True)	(('silverware basket', 'above', 'racks'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'heating element'), True)	(('heating element', 'above', 'spray arms'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'water inlet valve'), True)	(('water inlet valve', 'above', 'spray arms'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'fiteration system'), True)	(('fiteration system', 'above', 'spray arms'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'motor'), True)	(('motor', 'above', 'spray arms'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('silverware basket', 'below', 'racks'), True)	(('racks', 'below', 'silverware basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heating element', 'below', 'spray arms'), True)	(('spray arms', 'below', 'heating element'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('water inlet valve', 'below', 'spray arms'), True)	(('spray arms', 'below', 'water inlet valve'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fiteration system', 'below', 'spray arms'), True)	(('spray arms', 'below', 'fiteration system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'below', 'spray arms'), True)	(('spray arms', 'below', 'motor'), False)
Constraint 4 (True antecedent)	('racks', 'above', 'spray arms')('spray arms', 'above', 'heating element')	(('racks', 'above', 'heating element'), True)
Constraint 4 (True antecedent)	('racks', 'above', 'spray arms')('spray arms', 'above', 'water inlet valve')	(('racks', 'above', 'water inlet valve'), True)
Constraint 4 (True antecedent)	('racks', 'above', 'spray arms')('spray arms', 'above', 'fiteration system')	(('racks', 'above', 'fiteration system'), True)
Constraint 4 (True antecedent)	('racks', 'above', 'spray arms')('spray arms', 'above', 'motor')	(('racks', 'above', 'motor'), True)
Constraint 4 (True antecedent)	('heating element', 'below', 'silverware basket')('silverware basket', 'below', 'racks')	(('heating element', 'below', 'racks'), True)
Constraint 4 (True antecedent)	('water inlet valve', 'below', 'silverware basket')('silverware basket', 'below', 'racks')	(('water inlet valve', 'below', 'racks'), True)
Constraint 4 (True antecedent)	('fiteration system', 'below', 'silverware basket')('silverware basket', 'below', 'racks')	(('fiteration system', 'below', 'racks'), True)
Constraint 4 (True antecedent)	('motor', 'below', 'silverware basket')('silverware basket', 'below', 'racks')	(('motor', 'below', 'racks'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'above', 'heating element'), True)	(('heating element', 'above', 'racks'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'above', 'water inlet valve'), True)	(('water inlet valve', 'above', 'racks'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'above', 'fiteration system'), True)	(('fiteration system', 'above', 'racks'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'above', 'motor'), True)	(('motor', 'above', 'racks'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heating element', 'below', 'racks'), True)	(('racks', 'below', 'heating element'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('water inlet valve', 'below', 'racks'), True)	(('racks', 'below', 'water inlet valve'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fiteration system', 'below', 'racks'), True)	(('racks', 'below', 'fiteration system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'below', 'racks'), True)	(('racks', 'below', 'motor'), False)
Round 4 ...
dishwasher worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'above', 'spray arms'), True)	(('spray arms', 'above', 'racks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('racks', 'above', 'spray arms'), True)	(('spray arms', 'below', 'racks'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'silverware basket'), True)	(('silverware basket', 'above', 'spray arms'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spray arms', 'above', 'silverware basket'), True)	(('silverware basket', 'below', 'spray arms'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('silverware basket', 'above', 'motor'), True)	(('motor', 'above', 'silverware basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silverware basket', 'above', 'motor'), True)	(('motor', 'below', 'silverware basket'), True)
Constraint 1: x rln y <-> y rln x	(('motor', 'next to', 'heating element'), True)	(('heating element', 'next to', 'motor'), True)
Constraint 1: x rln y <-> y rln x	(('heating element', 'next to', 'water inlet valve'), True)	(('water inlet valve', 'next to', 'heating element'), True)
Constraint 1: x rln y <-> y rln x	(('water inlet valve', 'next to', 'motor'), True)	(('motor', 'next to', 'water inlet valve'), True)
Constraint 4 (True antecedent)	('racks', 'above', 'spray arms')('spray arms', 'above', 'silverware basket')	(('racks', 'above', 'silverware basket'), True)
Constraint 4 (True antecedent)	('spray arms', 'above', 'silverware basket')('silverware basket', 'above', 'motor')	(('spray arms', 'above', 'motor'), True)
Constraint 4 (True antecedent)	('silverware basket', 'below', 'spray arms')('spray arms', 'below', 'racks')	(('silverware basket', 'below', 'racks'), True)
Constraint 4 (True antecedent)	('motor', 'below', 'silverware basket')('silverware basket', 'below', 'spray arms')	(('motor', 'below', 'spray arms'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('spray arms', 'above', 'racks'), False)	(('racks', 'below', 'spray arms'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silverware basket', 'above', 'spray arms'), False)	(('spray arms', 'below', 'silverware basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('motor', 'above', 'silverware basket'), False)	(('silverware basket', 'below', 'motor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'above', 'silverware basket'), True)	(('silverware basket', 'above', 'racks'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spray arms', 'above', 'motor'), True)	(('motor', 'above', 'spray arms'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('silverware basket', 'below', 'racks'), True)	(('racks', 'below', 'silverware basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'below', 'spray arms'), True)	(('spray arms', 'below', 'motor'), False)
Constraint 4 (True antecedent)	('racks', 'above', 'spray arms')('spray arms', 'above', 'motor')	(('racks', 'above', 'motor'), True)
Constraint 4 (True antecedent)	('motor', 'below', 'silverware basket')('silverware basket', 'below', 'racks')	(('motor', 'below', 'racks'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('racks', 'above', 'motor'), True)	(('motor', 'above', 'racks'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('motor', 'below', 'racks'), True)	(('racks', 'below', 'motor'), False)
Round 4 ...
door worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('lock jamb', 'connects', 'threshold'), True)	(('threshold', 'connects', 'lock jamb'), True)
Constraint 1: x rln y <-> y rln x	(('threshold', 'connects', 'casing'), True)	(('casing', 'connects', 'threshold'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('casing', 'surrounds', 'lock jamb'), True)	(('lock jamb', 'surrounds', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'surrounds', 'lock jamb'), True)	(('lock jamb', 'surrounded by', 'casing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('doorhandle', 'above', 'lock'), True)	(('lock', 'above', 'doorhandle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('doorhandle', 'above', 'lock'), True)	(('lock', 'below', 'doorhandle'), True)
Constraint 1: x rln y <-> y rln x	(('lock', 'connects', 'doorhandle'), True)	(('doorhandle', 'connects', 'lock'), True)
Constraint 1: x rln y <-> y rln x	(('doorhandle', 'connects', 'door'), True)	(('door', 'connects', 'doorhandle'), True)
Constraint 1: x rln y <-> y rln x	(('lock', 'connects', 'door'), True)	(('door', 'connects', 'lock'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'next to', 'hinge jamb'), True)	(('hinge jamb', 'next to', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'connects', 'hinge jamb'), True)	(('hinge jamb', 'connects', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('hinge', 'connects', 'casing'), True)	(('casing', 'connects', 'hinge'), True)
Constraint 1: x rln y <-> y rln x	(('casing', 'next to', 'hinge jamb'), True)	(('hinge jamb', 'next to', 'casing'), True)
Constraint 1: x rln y <-> y rln x	(('hinge jamb', 'connects', 'hinge'), True)	(('hinge', 'connects', 'hinge jamb'), True)
Constraint 1: x rln y <-> y rln x	(('hinge jamb', 'next to', 'hinge'), True)	(('hinge', 'next to', 'hinge jamb'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'above', 'leaf'), True)	(('leaf', 'above', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'leaf'), True)	(('leaf', 'below', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'connects', 'leaf'), True)	(('leaf', 'connects', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'connects', 'hinge'), True)	(('hinge', 'connects', 'door'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lock jamb', 'surrounds', 'casing'), False)	(('casing', 'surrounded by', 'lock jamb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock', 'above', 'doorhandle'), False)	(('doorhandle', 'below', 'lock'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaf', 'above', 'door'), False)	(('door', 'below', 'leaf'), False)
Round 3 ...
door worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lock jamb', 'part of', 'casing'), True)	(('casing', 'part of', 'lock jamb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock jamb', 'part of', 'casing'), True)	(('casing', 'has part', 'lock jamb'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hinge jamb', 'part of', 'casing'), True)	(('casing', 'part of', 'hinge jamb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hinge jamb', 'part of', 'casing'), True)	(('casing', 'has part', 'hinge jamb'), True)
Constraint 1: x rln y <-> y rln x	(('casing', 'connects', 'threshold'), True)	(('threshold', 'connects', 'casing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('casing', 'surrounds', 'leaf'), True)	(('leaf', 'surrounds', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'surrounds', 'leaf'), True)	(('leaf', 'surrounded by', 'casing'), True)
Constraint 1: x rln y <-> y rln x	(('hinge jamb', 'connects', 'hinge'), True)	(('hinge', 'connects', 'hinge jamb'), True)
Constraint 1: x rln y <-> y rln x	(('hinge', 'connects', 'leaf'), True)	(('leaf', 'connects', 'hinge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lock', 'part of', 'leaf'), True)	(('leaf', 'part of', 'lock'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock', 'part of', 'leaf'), True)	(('leaf', 'has part', 'lock'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('doorhandle', 'above', 'lock'), True)	(('lock', 'above', 'doorhandle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('doorhandle', 'above', 'lock'), True)	(('lock', 'below', 'doorhandle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('doorhandle', 'part of', 'leaf'), True)	(('leaf', 'part of', 'doorhandle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('doorhandle', 'part of', 'leaf'), True)	(('leaf', 'has part', 'doorhandle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leaf', 'above', 'threshold'), True)	(('threshold', 'above', 'leaf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaf', 'above', 'threshold'), True)	(('threshold', 'below', 'leaf'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'part of', 'lock jamb'), False)	(('lock jamb', 'has part', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'part of', 'hinge jamb'), False)	(('hinge jamb', 'has part', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaf', 'surrounds', 'casing'), False)	(('casing', 'surrounded by', 'leaf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaf', 'part of', 'lock'), False)	(('lock', 'has part', 'leaf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock', 'above', 'doorhandle'), False)	(('doorhandle', 'below', 'lock'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaf', 'part of', 'doorhandle'), False)	(('doorhandle', 'has part', 'leaf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('threshold', 'above', 'leaf'), False)	(('leaf', 'below', 'threshold'), False)
Round 3 ...
door worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('casing', 'surrounds', 'hinge jamb'), True)	(('hinge jamb', 'surrounds', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'surrounds', 'hinge jamb'), True)	(('hinge jamb', 'surrounded by', 'casing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hinge jamb', 'above', 'lock jamb'), True)	(('lock jamb', 'above', 'hinge jamb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hinge jamb', 'above', 'lock jamb'), True)	(('lock jamb', 'below', 'hinge jamb'), True)
Constraint 1: x rln y <-> y rln x	(('lock jamb', 'next to', 'doorhandle'), True)	(('doorhandle', 'next to', 'lock jamb'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('doorhandle', 'above', 'lock'), True)	(('lock', 'above', 'doorhandle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('doorhandle', 'above', 'lock'), True)	(('lock', 'below', 'doorhandle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lock', 'above', 'hinge'), True)	(('hinge', 'above', 'lock'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock', 'above', 'hinge'), True)	(('hinge', 'below', 'lock'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hinge', 'above', 'threshold'), True)	(('threshold', 'above', 'hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hinge', 'above', 'threshold'), True)	(('threshold', 'below', 'hinge'), True)
Constraint 4 (True antecedent)	('doorhandle', 'above', 'lock')('lock', 'above', 'hinge')	(('doorhandle', 'above', 'hinge'), True)
Constraint 4 (True antecedent)	('lock', 'above', 'hinge')('hinge', 'above', 'threshold')	(('lock', 'above', 'threshold'), True)
Constraint 4 (True antecedent)	('hinge', 'below', 'lock')('lock', 'below', 'doorhandle')	(('hinge', 'below', 'doorhandle'), True)
Constraint 4 (True antecedent)	('threshold', 'below', 'hinge')('hinge', 'below', 'lock')	(('threshold', 'below', 'lock'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('hinge jamb', 'surrounds', 'casing'), False)	(('casing', 'surrounded by', 'hinge jamb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock jamb', 'above', 'hinge jamb'), False)	(('hinge jamb', 'below', 'lock jamb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock', 'above', 'doorhandle'), False)	(('doorhandle', 'below', 'lock'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hinge', 'above', 'lock'), False)	(('lock', 'below', 'hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('threshold', 'above', 'hinge'), False)	(('hinge', 'below', 'threshold'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('doorhandle', 'above', 'hinge'), True)	(('hinge', 'above', 'doorhandle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lock', 'above', 'threshold'), True)	(('threshold', 'above', 'lock'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hinge', 'below', 'doorhandle'), True)	(('doorhandle', 'below', 'hinge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('threshold', 'below', 'lock'), True)	(('lock', 'below', 'threshold'), False)
Constraint 4 (True antecedent)	('doorhandle', 'above', 'lock')('lock', 'above', 'threshold')	(('doorhandle', 'above', 'threshold'), True)
Constraint 4 (True antecedent)	('threshold', 'below', 'hinge')('hinge', 'below', 'doorhandle')	(('threshold', 'below', 'doorhandle'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('doorhandle', 'above', 'threshold'), True)	(('threshold', 'above', 'doorhandle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('threshold', 'below', 'doorhandle'), True)	(('doorhandle', 'below', 'threshold'), False)
Round 4 ...
dryer worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('vent', 'above', 'feet'), True)	(('feet', 'above', 'vent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vent', 'above', 'feet'), True)	(('feet', 'below', 'vent'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'feet'), True)	(('feet', 'above', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'feet'), True)	(('feet', 'below', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'vent'), True)	(('vent', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'feet'), True)	(('feet', 'connects', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door latch', 'part of', 'door'), True)	(('door', 'part of', 'door latch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door latch', 'part of', 'door'), True)	(('door', 'has part', 'door latch'), True)
Constraint 1: x rln y <-> y rln x	(('door hinges', 'connects', 'door'), True)	(('door', 'connects', 'door hinges'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'connects', 'door seal'), True)	(('door seal', 'connects', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('door hinges', 'connects', 'frame'), True)	(('frame', 'connects', 'door hinges'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'knobs/dials'), True)	(('knobs/dials', 'connects', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('knobs/dials', 'above', 'door'), True)	(('door', 'above', 'knobs/dials'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('knobs/dials', 'above', 'door'), True)	(('door', 'below', 'knobs/dials'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'lint filter'), True)	(('lint filter', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'door swtich'), True)	(('door swtich', 'connects', 'frame'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('feet', 'above', 'vent'), False)	(('vent', 'below', 'feet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feet', 'above', 'frame'), False)	(('frame', 'below', 'feet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'door latch'), False)	(('door latch', 'has part', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'knobs/dials'), False)	(('knobs/dials', 'below', 'door'), False)
Round 3 ...
dryer worker_106...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('knobs/dials', 'above', 'lint filter'), True)	(('lint filter', 'above', 'knobs/dials'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('knobs/dials', 'above', 'lint filter'), True)	(('lint filter', 'below', 'knobs/dials'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lint filter', 'above', 'door switch'), True)	(('door switch', 'above', 'lint filter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lint filter', 'above', 'door switch'), True)	(('door switch', 'below', 'lint filter'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door switch', 'above', 'door seal'), True)	(('door seal', 'above', 'door switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door switch', 'above', 'door seal'), True)	(('door seal', 'below', 'door switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('baffles', 'inside', 'door seal'), True)	(('door seal', 'inside', 'baffles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('baffles', 'inside', 'door seal'), True)	(('door seal', 'contains', 'baffles'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door seal', 'above', 'vent'), True)	(('vent', 'above', 'door seal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door seal', 'above', 'vent'), True)	(('vent', 'below', 'door seal'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('vent', 'above', 'feet'), True)	(('feet', 'above', 'vent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vent', 'above', 'feet'), True)	(('feet', 'below', 'vent'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'inside', 'door seal'), True)	(('door seal', 'inside', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'inside', 'door seal'), True)	(('door seal', 'contains', 'bulb'), True)
Constraint 1: x rln y <-> y rln x	(('door latch', 'connects', 'door seal'), True)	(('door seal', 'connects', 'door latch'), True)
Constraint 4 (True antecedent)	('knobs/dials', 'above', 'lint filter')('lint filter', 'above', 'door switch')	(('knobs/dials', 'above', 'door switch'), True)
Constraint 4 (True antecedent)	('lint filter', 'above', 'door switch')('door switch', 'above', 'door seal')	(('lint filter', 'above', 'door seal'), True)
Constraint 4 (True antecedent)	('door switch', 'above', 'door seal')('door seal', 'above', 'vent')	(('door switch', 'above', 'vent'), True)
Constraint 4 (True antecedent)	('door seal', 'above', 'vent')('vent', 'above', 'feet')	(('door seal', 'above', 'feet'), True)
Constraint 4 (True antecedent)	('door switch', 'below', 'lint filter')('lint filter', 'below', 'knobs/dials')	(('door switch', 'below', 'knobs/dials'), True)
Constraint 4 (True antecedent)	('door seal', 'below', 'door switch')('door switch', 'below', 'lint filter')	(('door seal', 'below', 'lint filter'), True)
Constraint 4 (True antecedent)	('vent', 'below', 'door seal')('door seal', 'below', 'door switch')	(('vent', 'below', 'door switch'), True)
Constraint 4 (True antecedent)	('feet', 'below', 'vent')('vent', 'below', 'door seal')	(('feet', 'below', 'door seal'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lint filter', 'above', 'knobs/dials'), False)	(('knobs/dials', 'below', 'lint filter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door switch', 'above', 'lint filter'), False)	(('lint filter', 'below', 'door switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door seal', 'above', 'door switch'), False)	(('door switch', 'below', 'door seal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door seal', 'inside', 'baffles'), False)	(('baffles', 'contains', 'door seal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vent', 'above', 'door seal'), False)	(('door seal', 'below', 'vent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feet', 'above', 'vent'), False)	(('vent', 'below', 'feet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door seal', 'inside', 'bulb'), False)	(('bulb', 'contains', 'door seal'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('knobs/dials', 'above', 'door switch'), True)	(('door switch', 'above', 'knobs/dials'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lint filter', 'above', 'door seal'), True)	(('door seal', 'above', 'lint filter'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door switch', 'above', 'vent'), True)	(('vent', 'above', 'door switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door seal', 'above', 'feet'), True)	(('feet', 'above', 'door seal'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door switch', 'below', 'knobs/dials'), True)	(('knobs/dials', 'below', 'door switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door seal', 'below', 'lint filter'), True)	(('lint filter', 'below', 'door seal'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('vent', 'below', 'door switch'), True)	(('door switch', 'below', 'vent'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('feet', 'below', 'door seal'), True)	(('door seal', 'below', 'feet'), False)
Constraint 4 (True antecedent)	('knobs/dials', 'above', 'lint filter')('lint filter', 'above', 'door seal')	(('knobs/dials', 'above', 'door seal'), True)
Constraint 4 (True antecedent)	('knobs/dials', 'above', 'door switch')('door switch', 'above', 'vent')	(('knobs/dials', 'above', 'vent'), True)
Constraint 4 (True antecedent)	('lint filter', 'above', 'door switch')('door switch', 'above', 'vent')	(('lint filter', 'above', 'vent'), True)
Constraint 4 (True antecedent)	('lint filter', 'above', 'door seal')('door seal', 'above', 'feet')	(('lint filter', 'above', 'feet'), True)
Constraint 4 (True antecedent)	('door switch', 'above', 'door seal')('door seal', 'above', 'feet')	(('door switch', 'above', 'feet'), True)
Constraint 4 (True antecedent)	('door seal', 'below', 'door switch')('door switch', 'below', 'knobs/dials')	(('door seal', 'below', 'knobs/dials'), True)
Constraint 4 (True antecedent)	('vent', 'below', 'door seal')('door seal', 'below', 'lint filter')	(('vent', 'below', 'lint filter'), True)
Constraint 4 (True antecedent)	('vent', 'below', 'door switch')('door switch', 'below', 'knobs/dials')	(('vent', 'below', 'knobs/dials'), True)
Constraint 4 (True antecedent)	('feet', 'below', 'vent')('vent', 'below', 'door switch')	(('feet', 'below', 'door switch'), True)
Constraint 4 (True antecedent)	('feet', 'below', 'door seal')('door seal', 'below', 'lint filter')	(('feet', 'below', 'lint filter'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('knobs/dials', 'above', 'door seal'), True)	(('door seal', 'above', 'knobs/dials'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('knobs/dials', 'above', 'vent'), True)	(('vent', 'above', 'knobs/dials'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lint filter', 'above', 'vent'), True)	(('vent', 'above', 'lint filter'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lint filter', 'above', 'feet'), True)	(('feet', 'above', 'lint filter'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door switch', 'above', 'feet'), True)	(('feet', 'above', 'door switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door seal', 'below', 'knobs/dials'), True)	(('knobs/dials', 'below', 'door seal'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('vent', 'below', 'lint filter'), True)	(('lint filter', 'below', 'vent'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('vent', 'below', 'knobs/dials'), True)	(('knobs/dials', 'below', 'vent'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('feet', 'below', 'door switch'), True)	(('door switch', 'below', 'feet'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('feet', 'below', 'lint filter'), True)	(('lint filter', 'below', 'feet'), False)
Constraint 4 (True antecedent)	('knobs/dials', 'above', 'lint filter')('lint filter', 'above', 'feet')	(('knobs/dials', 'above', 'feet'), True)
Constraint 4 (True antecedent)	('feet', 'below', 'vent')('vent', 'below', 'knobs/dials')	(('feet', 'below', 'knobs/dials'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('knobs/dials', 'above', 'feet'), True)	(('feet', 'above', 'knobs/dials'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('feet', 'below', 'knobs/dials'), True)	(('knobs/dials', 'below', 'feet'), False)
Round 5 ...
dryer worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('knobs/dials', 'above', 'lint filter'), True)	(('lint filter', 'above', 'knobs/dials'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('knobs/dials', 'above', 'lint filter'), True)	(('lint filter', 'below', 'knobs/dials'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lint filter', 'above', 'door'), True)	(('door', 'above', 'lint filter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lint filter', 'above', 'door'), True)	(('door', 'below', 'lint filter'), True)
Constraint 1: x rln y <-> y rln x	(('vent', 'next to', 'door'), True)	(('door', 'next to', 'vent'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dryer drum', 'requires', 'power cord'), True)	(('power cord', 'requires', 'dryer drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dryer drum', 'requires', 'power cord'), True)	(('power cord', 'required by', 'dryer drum'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dryer drum', 'behind', 'door'), True)	(('door', 'behind', 'dryer drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dryer drum', 'behind', 'door'), True)	(('door', 'in front of', 'dryer drum'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('baffles', 'inside', 'dryer drum'), True)	(('dryer drum', 'inside', 'baffles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('baffles', 'inside', 'dryer drum'), True)	(('dryer drum', 'contains', 'baffles'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'inside', 'dryer drum'), True)	(('dryer drum', 'inside', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'inside', 'dryer drum'), True)	(('dryer drum', 'contains', 'bulb'), True)
Constraint 4 (True antecedent)	('knobs/dials', 'above', 'lint filter')('lint filter', 'above', 'door')	(('knobs/dials', 'above', 'door'), True)
Constraint 4 (True antecedent)	('door', 'below', 'lint filter')('lint filter', 'below', 'knobs/dials')	(('door', 'below', 'knobs/dials'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lint filter', 'above', 'knobs/dials'), False)	(('knobs/dials', 'below', 'lint filter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'lint filter'), False)	(('lint filter', 'below', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power cord', 'requires', 'dryer drum'), False)	(('dryer drum', 'required by', 'power cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'dryer drum'), False)	(('dryer drum', 'in front of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dryer drum', 'inside', 'baffles'), False)	(('baffles', 'contains', 'dryer drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dryer drum', 'inside', 'bulb'), False)	(('bulb', 'contains', 'dryer drum'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('knobs/dials', 'above', 'door'), True)	(('door', 'above', 'knobs/dials'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'below', 'knobs/dials'), True)	(('knobs/dials', 'below', 'door'), False)
Round 3 ...
earphone worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('drivers', 'inside', 'housing'), True)	(('housing', 'inside', 'drivers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drivers', 'inside', 'housing'), True)	(('housing', 'contains', 'drivers'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('housing', 'inside', 'sleeves/covers'), True)	(('sleeves/covers', 'inside', 'housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('housing', 'inside', 'sleeves/covers'), True)	(('sleeves/covers', 'contains', 'housing'), True)
Constraint 1: x rln y <-> y rln x	(('sleeves/covers', 'connects', 'cable'), True)	(('cable', 'connects', 'sleeves/covers'), True)
Constraint 1: x rln y <-> y rln x	(('cable', 'connects', 'plug'), True)	(('plug', 'connects', 'cable'), True)
Constraint 4 (True antecedent)	('drivers', 'inside', 'housing')('housing', 'inside', 'sleeves/covers')	(('drivers', 'inside', 'sleeves/covers'), True)
Constraint 4 (True antecedent)	('sleeves/covers', 'contains', 'housing')('housing', 'contains', 'drivers')	(('sleeves/covers', 'contains', 'drivers'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('housing', 'inside', 'drivers'), False)	(('drivers', 'contains', 'housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeves/covers', 'inside', 'housing'), False)	(('housing', 'contains', 'sleeves/covers'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drivers', 'inside', 'sleeves/covers'), True)	(('sleeves/covers', 'inside', 'drivers'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeves/covers', 'contains', 'drivers'), True)	(('drivers', 'contains', 'sleeves/covers'), False)
Round 3 ...
earphone worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('sleeves/covers', 'connects', 'drivers'), True)	(('drivers', 'connects', 'sleeves/covers'), True)
Constraint 1: x rln y <-> y rln x	(('drivers', 'connects', 'cable'), True)	(('cable', 'connects', 'drivers'), True)
Constraint 1: x rln y <-> y rln x	(('cable', 'connects', 'plug'), True)	(('plug', 'connects', 'cable'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('drivers', 'requires', 'plug'), True)	(('plug', 'requires', 'drivers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drivers', 'requires', 'plug'), True)	(('plug', 'required by', 'drivers'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('plug', 'requires', 'drivers'), False)	(('drivers', 'required by', 'plug'), False)
Round 3 ...
earphone worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('plug', 'connects', 'cable'), True)	(('cable', 'connects', 'plug'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cable', 'requires', 'plug'), True)	(('plug', 'requires', 'cable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable', 'requires', 'plug'), True)	(('plug', 'required by', 'cable'), True)
Constraint 1: x rln y <-> y rln x	(('housing', 'connects', 'cable'), True)	(('cable', 'connects', 'housing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('housing', 'surrounds', 'drivers'), True)	(('drivers', 'surrounds', 'housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('housing', 'surrounds', 'drivers'), True)	(('drivers', 'surrounded by', 'housing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sleeves/covers', 'part of', 'housing'), True)	(('housing', 'part of', 'sleeves/covers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sleeves/covers', 'part of', 'housing'), True)	(('housing', 'has part', 'sleeves/covers'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('plug', 'requires', 'cable'), False)	(('cable', 'required by', 'plug'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drivers', 'surrounds', 'housing'), False)	(('housing', 'surrounded by', 'drivers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('housing', 'part of', 'sleeves/covers'), False)	(('sleeves/covers', 'has part', 'housing'), False)
Round 3 ...
fish worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'anal fin'), True)	(('anal fin', 'behind', 'caudal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('caudal fin', 'behind', 'anal fin'), True)	(('anal fin', 'in front of', 'caudal fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'pelvic fin'), True)	(('pelvic fin', 'behind', 'anal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anal fin', 'behind', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'anal fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'pelvic fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pelvic fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'pelvic fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'pectoral fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pectoral fin', 'behind', 'gill cover'), True)	(('gill cover', 'in front of', 'pectoral fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('scale', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'scale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('scale', 'behind', 'gill cover'), True)	(('gill cover', 'in front of', 'scale'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'behind', 'eye'), True)	(('eye', 'behind', 'gill cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill cover', 'behind', 'eye'), True)	(('eye', 'in front of', 'gill cover'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'behind', 'gill'), True)	(('gill', 'behind', 'spiny'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spiny', 'behind', 'gill'), True)	(('gill', 'in front of', 'spiny'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'behind', 'gill'), True)	(('gill', 'behind', 'gill cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill cover', 'behind', 'gill'), True)	(('gill', 'in front of', 'gill cover'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'behind', 'nostril'), True)	(('nostril', 'behind', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'nostril'), True)	(('nostril', 'in front of', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'above', 'mouth'), True)	(('mouth', 'above', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'above', 'mouth'), True)	(('mouth', 'below', 'nostril'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'behind', 'mouth'), True)	(('mouth', 'behind', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'mouth'), True)	(('mouth', 'in front of', 'eye'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'pelvic fin')	(('caudal fin', 'behind', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'pectoral fin')	(('anal fin', 'behind', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'gill cover')	(('pelvic fin', 'behind', 'gill cover'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'behind', 'gill cover')('gill cover', 'behind', 'eye')	(('pectoral fin', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'behind', 'gill cover')('gill cover', 'behind', 'gill')	(('pectoral fin', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('scale', 'behind', 'gill cover')('gill cover', 'behind', 'eye')	(('scale', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('scale', 'behind', 'gill cover')('gill cover', 'behind', 'gill')	(('scale', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('gill cover', 'behind', 'eye')('eye', 'behind', 'nostril')	(('gill cover', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('gill cover', 'behind', 'eye')('eye', 'behind', 'mouth')	(('gill cover', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'in front of', 'anal fin')('anal fin', 'in front of', 'caudal fin')	(('pelvic fin', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'in front of', 'pelvic fin')('pelvic fin', 'in front of', 'anal fin')	(('pectoral fin', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('gill cover', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'pelvic fin')	(('gill cover', 'in front of', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'gill cover')('gill cover', 'in front of', 'pectoral fin')	(('eye', 'in front of', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'gill cover')('gill cover', 'in front of', 'scale')	(('eye', 'in front of', 'scale'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'gill cover')('gill cover', 'in front of', 'pectoral fin')	(('gill', 'in front of', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'gill cover')('gill cover', 'in front of', 'scale')	(('gill', 'in front of', 'scale'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'eye')('eye', 'in front of', 'gill cover')	(('nostril', 'in front of', 'gill cover'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'eye')('eye', 'in front of', 'gill cover')	(('mouth', 'in front of', 'gill cover'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('anal fin', 'behind', 'caudal fin'), False)	(('caudal fin', 'in front of', 'anal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pelvic fin', 'behind', 'anal fin'), False)	(('anal fin', 'in front of', 'pelvic fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pectoral fin', 'behind', 'pelvic fin'), False)	(('pelvic fin', 'in front of', 'pectoral fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill cover', 'behind', 'pectoral fin'), False)	(('pectoral fin', 'in front of', 'gill cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill cover', 'behind', 'scale'), False)	(('scale', 'in front of', 'gill cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'gill cover'), False)	(('gill cover', 'in front of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill', 'behind', 'spiny'), False)	(('spiny', 'in front of', 'gill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill', 'behind', 'gill cover'), False)	(('gill cover', 'in front of', 'gill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'behind', 'eye'), False)	(('eye', 'in front of', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nostril'), False)	(('nostril', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'behind', 'eye'), False)	(('eye', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'pelvic fin'), True)	(('pelvic fin', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'eye'), True)	(('eye', 'behind', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'gill'), True)	(('gill', 'behind', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('scale', 'behind', 'eye'), True)	(('eye', 'behind', 'scale'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('scale', 'behind', 'gill'), True)	(('gill', 'behind', 'scale'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'behind', 'nostril'), True)	(('nostril', 'behind', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'behind', 'mouth'), True)	(('mouth', 'behind', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'scale'), True)	(('scale', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'scale'), True)	(('scale', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'gill cover'), True)	(('gill cover', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'gill cover'), True)	(('gill cover', 'in front of', 'mouth'), False)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'pectoral fin')	(('caudal fin', 'behind', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'gill cover')	(('caudal fin', 'behind', 'gill cover'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'gill cover')	(('anal fin', 'behind', 'gill cover'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'eye')	(('anal fin', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'gill')	(('anal fin', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'eye')	(('pelvic fin', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'gill')	(('pelvic fin', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'gill cover')('gill cover', 'behind', 'nostril')	(('pelvic fin', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'gill cover')('gill cover', 'behind', 'mouth')	(('pelvic fin', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'behind', 'gill cover')('gill cover', 'behind', 'nostril')	(('pectoral fin', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'behind', 'gill cover')('gill cover', 'behind', 'mouth')	(('pectoral fin', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('scale', 'behind', 'gill cover')('gill cover', 'behind', 'nostril')	(('scale', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('scale', 'behind', 'gill cover')('gill cover', 'behind', 'mouth')	(('scale', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'in front of', 'pelvic fin')('pelvic fin', 'in front of', 'caudal fin')	(('pectoral fin', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('gill cover', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'anal fin')	(('gill cover', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('gill cover', 'in front of', 'pelvic fin')('pelvic fin', 'in front of', 'caudal fin')	(('gill cover', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'gill cover')('gill cover', 'in front of', 'pelvic fin')	(('eye', 'in front of', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'anal fin')	(('eye', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'gill cover')('gill cover', 'in front of', 'pelvic fin')	(('gill', 'in front of', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'anal fin')	(('gill', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'eye')('eye', 'in front of', 'pectoral fin')	(('nostril', 'in front of', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'eye')('eye', 'in front of', 'scale')	(('nostril', 'in front of', 'scale'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'gill cover')('gill cover', 'in front of', 'pelvic fin')	(('nostril', 'in front of', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'eye')('eye', 'in front of', 'pectoral fin')	(('mouth', 'in front of', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'eye')('eye', 'in front of', 'scale')	(('mouth', 'in front of', 'scale'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'gill cover')('gill cover', 'in front of', 'pelvic fin')	(('mouth', 'in front of', 'pelvic fin'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'eye'), True)	(('eye', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'gill'), True)	(('gill', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'eye'), True)	(('eye', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'gill'), True)	(('gill', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'nostril'), True)	(('nostril', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'mouth'), True)	(('mouth', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'nostril'), True)	(('nostril', 'behind', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'mouth'), True)	(('mouth', 'behind', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('scale', 'behind', 'nostril'), True)	(('nostril', 'behind', 'scale'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('scale', 'behind', 'mouth'), True)	(('mouth', 'behind', 'scale'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'scale'), True)	(('scale', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'scale'), True)	(('scale', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'mouth'), False)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'eye')	(('caudal fin', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'gill')	(('caudal fin', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'nostril')	(('caudal fin', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'mouth')	(('caudal fin', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'nostril')	(('anal fin', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'mouth')	(('anal fin', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'gill cover')('gill cover', 'in front of', 'caudal fin')	(('eye', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'gill cover')('gill cover', 'in front of', 'caudal fin')	(('gill', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'eye')('eye', 'in front of', 'anal fin')	(('nostril', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'gill cover')('gill cover', 'in front of', 'caudal fin')	(('nostril', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'eye')('eye', 'in front of', 'anal fin')	(('mouth', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'gill cover')('gill cover', 'in front of', 'caudal fin')	(('mouth', 'in front of', 'caudal fin'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'eye'), True)	(('eye', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'gill'), True)	(('gill', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'nostril'), True)	(('nostril', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'mouth'), True)	(('mouth', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'nostril'), True)	(('nostril', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'mouth'), True)	(('mouth', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'mouth'), False)
Round 5 ...
fish worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'above', 'mouth'), True)	(('mouth', 'above', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'above', 'mouth'), True)	(('mouth', 'below', 'nostril'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'behind', 'nostril'), True)	(('nostril', 'behind', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'nostril'), True)	(('nostril', 'in front of', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'behind', 'mouth'), True)	(('mouth', 'behind', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'mouth'), True)	(('mouth', 'in front of', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'behind', 'eye'), True)	(('eye', 'behind', 'gill cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill cover', 'behind', 'eye'), True)	(('eye', 'in front of', 'gill cover'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'behind', 'eye'), True)	(('eye', 'behind', 'gill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill', 'behind', 'eye'), True)	(('eye', 'in front of', 'gill'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'inside', 'gill cover'), True)	(('gill cover', 'inside', 'gill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill', 'inside', 'gill cover'), True)	(('gill cover', 'contains', 'gill'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'pectoral fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pectoral fin', 'behind', 'gill cover'), True)	(('gill cover', 'in front of', 'pectoral fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'gill'), True)	(('gill', 'behind', 'pectoral fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pectoral fin', 'behind', 'gill'), True)	(('gill', 'in front of', 'pectoral fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'pelvic fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pelvic fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'pelvic fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'spiny'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spiny', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'spiny'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'above', 'pelvic fin'), True)	(('pelvic fin', 'above', 'spiny'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spiny', 'above', 'pelvic fin'), True)	(('pelvic fin', 'below', 'spiny'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'pelvic fin'), True)	(('pelvic fin', 'behind', 'anal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anal fin', 'behind', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'anal fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'spiny'), True)	(('spiny', 'behind', 'anal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anal fin', 'behind', 'spiny'), True)	(('spiny', 'in front of', 'anal fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'anal fin'), True)	(('anal fin', 'behind', 'caudal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('caudal fin', 'behind', 'anal fin'), True)	(('anal fin', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('gill cover', 'behind', 'eye')('eye', 'behind', 'nostril')	(('gill cover', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('gill cover', 'behind', 'eye')('eye', 'behind', 'mouth')	(('gill cover', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('gill', 'behind', 'eye')('eye', 'behind', 'nostril')	(('gill', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('gill', 'behind', 'eye')('eye', 'behind', 'mouth')	(('gill', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'behind', 'gill cover')('gill cover', 'behind', 'eye')	(('pectoral fin', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'gill cover')	(('pelvic fin', 'behind', 'gill cover'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'gill')	(('pelvic fin', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('spiny', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'gill cover')	(('spiny', 'behind', 'gill cover'), True)
Constraint 4 (True antecedent)	('spiny', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'gill')	(('spiny', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'pectoral fin')	(('anal fin', 'behind', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'pelvic fin')	(('caudal fin', 'behind', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'spiny')	(('caudal fin', 'behind', 'spiny'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'eye')('eye', 'in front of', 'gill cover')	(('nostril', 'in front of', 'gill cover'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'eye')('eye', 'in front of', 'gill')	(('nostril', 'in front of', 'gill'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'eye')('eye', 'in front of', 'gill cover')	(('mouth', 'in front of', 'gill cover'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'eye')('eye', 'in front of', 'gill')	(('mouth', 'in front of', 'gill'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'gill cover')('gill cover', 'in front of', 'pectoral fin')	(('eye', 'in front of', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('gill cover', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'pelvic fin')	(('gill cover', 'in front of', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('gill cover', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'spiny')	(('gill cover', 'in front of', 'spiny'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'pelvic fin')	(('gill', 'in front of', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'spiny')	(('gill', 'in front of', 'spiny'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'in front of', 'pelvic fin')('pelvic fin', 'in front of', 'anal fin')	(('pectoral fin', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'in front of', 'anal fin')('anal fin', 'in front of', 'caudal fin')	(('pelvic fin', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('spiny', 'in front of', 'anal fin')('anal fin', 'in front of', 'caudal fin')	(('spiny', 'in front of', 'caudal fin'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nostril'), False)	(('nostril', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'behind', 'eye'), False)	(('eye', 'in front of', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'behind', 'eye'), False)	(('eye', 'in front of', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'gill cover'), False)	(('gill cover', 'in front of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'gill'), False)	(('gill', 'in front of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill cover', 'inside', 'gill'), False)	(('gill', 'contains', 'gill cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill cover', 'behind', 'pectoral fin'), False)	(('pectoral fin', 'in front of', 'gill cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill', 'behind', 'pectoral fin'), False)	(('pectoral fin', 'in front of', 'gill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pectoral fin', 'behind', 'pelvic fin'), False)	(('pelvic fin', 'in front of', 'pectoral fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pectoral fin', 'behind', 'spiny'), False)	(('spiny', 'in front of', 'pectoral fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pelvic fin', 'above', 'spiny'), False)	(('spiny', 'below', 'pelvic fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pelvic fin', 'behind', 'anal fin'), False)	(('anal fin', 'in front of', 'pelvic fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spiny', 'behind', 'anal fin'), False)	(('anal fin', 'in front of', 'spiny'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anal fin', 'behind', 'caudal fin'), False)	(('caudal fin', 'in front of', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'behind', 'nostril'), True)	(('nostril', 'behind', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'behind', 'mouth'), True)	(('mouth', 'behind', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'behind', 'nostril'), True)	(('nostril', 'behind', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'behind', 'mouth'), True)	(('mouth', 'behind', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'eye'), True)	(('eye', 'behind', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'gill'), True)	(('gill', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'spiny'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'behind', 'gill'), True)	(('gill', 'behind', 'spiny'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'pelvic fin'), True)	(('pelvic fin', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'spiny'), True)	(('spiny', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'gill cover'), True)	(('gill cover', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'gill'), True)	(('gill', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'gill cover'), True)	(('gill cover', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'gill'), True)	(('gill', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'in front of', 'spiny'), True)	(('spiny', 'in front of', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'spiny'), True)	(('spiny', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'spiny'), False)
Constraint 4 (True antecedent)	('pectoral fin', 'behind', 'gill cover')('gill cover', 'behind', 'nostril')	(('pectoral fin', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'behind', 'gill cover')('gill cover', 'behind', 'mouth')	(('pectoral fin', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'eye')	(('pelvic fin', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'gill cover')('gill cover', 'behind', 'nostril')	(('pelvic fin', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'behind', 'gill cover')('gill cover', 'behind', 'mouth')	(('pelvic fin', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('spiny', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'eye')	(('spiny', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('spiny', 'behind', 'gill cover')('gill cover', 'behind', 'nostril')	(('spiny', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('spiny', 'behind', 'gill cover')('gill cover', 'behind', 'mouth')	(('spiny', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'gill cover')	(('anal fin', 'behind', 'gill cover'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'gill')	(('anal fin', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pectoral fin')('pectoral fin', 'behind', 'eye')	(('anal fin', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'pectoral fin')	(('caudal fin', 'behind', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'gill cover')	(('caudal fin', 'behind', 'gill cover'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'gill')	(('caudal fin', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'eye')('eye', 'in front of', 'pectoral fin')	(('nostril', 'in front of', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'gill cover')('gill cover', 'in front of', 'pelvic fin')	(('nostril', 'in front of', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'gill cover')('gill cover', 'in front of', 'spiny')	(('nostril', 'in front of', 'spiny'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'eye')('eye', 'in front of', 'pectoral fin')	(('mouth', 'in front of', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'gill cover')('gill cover', 'in front of', 'pelvic fin')	(('mouth', 'in front of', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'gill cover')('gill cover', 'in front of', 'spiny')	(('mouth', 'in front of', 'spiny'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'gill cover')('gill cover', 'in front of', 'pelvic fin')	(('eye', 'in front of', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'gill cover')('gill cover', 'in front of', 'spiny')	(('eye', 'in front of', 'spiny'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'anal fin')	(('eye', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('gill cover', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'anal fin')	(('gill cover', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('gill cover', 'in front of', 'pelvic fin')('pelvic fin', 'in front of', 'caudal fin')	(('gill cover', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'pectoral fin')('pectoral fin', 'in front of', 'anal fin')	(('gill', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'pelvic fin')('pelvic fin', 'in front of', 'caudal fin')	(('gill', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'in front of', 'pelvic fin')('pelvic fin', 'in front of', 'caudal fin')	(('pectoral fin', 'in front of', 'caudal fin'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'nostril'), True)	(('nostril', 'behind', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'behind', 'mouth'), True)	(('mouth', 'behind', 'pectoral fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'eye'), True)	(('eye', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'nostril'), True)	(('nostril', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'mouth'), True)	(('mouth', 'behind', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'behind', 'eye'), True)	(('eye', 'behind', 'spiny'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'behind', 'nostril'), True)	(('nostril', 'behind', 'spiny'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'behind', 'mouth'), True)	(('mouth', 'behind', 'spiny'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'gill'), True)	(('gill', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'eye'), True)	(('eye', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'gill cover'), True)	(('gill cover', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'gill'), True)	(('gill', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'spiny'), True)	(('spiny', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'spiny'), True)	(('spiny', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'spiny'), True)	(('spiny', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill cover', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'gill cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'pectoral fin'), False)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'nostril')	(('anal fin', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'mouth')	(('anal fin', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'eye')	(('caudal fin', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'nostril')	(('caudal fin', 'behind', 'nostril'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'mouth')	(('caudal fin', 'behind', 'mouth'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'eye')('eye', 'in front of', 'anal fin')	(('nostril', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('nostril', 'in front of', 'gill cover')('gill cover', 'in front of', 'caudal fin')	(('nostril', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'eye')('eye', 'in front of', 'anal fin')	(('mouth', 'in front of', 'anal fin'), True)
Constraint 4 (True antecedent)	('mouth', 'in front of', 'gill cover')('gill cover', 'in front of', 'caudal fin')	(('mouth', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'gill cover')('gill cover', 'in front of', 'caudal fin')	(('eye', 'in front of', 'caudal fin'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'nostril'), True)	(('nostril', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'mouth'), True)	(('mouth', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'eye'), True)	(('eye', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'nostril'), True)	(('nostril', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'mouth'), True)	(('mouth', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'nostril'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'eye'), False)
Round 5 ...
fish worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'spiny'), True)	(('spiny', 'behind', 'caudal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('caudal fin', 'behind', 'spiny'), True)	(('spiny', 'in front of', 'caudal fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'anal fin'), True)	(('anal fin', 'behind', 'caudal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('caudal fin', 'behind', 'anal fin'), True)	(('anal fin', 'in front of', 'caudal fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'pelvic fin'), True)	(('pelvic fin', 'behind', 'anal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anal fin', 'behind', 'pelvic fin'), True)	(('pelvic fin', 'in front of', 'anal fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'above', 'pelvic fin'), True)	(('pelvic fin', 'above', 'spiny'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spiny', 'above', 'pelvic fin'), True)	(('pelvic fin', 'below', 'spiny'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spiny', 'behind', 'gill'), True)	(('gill', 'behind', 'spiny'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spiny', 'behind', 'gill'), True)	(('gill', 'in front of', 'spiny'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'inside', 'gill cover'), True)	(('gill cover', 'inside', 'gill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill', 'inside', 'gill cover'), True)	(('gill cover', 'contains', 'gill'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'pelvic fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pelvic fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'in front of', 'pelvic fin'), True)
Constraint 1: x rln y <-> y rln x	(('pectoral fin', 'next to', 'gill cover'), True)	(('gill cover', 'next to', 'pectoral fin'), True)
Constraint 1: x rln y <-> y rln x	(('eye', 'next to', 'nostril'), True)	(('nostril', 'next to', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'above', 'mouth'), True)	(('mouth', 'above', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'above', 'mouth'), True)	(('mouth', 'below', 'nostril'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'spiny')('spiny', 'behind', 'gill')	(('caudal fin', 'behind', 'gill'), True)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'pelvic fin')	(('caudal fin', 'behind', 'pelvic fin'), True)
Constraint 4 (True antecedent)	('anal fin', 'behind', 'pelvic fin')('pelvic fin', 'behind', 'pectoral fin')	(('anal fin', 'behind', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('pelvic fin', 'in front of', 'anal fin')('anal fin', 'in front of', 'caudal fin')	(('pelvic fin', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('gill', 'in front of', 'spiny')('spiny', 'in front of', 'caudal fin')	(('gill', 'in front of', 'caudal fin'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'in front of', 'pelvic fin')('pelvic fin', 'in front of', 'anal fin')	(('pectoral fin', 'in front of', 'anal fin'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('spiny', 'behind', 'caudal fin'), False)	(('caudal fin', 'in front of', 'spiny'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anal fin', 'behind', 'caudal fin'), False)	(('caudal fin', 'in front of', 'anal fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pelvic fin', 'behind', 'anal fin'), False)	(('anal fin', 'in front of', 'pelvic fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pelvic fin', 'above', 'spiny'), False)	(('spiny', 'below', 'pelvic fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill', 'behind', 'spiny'), False)	(('spiny', 'in front of', 'gill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gill cover', 'inside', 'gill'), False)	(('gill', 'contains', 'gill cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pectoral fin', 'behind', 'pelvic fin'), False)	(('pelvic fin', 'in front of', 'pectoral fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nostril'), False)	(('nostril', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'gill'), True)	(('gill', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'pelvic fin'), True)	(('pelvic fin', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anal fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'anal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pelvic fin', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'pelvic fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('gill', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'gill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'in front of', 'anal fin'), True)	(('anal fin', 'in front of', 'pectoral fin'), False)
Constraint 4 (True antecedent)	('caudal fin', 'behind', 'anal fin')('anal fin', 'behind', 'pectoral fin')	(('caudal fin', 'behind', 'pectoral fin'), True)
Constraint 4 (True antecedent)	('pectoral fin', 'in front of', 'pelvic fin')('pelvic fin', 'in front of', 'caudal fin')	(('pectoral fin', 'in front of', 'caudal fin'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('caudal fin', 'behind', 'pectoral fin'), True)	(('pectoral fin', 'behind', 'caudal fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pectoral fin', 'in front of', 'caudal fin'), True)	(('caudal fin', 'in front of', 'pectoral fin'), False)
Round 4 ...
flower worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('flowerhead', 'above', 'stem'), True)	(('stem', 'above', 'flowerhead'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flowerhead', 'above', 'stem'), True)	(('stem', 'below', 'flowerhead'), True)
Constraint 1: x rln y <-> y rln x	(('leaf', 'connects', 'stem'), True)	(('stem', 'connects', 'leaf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flower', 'above', 'leaf'), True)	(('leaf', 'above', 'flower'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flower', 'above', 'leaf'), True)	(('leaf', 'below', 'flower'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seeds', 'inside', 'flowerhead'), True)	(('flowerhead', 'inside', 'seeds'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seeds', 'inside', 'flowerhead'), True)	(('flowerhead', 'contains', 'seeds'), True)
Constraint 1: x rln y <-> y rln x	(('petals', 'connects', 'flower'), True)	(('flower', 'connects', 'petals'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('stem', 'above', 'flowerhead'), False)	(('flowerhead', 'below', 'stem'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaf', 'above', 'flower'), False)	(('flower', 'below', 'leaf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flowerhead', 'inside', 'seeds'), False)	(('seeds', 'contains', 'flowerhead'), False)
Round 3 ...
flower worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('petals', 'surrounds', 'seeds'), True)	(('seeds', 'surrounds', 'petals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('petals', 'surrounds', 'seeds'), True)	(('seeds', 'surrounded by', 'petals'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seeds', 'part of', 'flowerhead'), True)	(('flowerhead', 'part of', 'seeds'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seeds', 'part of', 'flowerhead'), True)	(('flowerhead', 'has part', 'seeds'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('petals', 'part of', 'flowerhead'), True)	(('flowerhead', 'part of', 'petals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('petals', 'part of', 'flowerhead'), True)	(('flowerhead', 'has part', 'petals'), True)
Constraint 1: x rln y <-> y rln x	(('flowerhead', 'connects', 'stem'), True)	(('stem', 'connects', 'flowerhead'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flowerhead', 'above', 'stem'), True)	(('stem', 'above', 'flowerhead'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flowerhead', 'above', 'stem'), True)	(('stem', 'below', 'flowerhead'), True)
Constraint 1: x rln y <-> y rln x	(('leaf', 'connects', 'stem'), True)	(('stem', 'connects', 'leaf'), True)
Constraint 1: x rln y <-> y rln x	(('leaf', 'next to', 'stem'), True)	(('stem', 'next to', 'leaf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stem', 'above', 'roots'), True)	(('roots', 'above', 'stem'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stem', 'above', 'roots'), True)	(('roots', 'below', 'stem'), True)
Constraint 1: x rln y <-> y rln x	(('stem', 'connects', 'roots'), True)	(('roots', 'connects', 'stem'), True)
Constraint 4 (True antecedent)	('flowerhead', 'above', 'stem')('stem', 'above', 'roots')	(('flowerhead', 'above', 'roots'), True)
Constraint 4 (True antecedent)	('roots', 'below', 'stem')('stem', 'below', 'flowerhead')	(('roots', 'below', 'flowerhead'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('seeds', 'surrounds', 'petals'), False)	(('petals', 'surrounded by', 'seeds'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flowerhead', 'part of', 'seeds'), False)	(('seeds', 'has part', 'flowerhead'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flowerhead', 'part of', 'petals'), False)	(('petals', 'has part', 'flowerhead'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stem', 'above', 'flowerhead'), False)	(('flowerhead', 'below', 'stem'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roots', 'above', 'stem'), False)	(('stem', 'below', 'roots'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flowerhead', 'above', 'roots'), True)	(('roots', 'above', 'flowerhead'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roots', 'below', 'flowerhead'), True)	(('flowerhead', 'below', 'roots'), False)
Round 3 ...
flower worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('petals', 'surrounds', 'seeds'), True)	(('seeds', 'surrounds', 'petals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('petals', 'surrounds', 'seeds'), True)	(('seeds', 'surrounded by', 'petals'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('petals', 'above', 'stem'), True)	(('stem', 'above', 'petals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('petals', 'above', 'stem'), True)	(('stem', 'below', 'petals'), True)
Constraint 1: x rln y <-> y rln x	(('petals', 'connects', 'stem'), True)	(('stem', 'connects', 'petals'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('petals', 'requires', 'stem'), True)	(('stem', 'requires', 'petals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('petals', 'requires', 'stem'), True)	(('stem', 'required by', 'petals'), True)
Constraint 1: x rln y <-> y rln x	(('leaf', 'connects', 'stem'), True)	(('stem', 'connects', 'leaf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stem', 'above', 'roots'), True)	(('roots', 'above', 'stem'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stem', 'above', 'roots'), True)	(('roots', 'below', 'stem'), True)
Constraint 1: x rln y <-> y rln x	(('stem', 'connects', 'roots'), True)	(('roots', 'connects', 'stem'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stem', 'requires', 'roots'), True)	(('roots', 'requires', 'stem'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stem', 'requires', 'roots'), True)	(('roots', 'required by', 'stem'), True)
Constraint 4 (True antecedent)	('petals', 'above', 'stem')('stem', 'above', 'roots')	(('petals', 'above', 'roots'), True)
Constraint 4 (True antecedent)	('roots', 'below', 'stem')('stem', 'below', 'petals')	(('roots', 'below', 'petals'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('seeds', 'surrounds', 'petals'), False)	(('petals', 'surrounded by', 'seeds'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stem', 'above', 'petals'), False)	(('petals', 'below', 'stem'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stem', 'requires', 'petals'), False)	(('petals', 'required by', 'stem'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roots', 'above', 'stem'), False)	(('stem', 'below', 'roots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roots', 'requires', 'stem'), False)	(('stem', 'required by', 'roots'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('petals', 'above', 'roots'), True)	(('roots', 'above', 'petals'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roots', 'below', 'petals'), True)	(('petals', 'below', 'roots'), False)
Round 3 ...
kayak worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'deck'), True)	(('deck', 'behind', 'stern'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'behind', 'deck'), True)	(('deck', 'in front of', 'stern'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handles', 'part of', 'deck'), True)	(('deck', 'part of', 'handles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handles', 'part of', 'deck'), True)	(('deck', 'has part', 'handles'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('foot rests', 'inside', 'deck'), True)	(('deck', 'inside', 'foot rests'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot rests', 'inside', 'deck'), True)	(('deck', 'contains', 'foot rests'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'behind', 'foot rests'), True)	(('foot rests', 'behind', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'behind', 'foot rests'), True)	(('foot rests', 'in front of', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'inside', 'deck'), True)	(('deck', 'inside', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'inside', 'deck'), True)	(('deck', 'contains', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('deck', 'behind', 'bow'), True)	(('bow', 'behind', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'behind', 'bow'), True)	(('bow', 'in front of', 'deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'part of', 'deck'), True)	(('deck', 'part of', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'part of', 'deck'), True)	(('deck', 'has part', 'cockpit'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'inside', 'cockpit'), True)	(('cockpit', 'inside', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'inside', 'cockpit'), True)	(('cockpit', 'contains', 'seat'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'deck')('deck', 'behind', 'bow')	(('stern', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'deck')('deck', 'in front of', 'stern')	(('bow', 'in front of', 'stern'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'behind', 'stern'), False)	(('stern', 'in front of', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'part of', 'handles'), False)	(('handles', 'has part', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'inside', 'foot rests'), False)	(('foot rests', 'contains', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot rests', 'behind', 'seat'), False)	(('seat', 'in front of', 'foot rests'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'inside', 'seat'), False)	(('seat', 'contains', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'behind', 'deck'), False)	(('deck', 'in front of', 'bow'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'part of', 'cockpit'), False)	(('cockpit', 'has part', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'inside', 'seat'), False)	(('seat', 'contains', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'bow'), True)	(('bow', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'stern'), True)	(('stern', 'in front of', 'bow'), False)
Round 3 ...
kayak worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('stern', 'connects', 'rear handle'), True)	(('rear handle', 'connects', 'stern'), True)
Constraint 1: x rln y <-> y rln x	(('rear handle', 'connects', 'rear deck'), True)	(('rear deck', 'connects', 'rear handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rear handle', 'behind', 'rear deck'), True)	(('rear deck', 'behind', 'rear handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rear handle', 'behind', 'rear deck'), True)	(('rear deck', 'in front of', 'rear handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rear deck', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'rear deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rear deck', 'behind', 'cockpit'), True)	(('cockpit', 'in front of', 'rear deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'inside', 'cockpit'), True)	(('cockpit', 'inside', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'inside', 'cockpit'), True)	(('cockpit', 'contains', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'behind', 'front deck'), True)	(('front deck', 'behind', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'behind', 'front deck'), True)	(('front deck', 'in front of', 'cockpit'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'rear handle'), True)	(('rear handle', 'behind', 'stern'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'behind', 'rear handle'), True)	(('rear handle', 'in front of', 'stern'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'behind', 'foot rests'), True)	(('foot rests', 'behind', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'behind', 'foot rests'), True)	(('foot rests', 'in front of', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('foot rests', 'inside', 'cockpit'), True)	(('cockpit', 'inside', 'foot rests'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot rests', 'inside', 'cockpit'), True)	(('cockpit', 'contains', 'foot rests'), True)
Constraint 1: x rln y <-> y rln x	(('front deck', 'connects', 'front handle'), True)	(('front handle', 'connects', 'front deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front deck', 'behind', 'front handle'), True)	(('front handle', 'behind', 'front deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front deck', 'behind', 'front handle'), True)	(('front handle', 'in front of', 'front deck'), True)
Constraint 1: x rln y <-> y rln x	(('front handle', 'connects', 'bow'), True)	(('bow', 'connects', 'front handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front handle', 'behind', 'bow'), True)	(('bow', 'behind', 'front handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front handle', 'behind', 'bow'), True)	(('bow', 'in front of', 'front handle'), True)
Constraint 4 (True antecedent)	('rear handle', 'behind', 'rear deck')('rear deck', 'behind', 'cockpit')	(('rear handle', 'behind', 'cockpit'), True)
Constraint 4 (True antecedent)	('rear deck', 'behind', 'cockpit')('cockpit', 'behind', 'front deck')	(('rear deck', 'behind', 'front deck'), True)
Constraint 4 (True antecedent)	('cockpit', 'behind', 'front deck')('front deck', 'behind', 'front handle')	(('cockpit', 'behind', 'front handle'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'rear handle')('rear handle', 'behind', 'rear deck')	(('stern', 'behind', 'rear deck'), True)
Constraint 4 (True antecedent)	('front deck', 'behind', 'front handle')('front handle', 'behind', 'bow')	(('front deck', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('rear deck', 'in front of', 'rear handle')('rear handle', 'in front of', 'stern')	(('rear deck', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('cockpit', 'in front of', 'rear deck')('rear deck', 'in front of', 'rear handle')	(('cockpit', 'in front of', 'rear handle'), True)
Constraint 4 (True antecedent)	('front deck', 'in front of', 'cockpit')('cockpit', 'in front of', 'rear deck')	(('front deck', 'in front of', 'rear deck'), True)
Constraint 4 (True antecedent)	('front handle', 'in front of', 'front deck')('front deck', 'in front of', 'cockpit')	(('front handle', 'in front of', 'cockpit'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'front handle')('front handle', 'in front of', 'front deck')	(('bow', 'in front of', 'front deck'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('rear deck', 'behind', 'rear handle'), False)	(('rear handle', 'in front of', 'rear deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'behind', 'rear deck'), False)	(('rear deck', 'in front of', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'inside', 'seat'), False)	(('seat', 'contains', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front deck', 'behind', 'cockpit'), False)	(('cockpit', 'in front of', 'front deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rear handle', 'behind', 'stern'), False)	(('stern', 'in front of', 'rear handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot rests', 'behind', 'seat'), False)	(('seat', 'in front of', 'foot rests'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'inside', 'foot rests'), False)	(('foot rests', 'contains', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front handle', 'behind', 'front deck'), False)	(('front deck', 'in front of', 'front handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'behind', 'front handle'), False)	(('front handle', 'in front of', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear handle', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'rear handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear deck', 'behind', 'front deck'), True)	(('front deck', 'behind', 'rear deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'behind', 'front handle'), True)	(('front handle', 'behind', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'rear deck'), True)	(('rear deck', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front deck', 'behind', 'bow'), True)	(('bow', 'behind', 'front deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear deck', 'in front of', 'stern'), True)	(('stern', 'in front of', 'rear deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'in front of', 'rear handle'), True)	(('rear handle', 'in front of', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front deck', 'in front of', 'rear deck'), True)	(('rear deck', 'in front of', 'front deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front handle', 'in front of', 'cockpit'), True)	(('cockpit', 'in front of', 'front handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'front deck'), True)	(('front deck', 'in front of', 'bow'), False)
Constraint 4 (True antecedent)	('rear handle', 'behind', 'rear deck')('rear deck', 'behind', 'front deck')	(('rear handle', 'behind', 'front deck'), True)
Constraint 4 (True antecedent)	('rear handle', 'behind', 'cockpit')('cockpit', 'behind', 'front handle')	(('rear handle', 'behind', 'front handle'), True)
Constraint 4 (True antecedent)	('rear deck', 'behind', 'cockpit')('cockpit', 'behind', 'front handle')	(('rear deck', 'behind', 'front handle'), True)
Constraint 4 (True antecedent)	('rear deck', 'behind', 'front deck')('front deck', 'behind', 'bow')	(('rear deck', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('cockpit', 'behind', 'front deck')('front deck', 'behind', 'bow')	(('cockpit', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'rear handle')('rear handle', 'behind', 'cockpit')	(('stern', 'behind', 'cockpit'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'rear deck')('rear deck', 'behind', 'front deck')	(('stern', 'behind', 'front deck'), True)
Constraint 4 (True antecedent)	('cockpit', 'in front of', 'rear deck')('rear deck', 'in front of', 'stern')	(('cockpit', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('front deck', 'in front of', 'cockpit')('cockpit', 'in front of', 'rear handle')	(('front deck', 'in front of', 'rear handle'), True)
Constraint 4 (True antecedent)	('front deck', 'in front of', 'rear deck')('rear deck', 'in front of', 'stern')	(('front deck', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('front handle', 'in front of', 'front deck')('front deck', 'in front of', 'rear deck')	(('front handle', 'in front of', 'rear deck'), True)
Constraint 4 (True antecedent)	('front handle', 'in front of', 'cockpit')('cockpit', 'in front of', 'rear handle')	(('front handle', 'in front of', 'rear handle'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'front handle')('front handle', 'in front of', 'cockpit')	(('bow', 'in front of', 'cockpit'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'front deck')('front deck', 'in front of', 'rear deck')	(('bow', 'in front of', 'rear deck'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('rear handle', 'behind', 'front deck'), True)	(('front deck', 'behind', 'rear handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear handle', 'behind', 'front handle'), True)	(('front handle', 'behind', 'rear handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear deck', 'behind', 'front handle'), True)	(('front handle', 'behind', 'rear deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear deck', 'behind', 'bow'), True)	(('bow', 'behind', 'rear deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'behind', 'bow'), True)	(('bow', 'behind', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'front deck'), True)	(('front deck', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'in front of', 'stern'), True)	(('stern', 'in front of', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front deck', 'in front of', 'rear handle'), True)	(('rear handle', 'in front of', 'front deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front deck', 'in front of', 'stern'), True)	(('stern', 'in front of', 'front deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front handle', 'in front of', 'rear deck'), True)	(('rear deck', 'in front of', 'front handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front handle', 'in front of', 'rear handle'), True)	(('rear handle', 'in front of', 'front handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'cockpit'), True)	(('cockpit', 'in front of', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'rear deck'), True)	(('rear deck', 'in front of', 'bow'), False)
Constraint 4 (True antecedent)	('rear handle', 'behind', 'rear deck')('rear deck', 'behind', 'bow')	(('rear handle', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'rear handle')('rear handle', 'behind', 'front handle')	(('stern', 'behind', 'front handle'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'rear deck')('rear deck', 'behind', 'bow')	(('stern', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('front handle', 'in front of', 'front deck')('front deck', 'in front of', 'stern')	(('front handle', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'front handle')('front handle', 'in front of', 'rear handle')	(('bow', 'in front of', 'rear handle'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'front deck')('front deck', 'in front of', 'stern')	(('bow', 'in front of', 'stern'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('rear handle', 'behind', 'bow'), True)	(('bow', 'behind', 'rear handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'front handle'), True)	(('front handle', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'bow'), True)	(('bow', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front handle', 'in front of', 'stern'), True)	(('stern', 'in front of', 'front handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'rear handle'), True)	(('rear handle', 'in front of', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'stern'), True)	(('stern', 'in front of', 'bow'), False)
Round 5 ...
kayak worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'rear deck'), True)	(('rear deck', 'behind', 'stern'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'behind', 'rear deck'), True)	(('rear deck', 'in front of', 'stern'), True)
Constraint 1: x rln y <-> y rln x	(('stern', 'connects', 'rear deck'), True)	(('rear deck', 'connects', 'stern'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handles', 'part of', 'stern'), True)	(('stern', 'part of', 'handles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handles', 'part of', 'stern'), True)	(('stern', 'has part', 'handles'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rear deck', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'rear deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rear deck', 'behind', 'cockpit'), True)	(('cockpit', 'in front of', 'rear deck'), True)
Constraint 1: x rln y <-> y rln x	(('rear deck', 'connects', 'cockpit'), True)	(('cockpit', 'connects', 'rear deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'inside', 'cockpit'), True)	(('cockpit', 'inside', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'inside', 'cockpit'), True)	(('cockpit', 'contains', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'next to', 'foot rests'), True)	(('foot rests', 'next to', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('foot rests', 'inside', 'cockpit'), True)	(('cockpit', 'inside', 'foot rests'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot rests', 'inside', 'cockpit'), True)	(('cockpit', 'contains', 'foot rests'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'behind', 'front deck'), True)	(('front deck', 'behind', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'behind', 'front deck'), True)	(('front deck', 'in front of', 'cockpit'), True)
Constraint 1: x rln y <-> y rln x	(('cockpit', 'connects', 'front deck'), True)	(('front deck', 'connects', 'cockpit'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front deck', 'behind', 'bow'), True)	(('bow', 'behind', 'front deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front deck', 'behind', 'bow'), True)	(('bow', 'in front of', 'front deck'), True)
Constraint 1: x rln y <-> y rln x	(('front deck', 'connects', 'bow'), True)	(('bow', 'connects', 'front deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handles', 'part of', 'bow'), True)	(('bow', 'part of', 'handles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handles', 'part of', 'bow'), True)	(('bow', 'has part', 'handles'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'rear deck')('rear deck', 'behind', 'cockpit')	(('stern', 'behind', 'cockpit'), True)
Constraint 4 (True antecedent)	('rear deck', 'behind', 'cockpit')('cockpit', 'behind', 'front deck')	(('rear deck', 'behind', 'front deck'), True)
Constraint 4 (True antecedent)	('cockpit', 'behind', 'front deck')('front deck', 'behind', 'bow')	(('cockpit', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('cockpit', 'in front of', 'rear deck')('rear deck', 'in front of', 'stern')	(('cockpit', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('front deck', 'in front of', 'cockpit')('cockpit', 'in front of', 'rear deck')	(('front deck', 'in front of', 'rear deck'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'front deck')('front deck', 'in front of', 'cockpit')	(('bow', 'in front of', 'cockpit'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('rear deck', 'behind', 'stern'), False)	(('stern', 'in front of', 'rear deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'part of', 'handles'), False)	(('handles', 'has part', 'stern'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'behind', 'rear deck'), False)	(('rear deck', 'in front of', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'inside', 'seat'), False)	(('seat', 'contains', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'inside', 'foot rests'), False)	(('foot rests', 'contains', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front deck', 'behind', 'cockpit'), False)	(('cockpit', 'in front of', 'front deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'behind', 'front deck'), False)	(('front deck', 'in front of', 'bow'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'part of', 'handles'), False)	(('handles', 'has part', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear deck', 'behind', 'front deck'), True)	(('front deck', 'behind', 'rear deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'behind', 'bow'), True)	(('bow', 'behind', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'in front of', 'stern'), True)	(('stern', 'in front of', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front deck', 'in front of', 'rear deck'), True)	(('rear deck', 'in front of', 'front deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'cockpit'), True)	(('cockpit', 'in front of', 'bow'), False)
Constraint 4 (True antecedent)	('stern', 'behind', 'rear deck')('rear deck', 'behind', 'front deck')	(('stern', 'behind', 'front deck'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'cockpit')('cockpit', 'behind', 'bow')	(('stern', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('rear deck', 'behind', 'cockpit')('cockpit', 'behind', 'bow')	(('rear deck', 'behind', 'bow'), True)
Constraint 4 (True antecedent)	('front deck', 'in front of', 'cockpit')('cockpit', 'in front of', 'stern')	(('front deck', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'front deck')('front deck', 'in front of', 'rear deck')	(('bow', 'in front of', 'rear deck'), True)
Constraint 4 (True antecedent)	('bow', 'in front of', 'cockpit')('cockpit', 'in front of', 'stern')	(('bow', 'in front of', 'stern'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'front deck'), True)	(('front deck', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'bow'), True)	(('bow', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear deck', 'behind', 'bow'), True)	(('bow', 'behind', 'rear deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front deck', 'in front of', 'stern'), True)	(('stern', 'in front of', 'front deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'rear deck'), True)	(('rear deck', 'in front of', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'in front of', 'stern'), True)	(('stern', 'in front of', 'bow'), False)
Round 4 ...
kite worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('kite spool', 'connects', 'kite line'), True)	(('kite line', 'connects', 'kite spool'), True)
Constraint 1: x rln y <-> y rln x	(('kite line', 'connects', 'bridle'), True)	(('bridle', 'connects', 'kite line'), True)
Constraint 1: x rln y <-> y rln x	(('bridle', 'connects', 'spine'), True)	(('spine', 'connects', 'bridle'), True)
Constraint 1: x rln y <-> y rln x	(('spine', 'connects', 'tail'), True)	(('tail', 'connects', 'spine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'above', 'tail'), True)	(('tail', 'above', 'spine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spine', 'above', 'tail'), True)	(('tail', 'below', 'spine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('kite sail', 'above', 'tail'), True)	(('tail', 'above', 'kite sail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kite sail', 'above', 'tail'), True)	(('tail', 'below', 'kite sail'), True)
Constraint 1: x rln y <-> y rln x	(('kite sail', 'connects', 'tail'), True)	(('tail', 'connects', 'kite sail'), True)
Constraint 1: x rln y <-> y rln x	(('spine', 'connects', 'kite sail'), True)	(('kite sail', 'connects', 'spine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'behind', 'kite sail'), True)	(('kite sail', 'behind', 'spine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spine', 'behind', 'kite sail'), True)	(('kite sail', 'in front of', 'spine'), True)
Constraint 1: x rln y <-> y rln x	(('spine', 'connects', 'cross spar'), True)	(('cross spar', 'connects', 'spine'), True)
Constraint 1: x rln y <-> y rln x	(('cross spar', 'connects', 'kite sail'), True)	(('kite sail', 'connects', 'cross spar'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cross spar', 'behind', 'kite sail'), True)	(('kite sail', 'behind', 'cross spar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cross spar', 'behind', 'kite sail'), True)	(('kite sail', 'in front of', 'cross spar'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'spine'), False)	(('spine', 'below', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'kite sail'), False)	(('kite sail', 'below', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kite sail', 'behind', 'spine'), False)	(('spine', 'in front of', 'kite sail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kite sail', 'behind', 'cross spar'), False)	(('cross spar', 'in front of', 'kite sail'), False)
Round 3 ...
kite worker_109...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('cross spar', 'behind', 'kite sail'), True)	(('kite sail', 'behind', 'cross spar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cross spar', 'behind', 'kite sail'), True)	(('kite sail', 'in front of', 'cross spar'), True)
Constraint 1: x rln y <-> y rln x	(('cross spar', 'connects', 'spine'), True)	(('spine', 'connects', 'cross spar'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'behind', 'kite sail'), True)	(('kite sail', 'behind', 'spine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spine', 'behind', 'kite sail'), True)	(('kite sail', 'in front of', 'spine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'above', 'bridle'), True)	(('bridle', 'above', 'spine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spine', 'above', 'bridle'), True)	(('bridle', 'below', 'spine'), True)
Constraint 1: x rln y <-> y rln x	(('bridle', 'connects', 'spine'), True)	(('spine', 'connects', 'bridle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'above', 'tail'), True)	(('tail', 'above', 'spine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spine', 'above', 'tail'), True)	(('tail', 'below', 'spine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bridle', 'above', 'kite line'), True)	(('kite line', 'above', 'bridle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridle', 'above', 'kite line'), True)	(('kite line', 'below', 'bridle'), True)
Constraint 1: x rln y <-> y rln x	(('kite line', 'connects', 'bridle'), True)	(('bridle', 'connects', 'kite line'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('kite line', 'above', 'kite spool'), True)	(('kite spool', 'above', 'kite line'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kite line', 'above', 'kite spool'), True)	(('kite spool', 'below', 'kite line'), True)
Constraint 1: x rln y <-> y rln x	(('kite spool', 'connects', 'kite line'), True)	(('kite line', 'connects', 'kite spool'), True)
Constraint 4 (True antecedent)	('spine', 'above', 'bridle')('bridle', 'above', 'kite line')	(('spine', 'above', 'kite line'), True)
Constraint 4 (True antecedent)	('bridle', 'above', 'kite line')('kite line', 'above', 'kite spool')	(('bridle', 'above', 'kite spool'), True)
Constraint 4 (True antecedent)	('kite line', 'below', 'bridle')('bridle', 'below', 'spine')	(('kite line', 'below', 'spine'), True)
Constraint 4 (True antecedent)	('kite spool', 'below', 'kite line')('kite line', 'below', 'bridle')	(('kite spool', 'below', 'bridle'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('kite sail', 'behind', 'cross spar'), False)	(('cross spar', 'in front of', 'kite sail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kite sail', 'behind', 'spine'), False)	(('spine', 'in front of', 'kite sail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridle', 'above', 'spine'), False)	(('spine', 'below', 'bridle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'spine'), False)	(('spine', 'below', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kite line', 'above', 'bridle'), False)	(('bridle', 'below', 'kite line'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kite spool', 'above', 'kite line'), False)	(('kite line', 'below', 'kite spool'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'above', 'kite line'), True)	(('kite line', 'above', 'spine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bridle', 'above', 'kite spool'), True)	(('kite spool', 'above', 'bridle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('kite line', 'below', 'spine'), True)	(('spine', 'below', 'kite line'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('kite spool', 'below', 'bridle'), True)	(('bridle', 'below', 'kite spool'), False)
Constraint 4 (True antecedent)	('spine', 'above', 'bridle')('bridle', 'above', 'kite spool')	(('spine', 'above', 'kite spool'), True)
Constraint 4 (True antecedent)	('kite spool', 'below', 'kite line')('kite line', 'below', 'spine')	(('kite spool', 'below', 'spine'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'above', 'kite spool'), True)	(('kite spool', 'above', 'spine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('kite spool', 'below', 'spine'), True)	(('spine', 'below', 'kite spool'), False)
Round 4 ...
kite worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('cross spar', 'connects', 'kite sail'), True)	(('kite sail', 'connects', 'cross spar'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('kite sail', 'surrounds', 'cross spar'), True)	(('cross spar', 'surrounds', 'kite sail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kite sail', 'surrounds', 'cross spar'), True)	(('cross spar', 'surrounded by', 'kite sail'), True)
Constraint 1: x rln y <-> y rln x	(('kite sail', 'connects', 'tail'), True)	(('tail', 'connects', 'kite sail'), True)
Constraint 1: x rln y <-> y rln x	(('kite sail', 'connects', 'spine'), True)	(('spine', 'connects', 'kite sail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('kite sail', 'surrounds', 'spine'), True)	(('spine', 'surrounds', 'kite sail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kite sail', 'surrounds', 'spine'), True)	(('spine', 'surrounded by', 'kite sail'), True)
Constraint 1: x rln y <-> y rln x	(('spine', 'connects', 'bridle'), True)	(('bridle', 'connects', 'spine'), True)
Constraint 1: x rln y <-> y rln x	(('bridle', 'connects', 'kite line'), True)	(('kite line', 'connects', 'bridle'), True)
Constraint 1: x rln y <-> y rln x	(('kite line', 'connects', 'kite spool'), True)	(('kite spool', 'connects', 'kite line'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cross spar', 'surrounds', 'kite sail'), False)	(('kite sail', 'surrounded by', 'cross spar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spine', 'surrounds', 'kite sail'), False)	(('kite sail', 'surrounded by', 'spine'), False)
Round 3 ...
microphone worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('on-off switch', 'part of', 'housing'), True)	(('housing', 'part of', 'on-off switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('on-off switch', 'part of', 'housing'), True)	(('housing', 'has part', 'on-off switch'), True)
Constraint 1: x rln y <-> y rln x	(('housing', 'connects', 'windscreen'), True)	(('windscreen', 'connects', 'housing'), True)
Constraint 1: x rln y <-> y rln x	(('housing', 'connects', 'connector'), True)	(('connector', 'connects', 'housing'), True)
Constraint 1: x rln y <-> y rln x	(('connector', 'connects', 'cable'), True)	(('cable', 'connects', 'connector'), True)
Constraint 1: x rln y <-> y rln x	(('cable', 'connects', 'plug'), True)	(('plug', 'connects', 'cable'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('housing', 'part of', 'on-off switch'), False)	(('on-off switch', 'has part', 'housing'), False)
Round 3 ...
microphone worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('windscreen', 'connects', 'housing'), True)	(('housing', 'connects', 'windscreen'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('on-off switch', 'part of', 'housing'), True)	(('housing', 'part of', 'on-off switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('on-off switch', 'part of', 'housing'), True)	(('housing', 'has part', 'on-off switch'), True)
Constraint 1: x rln y <-> y rln x	(('housing', 'connects', 'connector'), True)	(('connector', 'connects', 'housing'), True)
Constraint 1: x rln y <-> y rln x	(('plug', 'connects', 'cable'), True)	(('cable', 'connects', 'plug'), True)
Constraint 1: x rln y <-> y rln x	(('connector', 'connects', 'plug'), True)	(('plug', 'connects', 'connector'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('housing', 'part of', 'on-off switch'), False)	(('on-off switch', 'has part', 'housing'), False)
Round 3 ...
microphone worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('housing', 'connects', 'on-off switch'), True)	(('on-off switch', 'connects', 'housing'), True)
Constraint 1: x rln y <-> y rln x	(('windscreen', 'connects', 'housing'), True)	(('housing', 'connects', 'windscreen'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windscreen', 'above', 'housing'), True)	(('housing', 'above', 'windscreen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windscreen', 'above', 'housing'), True)	(('housing', 'below', 'windscreen'), True)
Constraint 1: x rln y <-> y rln x	(('housing', 'connects', 'connector'), True)	(('connector', 'connects', 'housing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('housing', 'above', 'connector'), True)	(('connector', 'above', 'housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('housing', 'above', 'connector'), True)	(('connector', 'below', 'housing'), True)
Constraint 1: x rln y <-> y rln x	(('connector', 'connects', 'cable'), True)	(('cable', 'connects', 'connector'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cable', 'above', 'connector'), True)	(('connector', 'above', 'cable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable', 'above', 'connector'), True)	(('connector', 'below', 'cable'), True)
Constraint 1: x rln y <-> y rln x	(('plug', 'connects', 'cable'), True)	(('cable', 'connects', 'plug'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cable', 'above', 'plug'), True)	(('plug', 'above', 'cable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable', 'above', 'plug'), True)	(('plug', 'below', 'cable'), True)
Constraint 4 (True antecedent)	('windscreen', 'above', 'housing')('housing', 'above', 'connector')	(('windscreen', 'above', 'connector'), True)
Constraint 4 (True antecedent)	('connector', 'below', 'housing')('housing', 'below', 'windscreen')	(('connector', 'below', 'windscreen'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('housing', 'above', 'windscreen'), False)	(('windscreen', 'below', 'housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('connector', 'above', 'housing'), False)	(('housing', 'below', 'connector'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('connector', 'above', 'cable'), False)	(('cable', 'below', 'connector'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('plug', 'above', 'cable'), False)	(('cable', 'below', 'plug'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('windscreen', 'above', 'connector'), True)	(('connector', 'above', 'windscreen'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('connector', 'below', 'windscreen'), True)	(('windscreen', 'below', 'connector'), False)
Round 3 ...
pencil worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lead', 'inside', 'body'), True)	(('body', 'inside', 'lead'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lead', 'inside', 'body'), True)	(('body', 'contains', 'lead'), True)
Constraint 1: x rln y <-> y rln x	(('wood', 'connects', 'body'), True)	(('body', 'connects', 'wood'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ferrule', 'behind', 'body'), True)	(('body', 'behind', 'ferrule'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ferrule', 'behind', 'body'), True)	(('body', 'in front of', 'ferrule'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eraser', 'behind', 'ferrule'), True)	(('ferrule', 'behind', 'eraser'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eraser', 'behind', 'ferrule'), True)	(('ferrule', 'in front of', 'eraser'), True)
Constraint 4 (True antecedent)	('eraser', 'behind', 'ferrule')('ferrule', 'behind', 'body')	(('eraser', 'behind', 'body'), True)
Constraint 4 (True antecedent)	('body', 'in front of', 'ferrule')('ferrule', 'in front of', 'eraser')	(('body', 'in front of', 'eraser'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'inside', 'lead'), False)	(('lead', 'contains', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'ferrule'), False)	(('ferrule', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ferrule', 'behind', 'eraser'), False)	(('eraser', 'in front of', 'ferrule'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eraser', 'behind', 'body'), True)	(('body', 'behind', 'eraser'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'in front of', 'eraser'), True)	(('eraser', 'in front of', 'body'), False)
Round 3 ...
pencil worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('wood', 'behind', 'lead'), True)	(('lead', 'behind', 'wood'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wood', 'behind', 'lead'), True)	(('lead', 'in front of', 'wood'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'wood'), True)	(('wood', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'wood'), True)	(('wood', 'in front of', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ferrule', 'behind', 'body'), True)	(('body', 'behind', 'ferrule'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ferrule', 'behind', 'body'), True)	(('body', 'in front of', 'ferrule'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eraser', 'behind', 'ferrule'), True)	(('ferrule', 'behind', 'eraser'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eraser', 'behind', 'ferrule'), True)	(('ferrule', 'in front of', 'eraser'), True)
Constraint 4 (True antecedent)	('body', 'behind', 'wood')('wood', 'behind', 'lead')	(('body', 'behind', 'lead'), True)
Constraint 4 (True antecedent)	('ferrule', 'behind', 'body')('body', 'behind', 'wood')	(('ferrule', 'behind', 'wood'), True)
Constraint 4 (True antecedent)	('eraser', 'behind', 'ferrule')('ferrule', 'behind', 'body')	(('eraser', 'behind', 'body'), True)
Constraint 4 (True antecedent)	('lead', 'in front of', 'wood')('wood', 'in front of', 'body')	(('lead', 'in front of', 'body'), True)
Constraint 4 (True antecedent)	('wood', 'in front of', 'body')('body', 'in front of', 'ferrule')	(('wood', 'in front of', 'ferrule'), True)
Constraint 4 (True antecedent)	('body', 'in front of', 'ferrule')('ferrule', 'in front of', 'eraser')	(('body', 'in front of', 'eraser'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lead', 'behind', 'wood'), False)	(('wood', 'in front of', 'lead'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wood', 'behind', 'body'), False)	(('body', 'in front of', 'wood'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'ferrule'), False)	(('ferrule', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ferrule', 'behind', 'eraser'), False)	(('eraser', 'in front of', 'ferrule'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'lead'), True)	(('lead', 'behind', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ferrule', 'behind', 'wood'), True)	(('wood', 'behind', 'ferrule'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eraser', 'behind', 'body'), True)	(('body', 'behind', 'eraser'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lead', 'in front of', 'body'), True)	(('body', 'in front of', 'lead'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wood', 'in front of', 'ferrule'), True)	(('ferrule', 'in front of', 'wood'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'in front of', 'eraser'), True)	(('eraser', 'in front of', 'body'), False)
Constraint 4 (True antecedent)	('ferrule', 'behind', 'body')('body', 'behind', 'lead')	(('ferrule', 'behind', 'lead'), True)
Constraint 4 (True antecedent)	('eraser', 'behind', 'ferrule')('ferrule', 'behind', 'wood')	(('eraser', 'behind', 'wood'), True)
Constraint 4 (True antecedent)	('eraser', 'behind', 'body')('body', 'behind', 'lead')	(('eraser', 'behind', 'lead'), True)
Constraint 4 (True antecedent)	('lead', 'in front of', 'wood')('wood', 'in front of', 'ferrule')	(('lead', 'in front of', 'ferrule'), True)
Constraint 4 (True antecedent)	('lead', 'in front of', 'body')('body', 'in front of', 'eraser')	(('lead', 'in front of', 'eraser'), True)
Constraint 4 (True antecedent)	('wood', 'in front of', 'body')('body', 'in front of', 'eraser')	(('wood', 'in front of', 'eraser'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ferrule', 'behind', 'lead'), True)	(('lead', 'behind', 'ferrule'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eraser', 'behind', 'wood'), True)	(('wood', 'behind', 'eraser'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eraser', 'behind', 'lead'), True)	(('lead', 'behind', 'eraser'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lead', 'in front of', 'ferrule'), True)	(('ferrule', 'in front of', 'lead'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lead', 'in front of', 'eraser'), True)	(('eraser', 'in front of', 'lead'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wood', 'in front of', 'eraser'), True)	(('eraser', 'in front of', 'wood'), False)
Round 4 ...
pencil worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lead', 'inside', 'wood'), True)	(('wood', 'inside', 'lead'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lead', 'inside', 'wood'), True)	(('wood', 'contains', 'lead'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wood', 'part of', 'body'), True)	(('body', 'part of', 'wood'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wood', 'part of', 'body'), True)	(('body', 'has part', 'wood'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'ferrule'), True)	(('ferrule', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('ferrule', 'connects', 'eraser'), True)	(('eraser', 'connects', 'ferrule'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('wood', 'inside', 'lead'), False)	(('lead', 'contains', 'wood'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'wood'), False)	(('wood', 'has part', 'body'), False)
Round 3 ...
ship worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('accomodation bridge', 'next to', 'funnel'), True)	(('funnel', 'next to', 'accomodation bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('accomodation bridge', 'behind', 'forward'), True)	(('forward', 'behind', 'accomodation bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('accomodation bridge', 'behind', 'forward'), True)	(('forward', 'in front of', 'accomodation bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('accomodation bridge', 'above', 'deck'), True)	(('deck', 'above', 'accomodation bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('accomodation bridge', 'above', 'deck'), True)	(('deck', 'below', 'accomodation bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('accomodation bridge', 'above', 'hull'), True)	(('hull', 'above', 'accomodation bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('accomodation bridge', 'above', 'hull'), True)	(('hull', 'below', 'accomodation bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'accomodation bridge'), True)	(('accomodation bridge', 'behind', 'stern'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'behind', 'accomodation bridge'), True)	(('accomodation bridge', 'in front of', 'stern'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'above', 'propeller'), True)	(('propeller', 'above', 'stern'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'above', 'propeller'), True)	(('propeller', 'below', 'stern'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('forward', 'above', 'anchor'), True)	(('anchor', 'above', 'forward'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('forward', 'above', 'anchor'), True)	(('anchor', 'below', 'forward'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('anchor', 'above', 'bow'), True)	(('bow', 'above', 'anchor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anchor', 'above', 'bow'), True)	(('bow', 'below', 'anchor'), True)
Constraint 4 (True antecedent)	('stern', 'behind', 'accomodation bridge')('accomodation bridge', 'behind', 'forward')	(('stern', 'behind', 'forward'), True)
Constraint 4 (True antecedent)	('forward', 'above', 'anchor')('anchor', 'above', 'bow')	(('forward', 'above', 'bow'), True)
Constraint 4 (True antecedent)	('forward', 'in front of', 'accomodation bridge')('accomodation bridge', 'in front of', 'stern')	(('forward', 'in front of', 'stern'), True)
Constraint 4 (True antecedent)	('bow', 'below', 'anchor')('anchor', 'below', 'forward')	(('bow', 'below', 'forward'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('forward', 'behind', 'accomodation bridge'), False)	(('accomodation bridge', 'in front of', 'forward'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'above', 'accomodation bridge'), False)	(('accomodation bridge', 'below', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hull', 'above', 'accomodation bridge'), False)	(('accomodation bridge', 'below', 'hull'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('accomodation bridge', 'behind', 'stern'), False)	(('stern', 'in front of', 'accomodation bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propeller', 'above', 'stern'), False)	(('stern', 'below', 'propeller'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anchor', 'above', 'forward'), False)	(('forward', 'below', 'anchor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'above', 'anchor'), False)	(('anchor', 'below', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'behind', 'forward'), True)	(('forward', 'behind', 'stern'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('forward', 'above', 'bow'), True)	(('bow', 'above', 'forward'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('forward', 'in front of', 'stern'), True)	(('stern', 'in front of', 'forward'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'below', 'forward'), True)	(('forward', 'below', 'bow'), False)
Round 3 ...
ship worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('accomodation bridge', 'above', 'forward'), True)	(('forward', 'above', 'accomodation bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('accomodation bridge', 'above', 'forward'), True)	(('forward', 'below', 'accomodation bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('forward', 'above', 'deck'), True)	(('deck', 'above', 'forward'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('forward', 'above', 'deck'), True)	(('deck', 'below', 'forward'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('deck', 'above', 'anchor'), True)	(('anchor', 'above', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'above', 'anchor'), True)	(('anchor', 'below', 'deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('anchor', 'above', 'bow'), True)	(('bow', 'above', 'anchor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anchor', 'above', 'bow'), True)	(('bow', 'below', 'anchor'), True)
Constraint 1: x rln y <-> y rln x	(('bow', 'connects', 'hull'), True)	(('hull', 'connects', 'bow'), True)
Constraint 4 (True antecedent)	('accomodation bridge', 'above', 'forward')('forward', 'above', 'deck')	(('accomodation bridge', 'above', 'deck'), True)
Constraint 4 (True antecedent)	('forward', 'above', 'deck')('deck', 'above', 'anchor')	(('forward', 'above', 'anchor'), True)
Constraint 4 (True antecedent)	('deck', 'above', 'anchor')('anchor', 'above', 'bow')	(('deck', 'above', 'bow'), True)
Constraint 4 (True antecedent)	('deck', 'below', 'forward')('forward', 'below', 'accomodation bridge')	(('deck', 'below', 'accomodation bridge'), True)
Constraint 4 (True antecedent)	('anchor', 'below', 'deck')('deck', 'below', 'forward')	(('anchor', 'below', 'forward'), True)
Constraint 4 (True antecedent)	('bow', 'below', 'anchor')('anchor', 'below', 'deck')	(('bow', 'below', 'deck'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('forward', 'above', 'accomodation bridge'), False)	(('accomodation bridge', 'below', 'forward'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'above', 'forward'), False)	(('forward', 'below', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anchor', 'above', 'deck'), False)	(('deck', 'below', 'anchor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'above', 'anchor'), False)	(('anchor', 'below', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('accomodation bridge', 'above', 'deck'), True)	(('deck', 'above', 'accomodation bridge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('forward', 'above', 'anchor'), True)	(('anchor', 'above', 'forward'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('deck', 'above', 'bow'), True)	(('bow', 'above', 'deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('deck', 'below', 'accomodation bridge'), True)	(('accomodation bridge', 'below', 'deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anchor', 'below', 'forward'), True)	(('forward', 'below', 'anchor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'below', 'deck'), True)	(('deck', 'below', 'bow'), False)
Constraint 4 (True antecedent)	('accomodation bridge', 'above', 'forward')('forward', 'above', 'anchor')	(('accomodation bridge', 'above', 'anchor'), True)
Constraint 4 (True antecedent)	('accomodation bridge', 'above', 'deck')('deck', 'above', 'bow')	(('accomodation bridge', 'above', 'bow'), True)
Constraint 4 (True antecedent)	('forward', 'above', 'deck')('deck', 'above', 'bow')	(('forward', 'above', 'bow'), True)
Constraint 4 (True antecedent)	('anchor', 'below', 'deck')('deck', 'below', 'accomodation bridge')	(('anchor', 'below', 'accomodation bridge'), True)
Constraint 4 (True antecedent)	('bow', 'below', 'anchor')('anchor', 'below', 'forward')	(('bow', 'below', 'forward'), True)
Constraint 4 (True antecedent)	('bow', 'below', 'deck')('deck', 'below', 'accomodation bridge')	(('bow', 'below', 'accomodation bridge'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('accomodation bridge', 'above', 'anchor'), True)	(('anchor', 'above', 'accomodation bridge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('accomodation bridge', 'above', 'bow'), True)	(('bow', 'above', 'accomodation bridge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('forward', 'above', 'bow'), True)	(('bow', 'above', 'forward'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('anchor', 'below', 'accomodation bridge'), True)	(('accomodation bridge', 'below', 'anchor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'below', 'forward'), True)	(('forward', 'below', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bow', 'below', 'accomodation bridge'), True)	(('accomodation bridge', 'below', 'bow'), False)
Round 4 ...
ship worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('stern', 'above', 'propeller'), True)	(('propeller', 'above', 'stern'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stern', 'above', 'propeller'), True)	(('propeller', 'below', 'stern'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('propeller', 'inside', 'hull'), True)	(('hull', 'inside', 'propeller'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propeller', 'inside', 'hull'), True)	(('hull', 'contains', 'propeller'), True)
Constraint 1: x rln y <-> y rln x	(('deck', 'connects', 'stern'), True)	(('stern', 'connects', 'deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('deck', 'above', 'hull'), True)	(('hull', 'above', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'above', 'hull'), True)	(('hull', 'below', 'deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('accomodation bridge', 'above', 'deck'), True)	(('deck', 'above', 'accomodation bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('accomodation bridge', 'above', 'deck'), True)	(('deck', 'below', 'accomodation bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('funnel', 'behind', 'accomodation bridge'), True)	(('accomodation bridge', 'behind', 'funnel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('funnel', 'behind', 'accomodation bridge'), True)	(('accomodation bridge', 'in front of', 'funnel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('funnel', 'above', 'deck'), True)	(('deck', 'above', 'funnel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('funnel', 'above', 'deck'), True)	(('deck', 'below', 'funnel'), True)
Constraint 1: x rln y <-> y rln x	(('deck', 'connects', 'forward'), True)	(('forward', 'connects', 'deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('forward', 'above', 'bow'), True)	(('bow', 'above', 'forward'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('forward', 'above', 'bow'), True)	(('bow', 'below', 'forward'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hull', 'surrounds', 'anchor'), True)	(('anchor', 'surrounds', 'hull'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hull', 'surrounds', 'anchor'), True)	(('anchor', 'surrounded by', 'hull'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('anchor', 'behind', 'bow'), True)	(('bow', 'behind', 'anchor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anchor', 'behind', 'bow'), True)	(('bow', 'in front of', 'anchor'), True)
Constraint 4 (True antecedent)	('accomodation bridge', 'above', 'deck')('deck', 'above', 'hull')	(('accomodation bridge', 'above', 'hull'), True)
Constraint 4 (True antecedent)	('funnel', 'above', 'deck')('deck', 'above', 'hull')	(('funnel', 'above', 'hull'), True)
Constraint 4 (True antecedent)	('hull', 'below', 'deck')('deck', 'below', 'accomodation bridge')	(('hull', 'below', 'accomodation bridge'), True)
Constraint 4 (True antecedent)	('hull', 'below', 'deck')('deck', 'below', 'funnel')	(('hull', 'below', 'funnel'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('propeller', 'above', 'stern'), False)	(('stern', 'below', 'propeller'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hull', 'inside', 'propeller'), False)	(('propeller', 'contains', 'hull'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hull', 'above', 'deck'), False)	(('deck', 'below', 'hull'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'above', 'accomodation bridge'), False)	(('accomodation bridge', 'below', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('accomodation bridge', 'behind', 'funnel'), False)	(('funnel', 'in front of', 'accomodation bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('deck', 'above', 'funnel'), False)	(('funnel', 'below', 'deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'above', 'forward'), False)	(('forward', 'below', 'bow'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('anchor', 'surrounds', 'hull'), False)	(('hull', 'surrounded by', 'anchor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bow', 'behind', 'anchor'), False)	(('anchor', 'in front of', 'bow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('accomodation bridge', 'above', 'hull'), True)	(('hull', 'above', 'accomodation bridge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('funnel', 'above', 'hull'), True)	(('hull', 'above', 'funnel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hull', 'below', 'accomodation bridge'), True)	(('accomodation bridge', 'below', 'hull'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hull', 'below', 'funnel'), True)	(('funnel', 'below', 'hull'), False)
Round 3 ...
suitcase worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('front shell', 'connects', 'wheel fork'), True)	(('wheel fork', 'connects', 'front shell'), True)
Constraint 1: x rln y <-> y rln x	(('wheel fork', 'connects', 'wheel'), True)	(('wheel', 'connects', 'wheel fork'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wheel fork', 'above', 'wheel'), True)	(('wheel', 'above', 'wheel fork'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheel fork', 'above', 'wheel'), True)	(('wheel', 'below', 'wheel fork'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front shell', 'above', 'wheel fork'), True)	(('wheel fork', 'above', 'front shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front shell', 'above', 'wheel fork'), True)	(('wheel fork', 'below', 'front shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back shell', 'behind', 'front shell'), True)	(('front shell', 'behind', 'back shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back shell', 'behind', 'front shell'), True)	(('front shell', 'in front of', 'back shell'), True)
Constraint 1: x rln y <-> y rln x	(('back shell', 'connects', 'top handle'), True)	(('top handle', 'connects', 'back shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top handle', 'above', 'back shell'), True)	(('back shell', 'above', 'top handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top handle', 'above', 'back shell'), True)	(('back shell', 'below', 'top handle'), True)
Constraint 1: x rln y <-> y rln x	(('side carry handle', 'connects', 'back shell'), True)	(('back shell', 'connects', 'side carry handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('zipper lock', 'above', 'side carry handle'), True)	(('side carry handle', 'above', 'zipper lock'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('zipper lock', 'above', 'side carry handle'), True)	(('side carry handle', 'below', 'zipper lock'), True)
Constraint 1: x rln y <-> y rln x	(('zipper lock', 'connects', 'back shell'), True)	(('back shell', 'connects', 'zipper lock'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trolley handle', 'behind', 'back shell'), True)	(('back shell', 'behind', 'trolley handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trolley handle', 'behind', 'back shell'), True)	(('back shell', 'in front of', 'trolley handle'), True)
Constraint 1: x rln y <-> y rln x	(('trolley handle', 'connects', 'back shell'), True)	(('back shell', 'connects', 'trolley handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back shell', 'above', 'wheel fork'), True)	(('wheel fork', 'above', 'back shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back shell', 'above', 'wheel fork'), True)	(('wheel fork', 'below', 'back shell'), True)
Constraint 1: x rln y <-> y rln x	(('back shell', 'connects', 'wheel fork'), True)	(('wheel fork', 'connects', 'back shell'), True)
Constraint 4 (True antecedent)	('front shell', 'above', 'wheel fork')('wheel fork', 'above', 'wheel')	(('front shell', 'above', 'wheel'), True)
Constraint 4 (True antecedent)	('top handle', 'above', 'back shell')('back shell', 'above', 'wheel fork')	(('top handle', 'above', 'wheel fork'), True)
Constraint 4 (True antecedent)	('trolley handle', 'behind', 'back shell')('back shell', 'behind', 'front shell')	(('trolley handle', 'behind', 'front shell'), True)
Constraint 4 (True antecedent)	('back shell', 'above', 'wheel fork')('wheel fork', 'above', 'wheel')	(('back shell', 'above', 'wheel'), True)
Constraint 4 (True antecedent)	('wheel', 'below', 'wheel fork')('wheel fork', 'below', 'front shell')	(('wheel', 'below', 'front shell'), True)
Constraint 4 (True antecedent)	('wheel', 'below', 'wheel fork')('wheel fork', 'below', 'back shell')	(('wheel', 'below', 'back shell'), True)
Constraint 4 (True antecedent)	('wheel fork', 'below', 'back shell')('back shell', 'below', 'top handle')	(('wheel fork', 'below', 'top handle'), True)
Constraint 4 (True antecedent)	('front shell', 'in front of', 'back shell')('back shell', 'in front of', 'trolley handle')	(('front shell', 'in front of', 'trolley handle'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('wheel', 'above', 'wheel fork'), False)	(('wheel fork', 'below', 'wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheel fork', 'above', 'front shell'), False)	(('front shell', 'below', 'wheel fork'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front shell', 'behind', 'back shell'), False)	(('back shell', 'in front of', 'front shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back shell', 'above', 'top handle'), False)	(('top handle', 'below', 'back shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('side carry handle', 'above', 'zipper lock'), False)	(('zipper lock', 'below', 'side carry handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back shell', 'behind', 'trolley handle'), False)	(('trolley handle', 'in front of', 'back shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheel fork', 'above', 'back shell'), False)	(('back shell', 'below', 'wheel fork'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front shell', 'above', 'wheel'), True)	(('wheel', 'above', 'front shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top handle', 'above', 'wheel fork'), True)	(('wheel fork', 'above', 'top handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('trolley handle', 'behind', 'front shell'), True)	(('front shell', 'behind', 'trolley handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('back shell', 'above', 'wheel'), True)	(('wheel', 'above', 'back shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheel', 'below', 'front shell'), True)	(('front shell', 'below', 'wheel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheel', 'below', 'back shell'), True)	(('back shell', 'below', 'wheel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheel fork', 'below', 'top handle'), True)	(('top handle', 'below', 'wheel fork'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front shell', 'in front of', 'trolley handle'), True)	(('trolley handle', 'in front of', 'front shell'), False)
Constraint 4 (True antecedent)	('top handle', 'above', 'back shell')('back shell', 'above', 'wheel')	(('top handle', 'above', 'wheel'), True)
Constraint 4 (True antecedent)	('wheel', 'below', 'wheel fork')('wheel fork', 'below', 'top handle')	(('wheel', 'below', 'top handle'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top handle', 'above', 'wheel'), True)	(('wheel', 'above', 'top handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheel', 'below', 'top handle'), True)	(('top handle', 'below', 'wheel'), False)
Round 4 ...
suitcase worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('wheel', 'connects', 'wheel fork'), True)	(('wheel fork', 'connects', 'wheel'), True)
Constraint 1: x rln y <-> y rln x	(('wheel fork', 'connects', 'front shell'), True)	(('front shell', 'connects', 'wheel fork'), True)
Constraint 1: x rln y <-> y rln x	(('front shell', 'connects', 'zipper'), True)	(('zipper', 'connects', 'front shell'), True)
Constraint 1: x rln y <-> y rln x	(('zipper', 'connects', 'back shell'), True)	(('back shell', 'connects', 'zipper'), True)
Constraint 1: x rln y <-> y rln x	(('zipper', 'connects', 'zipper lock'), True)	(('zipper lock', 'connects', 'zipper'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('zipper lock', 'above', 'side carry handle'), True)	(('side carry handle', 'above', 'zipper lock'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('zipper lock', 'above', 'side carry handle'), True)	(('side carry handle', 'below', 'zipper lock'), True)
Constraint 1: x rln y <-> y rln x	(('back shell', 'connects', 'side carry handle'), True)	(('side carry handle', 'connects', 'back shell'), True)
Constraint 1: x rln y <-> y rln x	(('back shell', 'connects', 'trolley handle'), True)	(('trolley handle', 'connects', 'back shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trolley handle', 'above', 'top handle'), True)	(('top handle', 'above', 'trolley handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trolley handle', 'above', 'top handle'), True)	(('top handle', 'below', 'trolley handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top handle', 'above', 'side carry handle'), True)	(('side carry handle', 'above', 'top handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top handle', 'above', 'side carry handle'), True)	(('side carry handle', 'below', 'top handle'), True)
Constraint 1: x rln y <-> y rln x	(('back shell', 'connects', 'top handle'), True)	(('top handle', 'connects', 'back shell'), True)
Constraint 1: x rln y <-> y rln x	(('back shell', 'connects', 'wheel fork'), True)	(('wheel fork', 'connects', 'back shell'), True)
Constraint 1: x rln y <-> y rln x	(('zipper lock', 'connects', 'back shell'), True)	(('back shell', 'connects', 'zipper lock'), True)
Constraint 4 (True antecedent)	('trolley handle', 'above', 'top handle')('top handle', 'above', 'side carry handle')	(('trolley handle', 'above', 'side carry handle'), True)
Constraint 4 (True antecedent)	('side carry handle', 'below', 'top handle')('top handle', 'below', 'trolley handle')	(('side carry handle', 'below', 'trolley handle'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('side carry handle', 'above', 'zipper lock'), False)	(('zipper lock', 'below', 'side carry handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top handle', 'above', 'trolley handle'), False)	(('trolley handle', 'below', 'top handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('side carry handle', 'above', 'top handle'), False)	(('top handle', 'below', 'side carry handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('trolley handle', 'above', 'side carry handle'), True)	(('side carry handle', 'above', 'trolley handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('side carry handle', 'below', 'trolley handle'), True)	(('trolley handle', 'below', 'side carry handle'), False)
Round 3 ...
suitcase worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('trolley handle', 'above', 'top handle'), True)	(('top handle', 'above', 'trolley handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trolley handle', 'above', 'top handle'), True)	(('top handle', 'below', 'trolley handle'), True)
Constraint 1: x rln y <-> y rln x	(('top handle', 'next to', 'zipper'), True)	(('zipper', 'next to', 'top handle'), True)
Constraint 1: x rln y <-> y rln x	(('zipper', 'next to', 'front shell'), True)	(('front shell', 'next to', 'zipper'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front shell', 'above', 'wheel'), True)	(('wheel', 'above', 'front shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front shell', 'above', 'wheel'), True)	(('wheel', 'below', 'front shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front shell', 'above', 'wheel fork'), True)	(('wheel fork', 'above', 'front shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front shell', 'above', 'wheel fork'), True)	(('wheel fork', 'below', 'front shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back shell', 'behind', 'front shell'), True)	(('front shell', 'behind', 'back shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back shell', 'behind', 'front shell'), True)	(('front shell', 'in front of', 'back shell'), True)
Constraint 1: x rln y <-> y rln x	(('zipper', 'next to', 'zipper lock'), True)	(('zipper lock', 'next to', 'zipper'), True)
Constraint 1: x rln y <-> y rln x	(('zipper lock', 'next to', 'side carry handle'), True)	(('side carry handle', 'next to', 'zipper lock'), True)
Constraint 1: x rln y <-> y rln x	(('side carry handle', 'next to', 'back shell'), True)	(('back shell', 'next to', 'side carry handle'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('top handle', 'above', 'trolley handle'), False)	(('trolley handle', 'below', 'top handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheel', 'above', 'front shell'), False)	(('front shell', 'below', 'wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheel fork', 'above', 'front shell'), False)	(('front shell', 'below', 'wheel fork'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front shell', 'behind', 'back shell'), False)	(('back shell', 'in front of', 'front shell'), False)
Round 3 ...
teapot worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('hole', 'above', 'lid'), True)	(('lid', 'above', 'hole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hole', 'above', 'lid'), True)	(('lid', 'below', 'hole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'hollow body'), True)	(('hollow body', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'hollow body'), True)	(('hollow body', 'below', 'lid'), True)
Constraint 1: x rln y <-> y rln x	(('spout', 'connects', 'hollow body'), True)	(('hollow body', 'connects', 'spout'), True)
Constraint 1: x rln y <-> y rln x	(('hollow body', 'connects', 'handle'), True)	(('handle', 'connects', 'hollow body'), True)
Constraint 4 (True antecedent)	('hole', 'above', 'lid')('lid', 'above', 'hollow body')	(('hole', 'above', 'hollow body'), True)
Constraint 4 (True antecedent)	('hollow body', 'below', 'lid')('lid', 'below', 'hole')	(('hollow body', 'below', 'hole'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'hole'), False)	(('hole', 'below', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hollow body', 'above', 'lid'), False)	(('lid', 'below', 'hollow body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hole', 'above', 'hollow body'), True)	(('hollow body', 'above', 'hole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hollow body', 'below', 'hole'), True)	(('hole', 'below', 'hollow body'), False)
Round 3 ...
teapot worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('spout', 'connects', 'hollow body'), True)	(('hollow body', 'connects', 'spout'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hollow body', 'behind', 'spout'), True)	(('spout', 'behind', 'hollow body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hollow body', 'behind', 'spout'), True)	(('spout', 'in front of', 'hollow body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'hollow body'), True)	(('hollow body', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'hollow body'), True)	(('hollow body', 'below', 'lid'), True)
Constraint 1: x rln y <-> y rln x	(('lid', 'connects', 'hollow body'), True)	(('hollow body', 'connects', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'behind', 'hollow body'), True)	(('hollow body', 'behind', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'behind', 'hollow body'), True)	(('hollow body', 'in front of', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'hollow body'), True)	(('hollow body', 'connects', 'handle'), True)
Constraint 4 (True antecedent)	('handle', 'behind', 'hollow body')('hollow body', 'behind', 'spout')	(('handle', 'behind', 'spout'), True)
Constraint 4 (True antecedent)	('spout', 'in front of', 'hollow body')('hollow body', 'in front of', 'handle')	(('spout', 'in front of', 'handle'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('spout', 'behind', 'hollow body'), False)	(('hollow body', 'in front of', 'spout'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hollow body', 'above', 'lid'), False)	(('lid', 'below', 'hollow body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hollow body', 'behind', 'handle'), False)	(('handle', 'in front of', 'hollow body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'behind', 'spout'), True)	(('spout', 'behind', 'handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spout', 'in front of', 'handle'), True)	(('handle', 'in front of', 'spout'), False)
Round 3 ...
teapot worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('hole', 'above', 'lid'), True)	(('lid', 'above', 'hole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hole', 'above', 'lid'), True)	(('lid', 'below', 'hole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hole', 'inside', 'lid'), True)	(('lid', 'inside', 'hole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hole', 'inside', 'lid'), True)	(('lid', 'contains', 'hole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'hollow body'), True)	(('hollow body', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'hollow body'), True)	(('hollow body', 'below', 'lid'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'hollow body'), True)	(('hollow body', 'connects', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('spout', 'connects', 'hollow body'), True)	(('hollow body', 'connects', 'spout'), True)
Constraint 4 (True antecedent)	('hole', 'above', 'lid')('lid', 'above', 'hollow body')	(('hole', 'above', 'hollow body'), True)
Constraint 4 (True antecedent)	('hollow body', 'below', 'lid')('lid', 'below', 'hole')	(('hollow body', 'below', 'hole'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'hole'), False)	(('hole', 'below', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'inside', 'hole'), False)	(('hole', 'contains', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hollow body', 'above', 'lid'), False)	(('lid', 'below', 'hollow body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hole', 'above', 'hollow body'), True)	(('hollow body', 'above', 'hole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hollow body', 'below', 'hole'), True)	(('hole', 'below', 'hollow body'), False)
Round 3 ...
telephone worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('handset', 'connects', 'cord'), True)	(('cord', 'connects', 'handset'), True)
Constraint 1: x rln y <-> y rln x	(('cord', 'connects', 'base'), True)	(('base', 'connects', 'cord'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handset', 'above', 'base'), True)	(('base', 'above', 'handset'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handset', 'above', 'base'), True)	(('base', 'below', 'handset'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('call indicator', 'part of', 'base'), True)	(('base', 'part of', 'call indicator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('call indicator', 'part of', 'base'), True)	(('base', 'has part', 'call indicator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('buttons', 'part of', 'base'), True)	(('base', 'part of', 'buttons'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('buttons', 'part of', 'base'), True)	(('base', 'has part', 'buttons'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ringer volume switch', 'part of', 'base'), True)	(('base', 'part of', 'ringer volume switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ringer volume switch', 'part of', 'base'), True)	(('base', 'has part', 'ringer volume switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('speakerphone switch', 'part of', 'base'), True)	(('base', 'part of', 'speakerphone switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('speakerphone switch', 'part of', 'base'), True)	(('base', 'has part', 'speakerphone switch'), True)
Constraint 1: x rln y <-> y rln x	(('telephone line', 'connects', 'base'), True)	(('base', 'connects', 'telephone line'), True)
Constraint 1: x rln y <-> y rln x	(('extension interface', 'next to', 'telephone line'), True)	(('telephone line', 'next to', 'extension interface'), True)
Constraint 1: x rln y <-> y rln x	(('base', 'connects', 'extension interface'), True)	(('extension interface', 'connects', 'base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tp switch', 'part of', 'base'), True)	(('base', 'part of', 'tp switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tp switch', 'part of', 'base'), True)	(('base', 'has part', 'tp switch'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'handset'), False)	(('handset', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'call indicator'), False)	(('call indicator', 'has part', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'buttons'), False)	(('buttons', 'has part', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'ringer volume switch'), False)	(('ringer volume switch', 'has part', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'speakerphone switch'), False)	(('speakerphone switch', 'has part', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'tp switch'), False)	(('tp switch', 'has part', 'base'), False)
Round 3 ...
telephone worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('handset', 'next to', 'keypad'), True)	(('keypad', 'next to', 'handset'), True)
Constraint 1: x rln y <-> y rln x	(('telephone line', 'next to', 'keypad'), True)	(('keypad', 'next to', 'telephone line'), True)
Constraint 1: x rln y <-> y rln x	(('ringer volume switch', 'next to', 'keypad'), True)	(('keypad', 'next to', 'ringer volume switch'), True)
Constraint 1: x rln y <-> y rln x	(('speakerphone switch', 'next to', 'keypad'), True)	(('keypad', 'next to', 'speakerphone switch'), True)
Constraint 1: x rln y <-> y rln x	(('call indicator', 'next to', 'memory key'), True)	(('memory key', 'next to', 'call indicator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('memory key', 'above', 'keypad'), True)	(('keypad', 'above', 'memory key'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('memory key', 'above', 'keypad'), True)	(('keypad', 'below', 'memory key'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('keypad', 'above', 'memory key'), False)	(('memory key', 'below', 'keypad'), False)
Round 3 ...
telephone worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('call indicator', 'connects', 'base'), True)	(('base', 'connects', 'call indicator'), True)
Constraint 1: x rln y <-> y rln x	(('memory key', 'connects', 'base'), True)	(('base', 'connects', 'memory key'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('call indicator', 'above', 'telephone line'), True)	(('telephone line', 'above', 'call indicator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('call indicator', 'above', 'telephone line'), True)	(('telephone line', 'below', 'call indicator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('call indicator', 'above', 'ringer volume switch'), True)	(('ringer volume switch', 'above', 'call indicator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('call indicator', 'above', 'ringer volume switch'), True)	(('ringer volume switch', 'below', 'call indicator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('call indicator', 'above', 'speakerphone switch'), True)	(('speakerphone switch', 'above', 'call indicator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('call indicator', 'above', 'speakerphone switch'), True)	(('speakerphone switch', 'below', 'call indicator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('memory key', 'above', 'telephone line'), True)	(('telephone line', 'above', 'memory key'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('memory key', 'above', 'telephone line'), True)	(('telephone line', 'below', 'memory key'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('memory key', 'above', 'ringer volume switch'), True)	(('ringer volume switch', 'above', 'memory key'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('memory key', 'above', 'ringer volume switch'), True)	(('ringer volume switch', 'below', 'memory key'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('memory key', 'above', 'speakerphone switch'), True)	(('speakerphone switch', 'above', 'memory key'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('memory key', 'above', 'speakerphone switch'), True)	(('speakerphone switch', 'below', 'memory key'), True)
Constraint 1: x rln y <-> y rln x	(('handset', 'connects', 'base'), True)	(('base', 'connects', 'handset'), True)
Constraint 1: x rln y <-> y rln x	(('keypad', 'connects', 'base'), True)	(('base', 'connects', 'keypad'), True)
Constraint 1: x rln y <-> y rln x	(('handset', 'next to', 'keypad'), True)	(('keypad', 'next to', 'handset'), True)
Constraint 1: x rln y <-> y rln x	(('telephone line', 'connects', 'base'), True)	(('base', 'connects', 'telephone line'), True)
Constraint 1: x rln y <-> y rln x	(('speakerphone switch', 'connects', 'base'), True)	(('base', 'connects', 'speakerphone switch'), True)
Constraint 1: x rln y <-> y rln x	(('ringer volume switch', 'connects', 'base'), True)	(('base', 'connects', 'ringer volume switch'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('telephone line', 'above', 'call indicator'), False)	(('call indicator', 'below', 'telephone line'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ringer volume switch', 'above', 'call indicator'), False)	(('call indicator', 'below', 'ringer volume switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('speakerphone switch', 'above', 'call indicator'), False)	(('call indicator', 'below', 'speakerphone switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telephone line', 'above', 'memory key'), False)	(('memory key', 'below', 'telephone line'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ringer volume switch', 'above', 'memory key'), False)	(('memory key', 'below', 'ringer volume switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('speakerphone switch', 'above', 'memory key'), False)	(('memory key', 'below', 'speakerphone switch'), False)
Round 3 ...
telescope worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('telescope tube', 'above', 'counter weight'), True)	(('counter weight', 'above', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'above', 'counter weight'), True)	(('counter weight', 'below', 'telescope tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('telescope tube', 'above', 'mount'), True)	(('mount', 'above', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'above', 'mount'), True)	(('mount', 'below', 'telescope tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('telescope tube', 'above', 'tripod'), True)	(('tripod', 'above', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'above', 'tripod'), True)	(('tripod', 'below', 'telescope tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('telescope tube', 'above', 'slow motion control'), True)	(('slow motion control', 'above', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'above', 'slow motion control'), True)	(('slow motion control', 'below', 'telescope tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'behind', 'telescope tube'), True)	(('telescope tube', 'behind', 'eyepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyepiece', 'behind', 'telescope tube'), True)	(('telescope tube', 'in front of', 'eyepiece'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'above', 'telescope tube'), True)	(('telescope tube', 'above', 'finderscope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('finderscope', 'above', 'telescope tube'), True)	(('telescope tube', 'below', 'finderscope'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'behind', 'telescope tube'), True)	(('telescope tube', 'behind', 'finderscope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('finderscope', 'behind', 'telescope tube'), True)	(('telescope tube', 'in front of', 'finderscope'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('telescope tube', 'requires', 'eyepiece'), True)	(('eyepiece', 'requires', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'requires', 'eyepiece'), True)	(('eyepiece', 'required by', 'telescope tube'), True)
Constraint 4 (True antecedent)	('finderscope', 'above', 'telescope tube')('telescope tube', 'above', 'counter weight')	(('finderscope', 'above', 'counter weight'), True)
Constraint 4 (True antecedent)	('finderscope', 'above', 'telescope tube')('telescope tube', 'above', 'mount')	(('finderscope', 'above', 'mount'), True)
Constraint 4 (True antecedent)	('finderscope', 'above', 'telescope tube')('telescope tube', 'above', 'tripod')	(('finderscope', 'above', 'tripod'), True)
Constraint 4 (True antecedent)	('finderscope', 'above', 'telescope tube')('telescope tube', 'above', 'slow motion control')	(('finderscope', 'above', 'slow motion control'), True)
Constraint 4 (True antecedent)	('counter weight', 'below', 'telescope tube')('telescope tube', 'below', 'finderscope')	(('counter weight', 'below', 'finderscope'), True)
Constraint 4 (True antecedent)	('mount', 'below', 'telescope tube')('telescope tube', 'below', 'finderscope')	(('mount', 'below', 'finderscope'), True)
Constraint 4 (True antecedent)	('tripod', 'below', 'telescope tube')('telescope tube', 'below', 'finderscope')	(('tripod', 'below', 'finderscope'), True)
Constraint 4 (True antecedent)	('slow motion control', 'below', 'telescope tube')('telescope tube', 'below', 'finderscope')	(('slow motion control', 'below', 'finderscope'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('counter weight', 'above', 'telescope tube'), False)	(('telescope tube', 'below', 'counter weight'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mount', 'above', 'telescope tube'), False)	(('telescope tube', 'below', 'mount'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tripod', 'above', 'telescope tube'), False)	(('telescope tube', 'below', 'tripod'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('slow motion control', 'above', 'telescope tube'), False)	(('telescope tube', 'below', 'slow motion control'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'behind', 'eyepiece'), False)	(('eyepiece', 'in front of', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'above', 'finderscope'), False)	(('finderscope', 'below', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'behind', 'finderscope'), False)	(('finderscope', 'in front of', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyepiece', 'requires', 'telescope tube'), False)	(('telescope tube', 'required by', 'eyepiece'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'above', 'counter weight'), True)	(('counter weight', 'above', 'finderscope'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'above', 'mount'), True)	(('mount', 'above', 'finderscope'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'above', 'tripod'), True)	(('tripod', 'above', 'finderscope'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'above', 'slow motion control'), True)	(('slow motion control', 'above', 'finderscope'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('counter weight', 'below', 'finderscope'), True)	(('finderscope', 'below', 'counter weight'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mount', 'below', 'finderscope'), True)	(('finderscope', 'below', 'mount'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tripod', 'below', 'finderscope'), True)	(('finderscope', 'below', 'tripod'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('slow motion control', 'below', 'finderscope'), True)	(('finderscope', 'below', 'slow motion control'), False)
Round 3 ...
telescope worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'above', 'telescope tube'), True)	(('telescope tube', 'above', 'finderscope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('finderscope', 'above', 'telescope tube'), True)	(('telescope tube', 'below', 'finderscope'), True)
Constraint 1: x rln y <-> y rln x	(('finderscope', 'connects', 'telescope tube'), True)	(('telescope tube', 'connects', 'finderscope'), True)
Constraint 1: x rln y <-> y rln x	(('telescope tube', 'connects', 'eyepiece'), True)	(('eyepiece', 'connects', 'telescope tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'behind', 'telescope tube'), True)	(('telescope tube', 'behind', 'eyepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyepiece', 'behind', 'telescope tube'), True)	(('telescope tube', 'in front of', 'eyepiece'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('telescope tube', 'above', 'mount'), True)	(('mount', 'above', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'above', 'mount'), True)	(('mount', 'below', 'telescope tube'), True)
Constraint 1: x rln y <-> y rln x	(('mount', 'connects', 'telescope tube'), True)	(('telescope tube', 'connects', 'mount'), True)
Constraint 1: x rln y <-> y rln x	(('mount', 'connects', 'tripod'), True)	(('tripod', 'connects', 'mount'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mount', 'above', 'tripod'), True)	(('tripod', 'above', 'mount'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mount', 'above', 'tripod'), True)	(('tripod', 'below', 'mount'), True)
Constraint 1: x rln y <-> y rln x	(('mount', 'connects', 'slow motion control'), True)	(('slow motion control', 'connects', 'mount'), True)
Constraint 1: x rln y <-> y rln x	(('mount', 'connects', 'counter weight'), True)	(('counter weight', 'connects', 'mount'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('slow motion control', 'above', 'counter weight'), True)	(('counter weight', 'above', 'slow motion control'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('slow motion control', 'above', 'counter weight'), True)	(('counter weight', 'below', 'slow motion control'), True)
Constraint 4 (True antecedent)	('finderscope', 'above', 'telescope tube')('telescope tube', 'above', 'mount')	(('finderscope', 'above', 'mount'), True)
Constraint 4 (True antecedent)	('telescope tube', 'above', 'mount')('mount', 'above', 'tripod')	(('telescope tube', 'above', 'tripod'), True)
Constraint 4 (True antecedent)	('mount', 'below', 'telescope tube')('telescope tube', 'below', 'finderscope')	(('mount', 'below', 'finderscope'), True)
Constraint 4 (True antecedent)	('tripod', 'below', 'mount')('mount', 'below', 'telescope tube')	(('tripod', 'below', 'telescope tube'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'above', 'finderscope'), False)	(('finderscope', 'below', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'behind', 'eyepiece'), False)	(('eyepiece', 'in front of', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mount', 'above', 'telescope tube'), False)	(('telescope tube', 'below', 'mount'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tripod', 'above', 'mount'), False)	(('mount', 'below', 'tripod'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('counter weight', 'above', 'slow motion control'), False)	(('slow motion control', 'below', 'counter weight'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'above', 'mount'), True)	(('mount', 'above', 'finderscope'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('telescope tube', 'above', 'tripod'), True)	(('tripod', 'above', 'telescope tube'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mount', 'below', 'finderscope'), True)	(('finderscope', 'below', 'mount'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tripod', 'below', 'telescope tube'), True)	(('telescope tube', 'below', 'tripod'), False)
Constraint 4 (True antecedent)	('finderscope', 'above', 'telescope tube')('telescope tube', 'above', 'tripod')	(('finderscope', 'above', 'tripod'), True)
Constraint 4 (True antecedent)	('tripod', 'below', 'mount')('mount', 'below', 'finderscope')	(('tripod', 'below', 'finderscope'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'above', 'tripod'), True)	(('tripod', 'above', 'finderscope'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tripod', 'below', 'finderscope'), True)	(('finderscope', 'below', 'tripod'), False)
Round 4 ...
telescope worker_106...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('finderscope', 'above', 'telescope tube'), True)	(('telescope tube', 'above', 'finderscope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('finderscope', 'above', 'telescope tube'), True)	(('telescope tube', 'below', 'finderscope'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'behind', 'telescope tube'), True)	(('telescope tube', 'behind', 'eyepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyepiece', 'behind', 'telescope tube'), True)	(('telescope tube', 'in front of', 'eyepiece'), True)
Constraint 1: x rln y <-> y rln x	(('telescope tube', 'connects', 'mount'), True)	(('mount', 'connects', 'telescope tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mount', 'requires', 'counter weight'), True)	(('counter weight', 'requires', 'mount'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mount', 'requires', 'counter weight'), True)	(('counter weight', 'required by', 'mount'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mount', 'above', 'tripod'), True)	(('tripod', 'above', 'mount'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mount', 'above', 'tripod'), True)	(('tripod', 'below', 'mount'), True)
Constraint 1: x rln y <-> y rln x	(('slow motion control', 'connects', 'telescope tube'), True)	(('telescope tube', 'connects', 'slow motion control'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'above', 'finderscope'), False)	(('finderscope', 'below', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('telescope tube', 'behind', 'eyepiece'), False)	(('eyepiece', 'in front of', 'telescope tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('counter weight', 'requires', 'mount'), False)	(('mount', 'required by', 'counter weight'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tripod', 'above', 'mount'), False)	(('mount', 'below', 'tripod'), False)
Round 3 ...
windmill worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('rotor', 'connects', 'mill house'), True)	(('mill house', 'connects', 'rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mill house', 'behind', 'rotor'), True)	(('rotor', 'behind', 'mill house'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mill house', 'behind', 'rotor'), True)	(('rotor', 'in front of', 'mill house'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mill house', 'above', 'base'), True)	(('base', 'above', 'mill house'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mill house', 'above', 'base'), True)	(('base', 'below', 'mill house'), True)
Constraint 1: x rln y <-> y rln x	(('tail', 'connects', 'mill house'), True)	(('mill house', 'connects', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'mill house'), True)	(('mill house', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'mill house'), True)	(('mill house', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'mill house')('mill house', 'behind', 'rotor')	(('tail', 'behind', 'rotor'), True)
Constraint 4 (True antecedent)	('rotor', 'in front of', 'mill house')('mill house', 'in front of', 'tail')	(('rotor', 'in front of', 'tail'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('rotor', 'behind', 'mill house'), False)	(('mill house', 'in front of', 'rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'mill house'), False)	(('mill house', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mill house', 'behind', 'tail'), False)	(('tail', 'in front of', 'mill house'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'rotor'), True)	(('rotor', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rotor', 'in front of', 'tail'), True)	(('tail', 'in front of', 'rotor'), False)
Round 3 ...
windmill worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('mill house', 'connects', 'rotor'), True)	(('rotor', 'connects', 'mill house'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mill house', 'behind', 'rotor'), True)	(('rotor', 'behind', 'mill house'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mill house', 'behind', 'rotor'), True)	(('rotor', 'in front of', 'mill house'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mill house', 'behind', 'base'), True)	(('base', 'behind', 'mill house'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mill house', 'behind', 'base'), True)	(('base', 'in front of', 'mill house'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rotor', 'above', 'base'), True)	(('base', 'above', 'rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rotor', 'above', 'base'), True)	(('base', 'below', 'rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'part of', 'base'), True)	(('base', 'part of', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'part of', 'base'), True)	(('base', 'has part', 'tail'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('rotor', 'behind', 'mill house'), False)	(('mill house', 'in front of', 'rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'behind', 'mill house'), False)	(('mill house', 'in front of', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'rotor'), False)	(('rotor', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'tail'), False)	(('tail', 'has part', 'base'), False)
Round 3 ...
windmill worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('rotor', 'connects', 'mill house'), True)	(('mill house', 'connects', 'rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rotor', 'above', 'mill house'), True)	(('mill house', 'above', 'rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rotor', 'above', 'mill house'), True)	(('mill house', 'below', 'rotor'), True)
Constraint 1: x rln y <-> y rln x	(('mill house', 'connects', 'base'), True)	(('base', 'connects', 'mill house'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mill house', 'above', 'base'), True)	(('base', 'above', 'mill house'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mill house', 'above', 'base'), True)	(('base', 'below', 'mill house'), True)
Constraint 4 (True antecedent)	('rotor', 'above', 'mill house')('mill house', 'above', 'base')	(('rotor', 'above', 'base'), True)
Constraint 4 (True antecedent)	('base', 'below', 'mill house')('mill house', 'below', 'rotor')	(('base', 'below', 'rotor'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('mill house', 'above', 'rotor'), False)	(('rotor', 'below', 'mill house'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'mill house'), False)	(('mill house', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rotor', 'above', 'base'), True)	(('base', 'above', 'rotor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'rotor'), True)	(('rotor', 'below', 'base'), False)
Round 3 ...
backpack worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('handle loop', 'above', 'main compartment'), True)	(('main compartment', 'above', 'handle loop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle loop', 'above', 'main compartment'), True)	(('main compartment', 'below', 'handle loop'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('padded back', 'behind', 'main compartment'), True)	(('main compartment', 'behind', 'padded back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('padded back', 'behind', 'main compartment'), True)	(('main compartment', 'in front of', 'padded back'), True)
Constraint 1: x rln y <-> y rln x	(('padded back', 'connects', 'shoulder straps'), True)	(('shoulder straps', 'connects', 'padded back'), True)
Constraint 1: x rln y <-> y rln x	(('main compartment', 'connects', 'front pocket'), True)	(('front pocket', 'connects', 'main compartment'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main compartment', 'surrounds', 'main zip'), True)	(('main zip', 'surrounds', 'main compartment'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main compartment', 'surrounds', 'main zip'), True)	(('main zip', 'surrounded by', 'main compartment'), True)
Constraint 1: x rln y <-> y rln x	(('main compartment', 'next to', 'side pocket'), True)	(('side pocket', 'next to', 'main compartment'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('main compartment', 'above', 'handle loop'), False)	(('handle loop', 'below', 'main compartment'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main compartment', 'behind', 'padded back'), False)	(('padded back', 'in front of', 'main compartment'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main zip', 'surrounds', 'main compartment'), False)	(('main compartment', 'surrounded by', 'main zip'), False)
Round 3 ...
backpack worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('handle loop', 'above', 'main compartment'), True)	(('main compartment', 'above', 'handle loop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle loop', 'above', 'main compartment'), True)	(('main compartment', 'below', 'handle loop'), True)
Constraint 1: x rln y <-> y rln x	(('handle loop', 'connects', 'main compartment'), True)	(('main compartment', 'connects', 'handle loop'), True)
Constraint 1: x rln y <-> y rln x	(('main zip', 'connects', 'main compartment'), True)	(('main compartment', 'connects', 'main zip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main zip', 'above', 'side pocket'), True)	(('side pocket', 'above', 'main zip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main zip', 'above', 'side pocket'), True)	(('side pocket', 'below', 'main zip'), True)
Constraint 1: x rln y <-> y rln x	(('side pocket', 'next to', 'front pocket'), True)	(('front pocket', 'next to', 'side pocket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main compartment', 'above', 'front pocket'), True)	(('front pocket', 'above', 'main compartment'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main compartment', 'above', 'front pocket'), True)	(('front pocket', 'below', 'main compartment'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('padded back', 'behind', 'main compartment'), True)	(('main compartment', 'behind', 'padded back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('padded back', 'behind', 'main compartment'), True)	(('main compartment', 'in front of', 'padded back'), True)
Constraint 1: x rln y <-> y rln x	(('padded back', 'connects', 'shoulder straps'), True)	(('shoulder straps', 'connects', 'padded back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shoulder straps', 'behind', 'main compartment'), True)	(('main compartment', 'behind', 'shoulder straps'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shoulder straps', 'behind', 'main compartment'), True)	(('main compartment', 'in front of', 'shoulder straps'), True)
Constraint 4 (True antecedent)	('handle loop', 'above', 'main compartment')('main compartment', 'above', 'front pocket')	(('handle loop', 'above', 'front pocket'), True)
Constraint 4 (True antecedent)	('front pocket', 'below', 'main compartment')('main compartment', 'below', 'handle loop')	(('front pocket', 'below', 'handle loop'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('main compartment', 'above', 'handle loop'), False)	(('handle loop', 'below', 'main compartment'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('side pocket', 'above', 'main zip'), False)	(('main zip', 'below', 'side pocket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front pocket', 'above', 'main compartment'), False)	(('main compartment', 'below', 'front pocket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main compartment', 'behind', 'padded back'), False)	(('padded back', 'in front of', 'main compartment'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main compartment', 'behind', 'shoulder straps'), False)	(('shoulder straps', 'in front of', 'main compartment'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handle loop', 'above', 'front pocket'), True)	(('front pocket', 'above', 'handle loop'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front pocket', 'below', 'handle loop'), True)	(('handle loop', 'below', 'front pocket'), False)
Round 3 ...
backpack worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('padded back', 'connects', 'handle loop'), True)	(('handle loop', 'connects', 'padded back'), True)
Constraint 1: x rln y <-> y rln x	(('padded back', 'connects', 'shoulder straps'), True)	(('shoulder straps', 'connects', 'padded back'), True)
Constraint 1: x rln y <-> y rln x	(('padded back', 'connects', 'main zip'), True)	(('main zip', 'connects', 'padded back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main compartment', 'inside', 'padded back'), True)	(('padded back', 'inside', 'main compartment'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main compartment', 'inside', 'padded back'), True)	(('padded back', 'contains', 'main compartment'), True)
Constraint 1: x rln y <-> y rln x	(('side pocket', 'connects', 'padded back'), True)	(('padded back', 'connects', 'side pocket'), True)
Constraint 1: x rln y <-> y rln x	(('side pocket', 'connects', 'front pocket'), True)	(('front pocket', 'connects', 'side pocket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('padded back', 'behind', 'front pocket'), True)	(('front pocket', 'behind', 'padded back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('padded back', 'behind', 'front pocket'), True)	(('front pocket', 'in front of', 'padded back'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('padded back', 'inside', 'main compartment'), False)	(('main compartment', 'contains', 'padded back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front pocket', 'behind', 'padded back'), False)	(('padded back', 'in front of', 'front pocket'), False)
Round 3 ...
deer worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'eye'), True)	(('eye', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'eye'), True)	(('eye', 'below', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'next to', 'eye'), True)	(('eye', 'next to', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'next to', 'antler'), True)	(('antler', 'next to', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'connects', 'head'), True)	(('head', 'connects', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('antler', 'connects', 'head'), True)	(('head', 'connects', 'antler'), True)
Constraint 1: x rln y <-> y rln x	(('eye', 'connects', 'head'), True)	(('head', 'connects', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'nose'), True)	(('nose', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'nose'), True)	(('nose', 'below', 'eye'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'nose'), True)	(('nose', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'mouth'), True)	(('mouth', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('torso', 'connects', 'tail'), True)	(('tail', 'connects', 'torso'), True)
Constraint 1: x rln y <-> y rln x	(('torso', 'connects', 'leg'), True)	(('leg', 'connects', 'torso'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('torso', 'behind', 'head'), True)	(('head', 'behind', 'torso'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('torso', 'behind', 'head'), True)	(('head', 'in front of', 'torso'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('torso', 'above', 'leg'), True)	(('leg', 'above', 'torso'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('torso', 'above', 'leg'), True)	(('leg', 'below', 'torso'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'torso'), True)	(('torso', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'torso'), True)	(('torso', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'hoof'), True)	(('hoof', 'connects', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'hoof'), True)	(('hoof', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'hoof'), True)	(('hoof', 'below', 'leg'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'eye')('eye', 'above', 'nose')	(('ear', 'above', 'nose'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'nose')('nose', 'above', 'mouth')	(('eye', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('torso', 'above', 'leg')('leg', 'above', 'hoof')	(('torso', 'above', 'hoof'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'torso')('torso', 'behind', 'head')	(('tail', 'behind', 'head'), True)
Constraint 4 (True antecedent)	('nose', 'below', 'eye')('eye', 'below', 'ear')	(('nose', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('head', 'in front of', 'torso')('torso', 'in front of', 'tail')	(('head', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'eye')	(('mouth', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('hoof', 'below', 'leg')('leg', 'below', 'torso')	(('hoof', 'below', 'torso'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'ear'), False)	(('ear', 'below', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'eye'), False)	(('eye', 'below', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'behind', 'torso'), False)	(('torso', 'in front of', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'torso'), False)	(('torso', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('torso', 'behind', 'tail'), False)	(('tail', 'in front of', 'torso'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hoof', 'above', 'leg'), False)	(('leg', 'below', 'hoof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'nose'), True)	(('nose', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'mouth'), True)	(('mouth', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('torso', 'above', 'hoof'), True)	(('hoof', 'above', 'torso'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'head'), True)	(('head', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'below', 'ear'), True)	(('ear', 'below', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'in front of', 'tail'), True)	(('tail', 'in front of', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'eye'), True)	(('eye', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hoof', 'below', 'torso'), True)	(('torso', 'below', 'hoof'), False)
Constraint 4 (True antecedent)	('ear', 'above', 'eye')('eye', 'above', 'mouth')	(('ear', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'ear')	(('mouth', 'below', 'ear'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'mouth'), True)	(('mouth', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'ear'), True)	(('ear', 'below', 'mouth'), False)
Round 4 ...
deer worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('ear', 'next to', 'antler'), True)	(('antler', 'next to', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'eye'), True)	(('eye', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'eye'), True)	(('eye', 'below', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('antler', 'above', 'eye'), True)	(('eye', 'above', 'antler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('antler', 'above', 'eye'), True)	(('eye', 'below', 'antler'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'nose'), True)	(('nose', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'nose'), True)	(('nose', 'below', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'ear'), True)	(('ear', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'ear'), True)	(('ear', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'antler'), True)	(('antler', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'antler'), True)	(('antler', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'eye'), True)	(('eye', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'eye'), True)	(('eye', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'nose'), True)	(('nose', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'nose'), True)	(('nose', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'mouth'), True)	(('mouth', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'mouth'), True)	(('mouth', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'above', 'leg'), True)	(('leg', 'above', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'leg'), True)	(('leg', 'below', 'tail'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'hoof'), True)	(('hoof', 'connects', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'hoof'), True)	(('hoof', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'hoof'), True)	(('hoof', 'below', 'leg'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'eye')('eye', 'above', 'nose')	(('ear', 'above', 'nose'), True)
Constraint 4 (True antecedent)	('antler', 'above', 'eye')('eye', 'above', 'nose')	(('antler', 'above', 'nose'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'nose')('nose', 'above', 'mouth')	(('eye', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('tail', 'above', 'leg')('leg', 'above', 'hoof')	(('tail', 'above', 'hoof'), True)
Constraint 4 (True antecedent)	('nose', 'below', 'eye')('eye', 'below', 'ear')	(('nose', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('nose', 'below', 'eye')('eye', 'below', 'antler')	(('nose', 'below', 'antler'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'eye')	(('mouth', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('hoof', 'below', 'leg')('leg', 'below', 'tail')	(('hoof', 'below', 'tail'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'ear'), False)	(('ear', 'below', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'antler'), False)	(('antler', 'below', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'eye'), False)	(('eye', 'below', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'behind', 'tail'), False)	(('tail', 'in front of', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('antler', 'behind', 'tail'), False)	(('tail', 'in front of', 'antler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'tail'), False)	(('tail', 'in front of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'behind', 'tail'), False)	(('tail', 'in front of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'behind', 'tail'), False)	(('tail', 'in front of', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'tail'), False)	(('tail', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hoof', 'above', 'leg'), False)	(('leg', 'below', 'hoof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'nose'), True)	(('nose', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('antler', 'above', 'nose'), True)	(('nose', 'above', 'antler'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'mouth'), True)	(('mouth', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'above', 'hoof'), True)	(('hoof', 'above', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'below', 'ear'), True)	(('ear', 'below', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'below', 'antler'), True)	(('antler', 'below', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'eye'), True)	(('eye', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hoof', 'below', 'tail'), True)	(('tail', 'below', 'hoof'), False)
Constraint 4 (True antecedent)	('ear', 'above', 'eye')('eye', 'above', 'mouth')	(('ear', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('antler', 'above', 'eye')('eye', 'above', 'mouth')	(('antler', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'ear')	(('mouth', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'antler')	(('mouth', 'below', 'antler'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'mouth'), True)	(('mouth', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('antler', 'above', 'mouth'), True)	(('mouth', 'above', 'antler'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'ear'), True)	(('ear', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'antler'), True)	(('antler', 'below', 'mouth'), False)
Round 4 ...
deer worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('antler', 'connects', 'head'), True)	(('head', 'connects', 'antler'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('antler', 'above', 'head'), True)	(('head', 'above', 'antler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('antler', 'above', 'head'), True)	(('head', 'below', 'antler'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'nose'), True)	(('nose', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'nose'), True)	(('nose', 'below', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'part of', 'head'), True)	(('head', 'part of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'part of', 'head'), True)	(('head', 'has part', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'part of', 'head'), True)	(('head', 'part of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'part of', 'head'), True)	(('head', 'has part', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'part of', 'head'), True)	(('head', 'part of', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'part of', 'head'), True)	(('head', 'has part', 'mouth'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'ear'), True)	(('ear', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'head'), True)	(('head', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'head'), True)	(('head', 'in front of', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'hoof'), True)	(('hoof', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'hoof'), True)	(('hoof', 'below', 'leg'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'hoof'), True)	(('hoof', 'connects', 'leg'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'nose')('nose', 'above', 'mouth')	(('eye', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('body', 'above', 'leg')('leg', 'above', 'hoof')	(('body', 'above', 'hoof'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'body')('body', 'behind', 'head')	(('tail', 'behind', 'head'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'eye')	(('mouth', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('head', 'in front of', 'body')('body', 'in front of', 'tail')	(('head', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('hoof', 'below', 'leg')('leg', 'below', 'body')	(('hoof', 'below', 'body'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'antler'), False)	(('antler', 'below', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'eye'), False)	(('eye', 'below', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'eye'), False)	(('eye', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'nose'), False)	(('nose', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'mouth'), False)	(('mouth', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'behind', 'body'), False)	(('body', 'in front of', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hoof', 'above', 'leg'), False)	(('leg', 'below', 'hoof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'mouth'), True)	(('mouth', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'hoof'), True)	(('hoof', 'above', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'head'), True)	(('head', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'eye'), True)	(('eye', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'in front of', 'tail'), True)	(('tail', 'in front of', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hoof', 'below', 'body'), True)	(('body', 'below', 'hoof'), False)
Round 3 ...
dog worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('ear', 'next to', 'head'), True)	(('head', 'next to', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'connects', 'head'), True)	(('head', 'connects', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'mouth'), True)	(('mouth', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'nose'), True)	(('nose', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'eye'), True)	(('eye', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'body'), True)	(('body', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'body'), True)	(('body', 'below', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'head'), True)	(('head', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'head'), True)	(('head', 'in front of', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tongue', 'inside', 'mouth'), True)	(('mouth', 'inside', 'tongue'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tongue', 'inside', 'mouth'), True)	(('mouth', 'contains', 'tongue'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'tail'), True)	(('tail', 'connects', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'foot'), True)	(('foot', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'foot'), True)	(('foot', 'below', 'leg'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'foot'), True)	(('foot', 'connects', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'leg'), True)	(('leg', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'leg'), True)	(('leg', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'nose'), True)	(('nose', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'nose'), True)	(('nose', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'leg')	(('head', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('body', 'above', 'leg')('leg', 'above', 'foot')	(('body', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'nose')('nose', 'above', 'mouth')	(('eye', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'head')	(('leg', 'below', 'head'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'eye')	(('mouth', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'leg')('leg', 'below', 'body')	(('foot', 'below', 'body'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'head'), False)	(('head', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'behind', 'body'), False)	(('body', 'in front of', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'inside', 'tongue'), False)	(('tongue', 'contains', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'above', 'leg'), False)	(('leg', 'below', 'foot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'behind', 'tail'), False)	(('tail', 'in front of', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'eye'), False)	(('eye', 'below', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'leg'), True)	(('leg', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'foot'), True)	(('foot', 'above', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'mouth'), True)	(('mouth', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'head'), True)	(('head', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'eye'), True)	(('eye', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'body'), True)	(('body', 'below', 'foot'), False)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'foot')	(('head', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'leg')('leg', 'below', 'head')	(('foot', 'below', 'head'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'foot'), True)	(('foot', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'head'), True)	(('head', 'below', 'foot'), False)
Round 4 ...
dog worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'ear'), True)	(('ear', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'body'), True)	(('body', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'part of', 'head'), True)	(('head', 'part of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'part of', 'head'), True)	(('head', 'has part', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'part of', 'head'), True)	(('head', 'part of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'part of', 'head'), True)	(('head', 'has part', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tongue', 'part of', 'mouth'), True)	(('mouth', 'part of', 'tongue'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tongue', 'part of', 'mouth'), True)	(('mouth', 'has part', 'tongue'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'foot'), True)	(('foot', 'connects', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'foot'), True)	(('foot', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'foot'), True)	(('foot', 'below', 'leg'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'eye'), False)	(('eye', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'nose'), False)	(('nose', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'part of', 'tongue'), False)	(('tongue', 'has part', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'above', 'leg'), False)	(('leg', 'below', 'foot'), False)
Round 3 ...
dog worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'torso'), True)	(('torso', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'part of', 'head'), True)	(('head', 'part of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'part of', 'head'), True)	(('head', 'has part', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'part of', 'head'), True)	(('head', 'part of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'part of', 'head'), True)	(('head', 'has part', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'part of', 'head'), True)	(('head', 'part of', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'part of', 'head'), True)	(('head', 'has part', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'part of', 'head'), True)	(('head', 'part of', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'part of', 'head'), True)	(('head', 'has part', 'mouth'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tongue', 'inside', 'mouth'), True)	(('mouth', 'inside', 'tongue'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tongue', 'inside', 'mouth'), True)	(('mouth', 'contains', 'tongue'), True)
Constraint 1: x rln y <-> y rln x	(('torso', 'connects', 'leg'), True)	(('leg', 'connects', 'torso'), True)
Constraint 1: x rln y <-> y rln x	(('torso', 'connects', 'tail'), True)	(('tail', 'connects', 'torso'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'foot'), True)	(('foot', 'connects', 'leg'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'eye'), False)	(('eye', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'nose'), False)	(('nose', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'ear'), False)	(('ear', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'mouth'), False)	(('mouth', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'inside', 'tongue'), False)	(('tongue', 'contains', 'mouth'), False)
Round 3 ...
doorbell worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('transformer', 'connects', 'wiring'), True)	(('wiring', 'connects', 'transformer'), True)
Constraint 1: x rln y <-> y rln x	(('transformer', 'connects', 'power supply'), True)	(('power supply', 'connects', 'transformer'), True)
Constraint 1: x rln y <-> y rln x	(('bell wire', 'connects', 'doorbell button'), True)	(('doorbell button', 'connects', 'bell wire'), True)
Constraint 1: x rln y <-> y rln x	(('bell wire', 'connects', 'chime unit'), True)	(('chime unit', 'connects', 'bell wire'), True)
Round 2 ...
doorbell worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('transformer', 'connects', 'bell wire'), True)	(('bell wire', 'connects', 'transformer'), True)
Constraint 1: x rln y <-> y rln x	(('transformer', 'connects', 'chime unit'), True)	(('chime unit', 'connects', 'transformer'), True)
Constraint 1: x rln y <-> y rln x	(('bell wire', 'connects', 'doorbell button'), True)	(('doorbell button', 'connects', 'bell wire'), True)
Constraint 1: x rln y <-> y rln x	(('doorbell button', 'connects', 'chime unit'), True)	(('chime unit', 'connects', 'doorbell button'), True)
Round 2 ...
doorbell worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('transformer', 'connects', 'bell wire'), True)	(('bell wire', 'connects', 'transformer'), True)
Constraint 1: x rln y <-> y rln x	(('transformer', 'connects', 'power supply'), True)	(('power supply', 'connects', 'transformer'), True)
Constraint 1: x rln y <-> y rln x	(('bell wire', 'connects', 'doorbell button'), True)	(('doorbell button', 'connects', 'bell wire'), True)
Constraint 1: x rln y <-> y rln x	(('chime unit', 'connects', 'transformer'), True)	(('transformer', 'connects', 'chime unit'), True)
Constraint 1: x rln y <-> y rln x	(('chime unit', 'connects', 'doorbell button'), True)	(('doorbell button', 'connects', 'chime unit'), True)
Round 2 ...
fire extinguisher worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('tamper seal', 'connects', 'pull pin'), True)	(('pull pin', 'connects', 'tamper seal'), True)
Constraint 1: x rln y <-> y rln x	(('tamper seal', 'next to', 'pull pin'), True)	(('pull pin', 'next to', 'tamper seal'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pull pin', 'above', 'release lever'), True)	(('release lever', 'above', 'pull pin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pull pin', 'above', 'release lever'), True)	(('release lever', 'below', 'pull pin'), True)
Constraint 1: x rln y <-> y rln x	(('pull pin', 'connects', 'release lever'), True)	(('release lever', 'connects', 'pull pin'), True)
Constraint 1: x rln y <-> y rln x	(('release lever', 'connects', 'valve assembly'), True)	(('valve assembly', 'connects', 'release lever'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('valve assembly', 'above', 'release lever'), True)	(('release lever', 'above', 'valve assembly'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve assembly', 'above', 'release lever'), True)	(('release lever', 'below', 'valve assembly'), True)
Constraint 1: x rln y <-> y rln x	(('valve assembly', 'connects', 'hose'), True)	(('hose', 'connects', 'valve assembly'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('valve assembly', 'above', 'cylindrical tank'), True)	(('cylindrical tank', 'above', 'valve assembly'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve assembly', 'above', 'cylindrical tank'), True)	(('cylindrical tank', 'below', 'valve assembly'), True)
Constraint 1: x rln y <-> y rln x	(('valve assembly', 'connects', 'handle'), True)	(('handle', 'connects', 'valve assembly'), True)
Constraint 1: x rln y <-> y rln x	(('valve assembly', 'connects', 'cylindrical tank'), True)	(('cylindrical tank', 'connects', 'valve assembly'), True)
Constraint 1: x rln y <-> y rln x	(('valve assembly', 'next to', 'handle'), True)	(('handle', 'next to', 'valve assembly'), True)
Constraint 1: x rln y <-> y rln x	(('hose', 'connects', 'cylindrical tank'), True)	(('cylindrical tank', 'connects', 'hose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('propellant', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'inside', 'propellant'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propellant', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'contains', 'propellant'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('extinguishing agent', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'inside', 'extinguishing agent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('extinguishing agent', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'contains', 'extinguishing agent'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('release lever', 'above', 'pull pin'), False)	(('pull pin', 'below', 'release lever'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('release lever', 'above', 'valve assembly'), False)	(('valve assembly', 'below', 'release lever'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cylindrical tank', 'above', 'valve assembly'), False)	(('valve assembly', 'below', 'cylindrical tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cylindrical tank', 'inside', 'propellant'), False)	(('propellant', 'contains', 'cylindrical tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cylindrical tank', 'inside', 'extinguishing agent'), False)	(('extinguishing agent', 'contains', 'cylindrical tank'), False)
Round 3 ...
fire extinguisher worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('hose', 'connects', 'valve assembly'), True)	(('valve assembly', 'connects', 'hose'), True)
Constraint 1: x rln y <-> y rln x	(('valve assembly', 'next to', 'release lever'), True)	(('release lever', 'next to', 'valve assembly'), True)
Constraint 1: x rln y <-> y rln x	(('release lever', 'next to', 'poll pin'), True)	(('poll pin', 'next to', 'release lever'), True)
Constraint 1: x rln y <-> y rln x	(('release lever', 'next to', 'tamper seal'), True)	(('tamper seal', 'next to', 'release lever'), True)
Constraint 1: x rln y <-> y rln x	(('tamper seal', 'next to', 'handle'), True)	(('handle', 'next to', 'tamper seal'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('extinguishing agent', 'requires', 'propellant'), True)	(('propellant', 'requires', 'extinguishing agent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('extinguishing agent', 'requires', 'propellant'), True)	(('propellant', 'required by', 'extinguishing agent'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('extinguishing agent', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'inside', 'extinguishing agent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('extinguishing agent', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'contains', 'extinguishing agent'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('extinguishing agent', 'above', 'propellant'), True)	(('propellant', 'above', 'extinguishing agent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('extinguishing agent', 'above', 'propellant'), True)	(('propellant', 'below', 'extinguishing agent'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('propellant', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'inside', 'propellant'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propellant', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'contains', 'propellant'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('propellant', 'requires', 'extinguishing agent'), False)	(('extinguishing agent', 'required by', 'propellant'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cylindrical tank', 'inside', 'extinguishing agent'), False)	(('extinguishing agent', 'contains', 'cylindrical tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propellant', 'above', 'extinguishing agent'), False)	(('extinguishing agent', 'below', 'propellant'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cylindrical tank', 'inside', 'propellant'), False)	(('propellant', 'contains', 'cylindrical tank'), False)
Round 3 ...
fire extinguisher worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('cylindrical tank', 'connects', 'valve assembly'), True)	(('valve assembly', 'connects', 'cylindrical tank'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('extinguishing agent', 'above', 'propellant'), True)	(('propellant', 'above', 'extinguishing agent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('extinguishing agent', 'above', 'propellant'), True)	(('propellant', 'below', 'extinguishing agent'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('extinguishing agent', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'inside', 'extinguishing agent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('extinguishing agent', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'contains', 'extinguishing agent'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('propellant', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'inside', 'propellant'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propellant', 'inside', 'cylindrical tank'), True)	(('cylindrical tank', 'contains', 'propellant'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('valve assembly', 'above', 'cylindrical tank'), True)	(('cylindrical tank', 'above', 'valve assembly'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve assembly', 'above', 'cylindrical tank'), True)	(('cylindrical tank', 'below', 'valve assembly'), True)
Constraint 1: x rln y <-> y rln x	(('valve assembly', 'connects', 'hose'), True)	(('hose', 'connects', 'valve assembly'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pull pin', 'part of', 'valve assembly'), True)	(('valve assembly', 'part of', 'pull pin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pull pin', 'part of', 'valve assembly'), True)	(('valve assembly', 'has part', 'pull pin'), True)
Constraint 1: x rln y <-> y rln x	(('pull pin', 'connects', 'handle'), True)	(('handle', 'connects', 'pull pin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('release lever', 'part of', 'valve assembly'), True)	(('valve assembly', 'part of', 'release lever'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('release lever', 'part of', 'valve assembly'), True)	(('valve assembly', 'has part', 'release lever'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('release lever', 'above', 'tamper seal'), True)	(('tamper seal', 'above', 'release lever'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('release lever', 'above', 'tamper seal'), True)	(('tamper seal', 'below', 'release lever'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tamper seal', 'part of', 'valve assembly'), True)	(('valve assembly', 'part of', 'tamper seal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tamper seal', 'part of', 'valve assembly'), True)	(('valve assembly', 'has part', 'tamper seal'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tamper seal', 'above', 'handle'), True)	(('handle', 'above', 'tamper seal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tamper seal', 'above', 'handle'), True)	(('handle', 'below', 'tamper seal'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'part of', 'valve assembly'), True)	(('valve assembly', 'part of', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'valve assembly'), True)	(('valve assembly', 'has part', 'handle'), True)
Constraint 4 (True antecedent)	('release lever', 'above', 'tamper seal')('tamper seal', 'above', 'handle')	(('release lever', 'above', 'handle'), True)
Constraint 4 (True antecedent)	('handle', 'below', 'tamper seal')('tamper seal', 'below', 'release lever')	(('handle', 'below', 'release lever'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('propellant', 'above', 'extinguishing agent'), False)	(('extinguishing agent', 'below', 'propellant'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cylindrical tank', 'inside', 'extinguishing agent'), False)	(('extinguishing agent', 'contains', 'cylindrical tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cylindrical tank', 'inside', 'propellant'), False)	(('propellant', 'contains', 'cylindrical tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cylindrical tank', 'above', 'valve assembly'), False)	(('valve assembly', 'below', 'cylindrical tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve assembly', 'part of', 'pull pin'), False)	(('pull pin', 'has part', 'valve assembly'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve assembly', 'part of', 'release lever'), False)	(('release lever', 'has part', 'valve assembly'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tamper seal', 'above', 'release lever'), False)	(('release lever', 'below', 'tamper seal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve assembly', 'part of', 'tamper seal'), False)	(('tamper seal', 'has part', 'valve assembly'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'tamper seal'), False)	(('tamper seal', 'below', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve assembly', 'part of', 'handle'), False)	(('handle', 'has part', 'valve assembly'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('release lever', 'above', 'handle'), True)	(('handle', 'above', 'release lever'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'below', 'release lever'), True)	(('release lever', 'below', 'handle'), False)
Round 3 ...
hair dryer worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('barrel', 'connects', 'air-outlet grille'), True)	(('air-outlet grille', 'connects', 'barrel'), True)
Constraint 1: x rln y <-> y rln x	(('barrel', 'connects', 'fan housing'), True)	(('fan housing', 'connects', 'barrel'), True)
Constraint 1: x rln y <-> y rln x	(('barrel', 'connects', 'handle'), True)	(('handle', 'connects', 'barrel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('barrel', 'above', 'handle'), True)	(('handle', 'above', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'above', 'handle'), True)	(('handle', 'below', 'barrel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('barrel', 'behind', 'air-outlet grille'), True)	(('air-outlet grille', 'behind', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'behind', 'air-outlet grille'), True)	(('air-outlet grille', 'in front of', 'barrel'), True)
Constraint 1: x rln y <-> y rln x	(('fan housing', 'connects', 'air-inlet grille'), True)	(('air-inlet grille', 'connects', 'fan housing'), True)
Constraint 1: x rln y <-> y rln x	(('fan housing', 'connects', 'handle'), True)	(('handle', 'connects', 'fan housing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fan housing', 'above', 'handle'), True)	(('handle', 'above', 'fan housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan housing', 'above', 'handle'), True)	(('handle', 'below', 'fan housing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fan housing', 'behind', 'barrel'), True)	(('barrel', 'behind', 'fan housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan housing', 'behind', 'barrel'), True)	(('barrel', 'in front of', 'fan housing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('air-inlet grille', 'behind', 'fan housing'), True)	(('fan housing', 'behind', 'air-inlet grille'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('air-inlet grille', 'behind', 'fan housing'), True)	(('fan housing', 'in front of', 'air-inlet grille'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'heat selector switch'), True)	(('heat selector switch', 'connects', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'on-off switch'), True)	(('on-off switch', 'connects', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'speed selector switch'), True)	(('speed selector switch', 'connects', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'power supply cord'), True)	(('power supply cord', 'connects', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'above', 'power supply cord'), True)	(('power supply cord', 'above', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'power supply cord'), True)	(('power supply cord', 'below', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'above', 'hang-up ring'), True)	(('hang-up ring', 'above', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'hang-up ring'), True)	(('hang-up ring', 'below', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'hang-up ring'), True)	(('hang-up ring', 'connects', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('heat selector switch', 'next to', 'on-off switch'), True)	(('on-off switch', 'next to', 'heat selector switch'), True)
Constraint 1: x rln y <-> y rln x	(('heat selector switch', 'next to', 'speed selector switch'), True)	(('speed selector switch', 'next to', 'heat selector switch'), True)
Constraint 1: x rln y <-> y rln x	(('speed selector switch', 'next to', 'on-off switch'), True)	(('on-off switch', 'next to', 'speed selector switch'), True)
Constraint 1: x rln y <-> y rln x	(('power supply cord', 'next to', 'hang-up ring'), True)	(('hang-up ring', 'next to', 'power supply cord'), True)
Constraint 4 (True antecedent)	('barrel', 'above', 'handle')('handle', 'above', 'power supply cord')	(('barrel', 'above', 'power supply cord'), True)
Constraint 4 (True antecedent)	('barrel', 'above', 'handle')('handle', 'above', 'hang-up ring')	(('barrel', 'above', 'hang-up ring'), True)
Constraint 4 (True antecedent)	('fan housing', 'above', 'handle')('handle', 'above', 'power supply cord')	(('fan housing', 'above', 'power supply cord'), True)
Constraint 4 (True antecedent)	('fan housing', 'above', 'handle')('handle', 'above', 'hang-up ring')	(('fan housing', 'above', 'hang-up ring'), True)
Constraint 4 (True antecedent)	('fan housing', 'behind', 'barrel')('barrel', 'behind', 'air-outlet grille')	(('fan housing', 'behind', 'air-outlet grille'), True)
Constraint 4 (True antecedent)	('air-inlet grille', 'behind', 'fan housing')('fan housing', 'behind', 'barrel')	(('air-inlet grille', 'behind', 'barrel'), True)
Constraint 4 (True antecedent)	('air-outlet grille', 'in front of', 'barrel')('barrel', 'in front of', 'fan housing')	(('air-outlet grille', 'in front of', 'fan housing'), True)
Constraint 4 (True antecedent)	('barrel', 'in front of', 'fan housing')('fan housing', 'in front of', 'air-inlet grille')	(('barrel', 'in front of', 'air-inlet grille'), True)
Constraint 4 (True antecedent)	('power supply cord', 'below', 'handle')('handle', 'below', 'barrel')	(('power supply cord', 'below', 'barrel'), True)
Constraint 4 (True antecedent)	('power supply cord', 'below', 'handle')('handle', 'below', 'fan housing')	(('power supply cord', 'below', 'fan housing'), True)
Constraint 4 (True antecedent)	('hang-up ring', 'below', 'handle')('handle', 'below', 'barrel')	(('hang-up ring', 'below', 'barrel'), True)
Constraint 4 (True antecedent)	('hang-up ring', 'below', 'handle')('handle', 'below', 'fan housing')	(('hang-up ring', 'below', 'fan housing'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'barrel'), False)	(('barrel', 'below', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('air-outlet grille', 'behind', 'barrel'), False)	(('barrel', 'in front of', 'air-outlet grille'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'fan housing'), False)	(('fan housing', 'below', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'behind', 'fan housing'), False)	(('fan housing', 'in front of', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan housing', 'behind', 'air-inlet grille'), False)	(('air-inlet grille', 'in front of', 'fan housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power supply cord', 'above', 'handle'), False)	(('handle', 'below', 'power supply cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hang-up ring', 'above', 'handle'), False)	(('handle', 'below', 'hang-up ring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('barrel', 'above', 'power supply cord'), True)	(('power supply cord', 'above', 'barrel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('barrel', 'above', 'hang-up ring'), True)	(('hang-up ring', 'above', 'barrel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fan housing', 'above', 'power supply cord'), True)	(('power supply cord', 'above', 'fan housing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fan housing', 'above', 'hang-up ring'), True)	(('hang-up ring', 'above', 'fan housing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fan housing', 'behind', 'air-outlet grille'), True)	(('air-outlet grille', 'behind', 'fan housing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('air-inlet grille', 'behind', 'barrel'), True)	(('barrel', 'behind', 'air-inlet grille'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('air-outlet grille', 'in front of', 'fan housing'), True)	(('fan housing', 'in front of', 'air-outlet grille'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('barrel', 'in front of', 'air-inlet grille'), True)	(('air-inlet grille', 'in front of', 'barrel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('power supply cord', 'below', 'barrel'), True)	(('barrel', 'below', 'power supply cord'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('power supply cord', 'below', 'fan housing'), True)	(('fan housing', 'below', 'power supply cord'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hang-up ring', 'below', 'barrel'), True)	(('barrel', 'below', 'hang-up ring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hang-up ring', 'below', 'fan housing'), True)	(('fan housing', 'below', 'hang-up ring'), False)
Constraint 4 (True antecedent)	('air-inlet grille', 'behind', 'fan housing')('fan housing', 'behind', 'air-outlet grille')	(('air-inlet grille', 'behind', 'air-outlet grille'), True)
Constraint 4 (True antecedent)	('air-outlet grille', 'in front of', 'barrel')('barrel', 'in front of', 'air-inlet grille')	(('air-outlet grille', 'in front of', 'air-inlet grille'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('air-inlet grille', 'behind', 'air-outlet grille'), True)	(('air-outlet grille', 'behind', 'air-inlet grille'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('air-outlet grille', 'in front of', 'air-inlet grille'), True)	(('air-inlet grille', 'in front of', 'air-outlet grille'), False)
Round 4 ...
hair dryer worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('fan blades', 'inside', 'fan housing'), True)	(('fan housing', 'inside', 'fan blades'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan blades', 'inside', 'fan housing'), True)	(('fan housing', 'contains', 'fan blades'), True)
Constraint 1: x rln y <-> y rln x	(('barrel', 'connects', 'fan housing'), True)	(('fan housing', 'connects', 'barrel'), True)
Constraint 1: x rln y <-> y rln x	(('barrel', 'connects', 'handle'), True)	(('handle', 'connects', 'barrel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('barrel', 'above', 'handle'), True)	(('handle', 'above', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'above', 'handle'), True)	(('handle', 'below', 'barrel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fan housing', 'behind', 'barrel'), True)	(('barrel', 'behind', 'fan housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan housing', 'behind', 'barrel'), True)	(('barrel', 'in front of', 'fan housing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('air-outlet grille', 'inside', 'barrel'), True)	(('barrel', 'inside', 'air-outlet grille'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('air-outlet grille', 'inside', 'barrel'), True)	(('barrel', 'contains', 'air-outlet grille'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heating coils', 'inside', 'barrel'), True)	(('barrel', 'inside', 'heating coils'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating coils', 'inside', 'barrel'), True)	(('barrel', 'contains', 'heating coils'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heating coils', 'behind', 'air-outlet grille'), True)	(('air-outlet grille', 'behind', 'heating coils'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating coils', 'behind', 'air-outlet grille'), True)	(('air-outlet grille', 'in front of', 'heating coils'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'power cord'), True)	(('power cord', 'connects', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'above', 'power cord'), True)	(('power cord', 'above', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'power cord'), True)	(('power cord', 'below', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('speed selector switch', 'part of', 'handle'), True)	(('handle', 'part of', 'speed selector switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('speed selector switch', 'part of', 'handle'), True)	(('handle', 'has part', 'speed selector switch'), True)
Constraint 1: x rln y <-> y rln x	(('speed selector switch', 'next to', 'power switch'), True)	(('power switch', 'next to', 'speed selector switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power switch', 'part of', 'handle'), True)	(('handle', 'part of', 'power switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power switch', 'part of', 'handle'), True)	(('handle', 'has part', 'power switch'), True)
Constraint 4 (True antecedent)	('barrel', 'above', 'handle')('handle', 'above', 'power cord')	(('barrel', 'above', 'power cord'), True)
Constraint 4 (True antecedent)	('power cord', 'below', 'handle')('handle', 'below', 'barrel')	(('power cord', 'below', 'barrel'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('fan housing', 'inside', 'fan blades'), False)	(('fan blades', 'contains', 'fan housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'barrel'), False)	(('barrel', 'below', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'behind', 'fan housing'), False)	(('fan housing', 'in front of', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'inside', 'air-outlet grille'), False)	(('air-outlet grille', 'contains', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'inside', 'heating coils'), False)	(('heating coils', 'contains', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('air-outlet grille', 'behind', 'heating coils'), False)	(('heating coils', 'in front of', 'air-outlet grille'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power cord', 'above', 'handle'), False)	(('handle', 'below', 'power cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'speed selector switch'), False)	(('speed selector switch', 'has part', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'power switch'), False)	(('power switch', 'has part', 'handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('barrel', 'above', 'power cord'), True)	(('power cord', 'above', 'barrel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('power cord', 'below', 'barrel'), True)	(('barrel', 'below', 'power cord'), False)
Round 3 ...
hair dryer worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('barrel', 'connects', 'fan housing'), True)	(('fan housing', 'connects', 'barrel'), True)
Constraint 1: x rln y <-> y rln x	(('barrel', 'connects', 'handle'), True)	(('handle', 'connects', 'barrel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fan housing', 'above', 'handle'), True)	(('handle', 'above', 'fan housing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan housing', 'above', 'handle'), True)	(('handle', 'below', 'fan housing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('air-outlet grille', 'inside', 'barrel'), True)	(('barrel', 'inside', 'air-outlet grille'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('air-outlet grille', 'inside', 'barrel'), True)	(('barrel', 'contains', 'air-outlet grille'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('speed selector switch', 'part of', 'handle'), True)	(('handle', 'part of', 'speed selector switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('speed selector switch', 'part of', 'handle'), True)	(('handle', 'has part', 'speed selector switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('speed selector switch', 'above', 'power switch'), True)	(('power switch', 'above', 'speed selector switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('speed selector switch', 'above', 'power switch'), True)	(('power switch', 'below', 'speed selector switch'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'power cord'), True)	(('power cord', 'connects', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power switch', 'part of', 'handle'), True)	(('handle', 'part of', 'power switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power switch', 'part of', 'handle'), True)	(('handle', 'has part', 'power switch'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'fan housing'), False)	(('fan housing', 'below', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'inside', 'air-outlet grille'), False)	(('air-outlet grille', 'contains', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'speed selector switch'), False)	(('speed selector switch', 'has part', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power switch', 'above', 'speed selector switch'), False)	(('speed selector switch', 'below', 'power switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'power switch'), False)	(('power switch', 'has part', 'handle'), False)
Round 3 ...
ink pen worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('barrel', 'connects', 'cap'), True)	(('cap', 'connects', 'barrel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('barrel', 'surrounds', 'section'), True)	(('section', 'surrounds', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'surrounds', 'section'), True)	(('section', 'surrounded by', 'barrel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('barrel', 'surrounds', 'converter'), True)	(('converter', 'surrounds', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'surrounds', 'converter'), True)	(('converter', 'surrounded by', 'barrel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nib', 'inside', 'cap'), True)	(('cap', 'inside', 'nib'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nib', 'inside', 'cap'), True)	(('cap', 'contains', 'nib'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feed', 'inside', 'nib'), True)	(('nib', 'inside', 'feed'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feed', 'inside', 'nib'), True)	(('nib', 'contains', 'feed'), True)
Constraint 1: x rln y <-> y rln x	(('feed', 'connects', 'section'), True)	(('section', 'connects', 'feed'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('section', 'inside', 'barrel'), True)	(('barrel', 'inside', 'section'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('section', 'inside', 'barrel'), True)	(('barrel', 'contains', 'section'), True)
Constraint 1: x rln y <-> y rln x	(('section', 'connects', 'converter'), True)	(('converter', 'connects', 'section'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'surrounds', 'nib'), True)	(('nib', 'surrounds', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'surrounds', 'nib'), True)	(('nib', 'surrounded by', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'surrounds', 'feed'), True)	(('feed', 'surrounds', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'surrounds', 'feed'), True)	(('feed', 'surrounded by', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('converter', 'inside', 'barrel'), True)	(('barrel', 'inside', 'converter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('converter', 'inside', 'barrel'), True)	(('barrel', 'contains', 'converter'), True)
Constraint 4 (True antecedent)	('feed', 'inside', 'nib')('nib', 'inside', 'cap')	(('feed', 'inside', 'cap'), True)
Constraint 4 (True antecedent)	('cap', 'contains', 'nib')('nib', 'contains', 'feed')	(('cap', 'contains', 'feed'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('section', 'surrounds', 'barrel'), False)	(('barrel', 'surrounded by', 'section'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('converter', 'surrounds', 'barrel'), False)	(('barrel', 'surrounded by', 'converter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'inside', 'nib'), False)	(('nib', 'contains', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nib', 'inside', 'feed'), False)	(('feed', 'contains', 'nib'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'inside', 'section'), False)	(('section', 'contains', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nib', 'surrounds', 'cap'), False)	(('cap', 'surrounded by', 'nib'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feed', 'surrounds', 'cap'), False)	(('cap', 'surrounded by', 'feed'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'inside', 'converter'), False)	(('converter', 'contains', 'barrel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('feed', 'inside', 'cap'), True)	(('cap', 'inside', 'feed'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'contains', 'feed'), True)	(('feed', 'contains', 'cap'), False)
Round 3 ...
ink pen worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('nib', 'connects', 'feed'), True)	(('feed', 'connects', 'nib'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nib', 'above', 'feed'), True)	(('feed', 'above', 'nib'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nib', 'above', 'feed'), True)	(('feed', 'below', 'nib'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nib', 'inside', 'cap'), True)	(('cap', 'inside', 'nib'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nib', 'inside', 'cap'), True)	(('cap', 'contains', 'nib'), True)
Constraint 1: x rln y <-> y rln x	(('feed', 'connects', 'section'), True)	(('section', 'connects', 'feed'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feed', 'above', 'section'), True)	(('section', 'above', 'feed'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feed', 'above', 'section'), True)	(('section', 'below', 'feed'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feed', 'inside', 'cap'), True)	(('cap', 'inside', 'feed'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feed', 'inside', 'cap'), True)	(('cap', 'contains', 'feed'), True)
Constraint 1: x rln y <-> y rln x	(('section', 'connects', 'converter'), True)	(('converter', 'connects', 'section'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('section', 'above', 'converter'), True)	(('converter', 'above', 'section'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('section', 'above', 'converter'), True)	(('converter', 'below', 'section'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('section', 'inside', 'barrel'), True)	(('barrel', 'inside', 'section'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('section', 'inside', 'barrel'), True)	(('barrel', 'contains', 'section'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('section', 'inside', 'cap'), True)	(('cap', 'inside', 'section'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('section', 'inside', 'cap'), True)	(('cap', 'contains', 'section'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('converter', 'inside', 'barrel'), True)	(('barrel', 'inside', 'converter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('converter', 'inside', 'barrel'), True)	(('barrel', 'contains', 'converter'), True)
Constraint 1: x rln y <-> y rln x	(('cap', 'connects', 'barrel'), True)	(('barrel', 'connects', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'above', 'barrel'), True)	(('barrel', 'above', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'above', 'barrel'), True)	(('barrel', 'below', 'cap'), True)
Constraint 4 (True antecedent)	('nib', 'above', 'feed')('feed', 'above', 'section')	(('nib', 'above', 'section'), True)
Constraint 4 (True antecedent)	('feed', 'above', 'section')('section', 'above', 'converter')	(('feed', 'above', 'converter'), True)
Constraint 4 (True antecedent)	('section', 'below', 'feed')('feed', 'below', 'nib')	(('section', 'below', 'nib'), True)
Constraint 4 (True antecedent)	('converter', 'below', 'section')('section', 'below', 'feed')	(('converter', 'below', 'feed'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('feed', 'above', 'nib'), False)	(('nib', 'below', 'feed'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'inside', 'nib'), False)	(('nib', 'contains', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('section', 'above', 'feed'), False)	(('feed', 'below', 'section'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'inside', 'feed'), False)	(('feed', 'contains', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('converter', 'above', 'section'), False)	(('section', 'below', 'converter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'inside', 'section'), False)	(('section', 'contains', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'inside', 'section'), False)	(('section', 'contains', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'inside', 'converter'), False)	(('converter', 'contains', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'above', 'cap'), False)	(('cap', 'below', 'barrel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nib', 'above', 'section'), True)	(('section', 'above', 'nib'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('feed', 'above', 'converter'), True)	(('converter', 'above', 'feed'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('section', 'below', 'nib'), True)	(('nib', 'below', 'section'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('converter', 'below', 'feed'), True)	(('feed', 'below', 'converter'), False)
Constraint 4 (True antecedent)	('nib', 'above', 'feed')('feed', 'above', 'converter')	(('nib', 'above', 'converter'), True)
Constraint 4 (True antecedent)	('converter', 'below', 'section')('section', 'below', 'nib')	(('converter', 'below', 'nib'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nib', 'above', 'converter'), True)	(('converter', 'above', 'nib'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('converter', 'below', 'nib'), True)	(('nib', 'below', 'converter'), False)
Round 4 ...
ink pen worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('cap', 'connects', 'barrel'), True)	(('barrel', 'connects', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'surrounds', 'nib'), True)	(('nib', 'surrounds', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'surrounds', 'nib'), True)	(('nib', 'surrounded by', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feed', 'inside', 'nib'), True)	(('nib', 'inside', 'feed'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feed', 'inside', 'nib'), True)	(('nib', 'contains', 'feed'), True)
Constraint 1: x rln y <-> y rln x	(('feed', 'connects', 'section'), True)	(('section', 'connects', 'feed'), True)
Constraint 1: x rln y <-> y rln x	(('section', 'connects', 'converter'), True)	(('converter', 'connects', 'section'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('section', 'inside', 'barrel'), True)	(('barrel', 'inside', 'section'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('section', 'inside', 'barrel'), True)	(('barrel', 'contains', 'section'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('converter', 'inside', 'barrel'), True)	(('barrel', 'inside', 'converter'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('converter', 'inside', 'barrel'), True)	(('barrel', 'contains', 'converter'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('nib', 'surrounds', 'cap'), False)	(('cap', 'surrounded by', 'nib'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nib', 'inside', 'feed'), False)	(('feed', 'contains', 'nib'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'inside', 'section'), False)	(('section', 'contains', 'barrel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('barrel', 'inside', 'converter'), False)	(('converter', 'contains', 'barrel'), False)
Round 3 ...
lightbulb worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tungesten filament', 'inside', 'glass shell'), True)	(('glass shell', 'inside', 'tungesten filament'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tungesten filament', 'inside', 'glass shell'), True)	(('glass shell', 'contains', 'tungesten filament'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('glass shell', 'above', 'metal base'), True)	(('metal base', 'above', 'glass shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass shell', 'above', 'metal base'), True)	(('metal base', 'below', 'glass shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filament support and contact wire', 'inside', 'glass shell'), True)	(('glass shell', 'inside', 'filament support and contact wire'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filament support and contact wire', 'inside', 'glass shell'), True)	(('glass shell', 'contains', 'filament support and contact wire'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('glass shell', 'inside', 'tungesten filament'), False)	(('tungesten filament', 'contains', 'glass shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'above', 'glass shell'), False)	(('glass shell', 'below', 'metal base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass shell', 'inside', 'filament support and contact wire'), False)	(('filament support and contact wire', 'contains', 'glass shell'), False)
Round 3 ...
lightbulb worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('tungesten filament', 'connects', 'filament support and contact wire'), True)	(('filament support and contact wire', 'connects', 'tungesten filament'), True)
Constraint 1: x rln y <-> y rln x	(('tungesten filament', 'next to', 'filament support and contact wire'), True)	(('filament support and contact wire', 'next to', 'tungesten filament'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tungesten filament', 'requires', 'electrical connection'), True)	(('electrical connection', 'requires', 'tungesten filament'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tungesten filament', 'requires', 'electrical connection'), True)	(('electrical connection', 'required by', 'tungesten filament'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('glass shell', 'surrounds', 'tungesten filament'), True)	(('tungesten filament', 'surrounds', 'glass shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass shell', 'surrounds', 'tungesten filament'), True)	(('tungesten filament', 'surrounded by', 'glass shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('glass shell', 'surrounds', 'filament support and contact wire'), True)	(('filament support and contact wire', 'surrounds', 'glass shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass shell', 'surrounds', 'filament support and contact wire'), True)	(('filament support and contact wire', 'surrounded by', 'glass shell'), True)
Constraint 1: x rln y <-> y rln x	(('glass shell', 'connects', 'metal base'), True)	(('metal base', 'connects', 'glass shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('glass shell', 'above', 'metal base'), True)	(('metal base', 'above', 'glass shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass shell', 'above', 'metal base'), True)	(('metal base', 'below', 'glass shell'), True)
Constraint 1: x rln y <-> y rln x	(('filament support and contact wire', 'connects', 'metal base'), True)	(('metal base', 'connects', 'filament support and contact wire'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filament support and contact wire', 'above', 'metal base'), True)	(('metal base', 'above', 'filament support and contact wire'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filament support and contact wire', 'above', 'metal base'), True)	(('metal base', 'below', 'filament support and contact wire'), True)
Constraint 1: x rln y <-> y rln x	(('metal base', 'connects', 'electrical connection'), True)	(('electrical connection', 'connects', 'metal base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('metal base', 'above', 'electrical connection'), True)	(('electrical connection', 'above', 'metal base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'above', 'electrical connection'), True)	(('electrical connection', 'below', 'metal base'), True)
Constraint 4 (True antecedent)	('glass shell', 'above', 'metal base')('metal base', 'above', 'electrical connection')	(('glass shell', 'above', 'electrical connection'), True)
Constraint 4 (True antecedent)	('filament support and contact wire', 'above', 'metal base')('metal base', 'above', 'electrical connection')	(('filament support and contact wire', 'above', 'electrical connection'), True)
Constraint 4 (True antecedent)	('electrical connection', 'below', 'metal base')('metal base', 'below', 'glass shell')	(('electrical connection', 'below', 'glass shell'), True)
Constraint 4 (True antecedent)	('electrical connection', 'below', 'metal base')('metal base', 'below', 'filament support and contact wire')	(('electrical connection', 'below', 'filament support and contact wire'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('electrical connection', 'requires', 'tungesten filament'), False)	(('tungesten filament', 'required by', 'electrical connection'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tungesten filament', 'surrounds', 'glass shell'), False)	(('glass shell', 'surrounded by', 'tungesten filament'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filament support and contact wire', 'surrounds', 'glass shell'), False)	(('glass shell', 'surrounded by', 'filament support and contact wire'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'above', 'glass shell'), False)	(('glass shell', 'below', 'metal base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'above', 'filament support and contact wire'), False)	(('filament support and contact wire', 'below', 'metal base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('electrical connection', 'above', 'metal base'), False)	(('metal base', 'below', 'electrical connection'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('glass shell', 'above', 'electrical connection'), True)	(('electrical connection', 'above', 'glass shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('filament support and contact wire', 'above', 'electrical connection'), True)	(('electrical connection', 'above', 'filament support and contact wire'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('electrical connection', 'below', 'glass shell'), True)	(('glass shell', 'below', 'electrical connection'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('electrical connection', 'below', 'filament support and contact wire'), True)	(('filament support and contact wire', 'below', 'electrical connection'), False)
Round 3 ...
lightbulb worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('glass shell', 'surrounds', 'tungesten filament'), True)	(('tungesten filament', 'surrounds', 'glass shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass shell', 'surrounds', 'tungesten filament'), True)	(('tungesten filament', 'surrounded by', 'glass shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('glass shell', 'surrounds', 'filament support and contact wire'), True)	(('filament support and contact wire', 'surrounds', 'glass shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass shell', 'surrounds', 'filament support and contact wire'), True)	(('filament support and contact wire', 'surrounded by', 'glass shell'), True)
Constraint 1: x rln y <-> y rln x	(('tungesten filament', 'connects', 'filament support and contact wire'), True)	(('filament support and contact wire', 'connects', 'tungesten filament'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tungesten filament', 'above', 'filament support and contact wire'), True)	(('filament support and contact wire', 'above', 'tungesten filament'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tungesten filament', 'above', 'filament support and contact wire'), True)	(('filament support and contact wire', 'below', 'tungesten filament'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tungesten filament', 'requires', 'electrical connection'), True)	(('electrical connection', 'requires', 'tungesten filament'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tungesten filament', 'requires', 'electrical connection'), True)	(('electrical connection', 'required by', 'tungesten filament'), True)
Constraint 1: x rln y <-> y rln x	(('filament support and contact wire', 'connects', 'metal base'), True)	(('metal base', 'connects', 'filament support and contact wire'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filament support and contact wire', 'above', 'metal base'), True)	(('metal base', 'above', 'filament support and contact wire'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filament support and contact wire', 'above', 'metal base'), True)	(('metal base', 'below', 'filament support and contact wire'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('filament support and contact wire', 'requires', 'electrical connection'), True)	(('electrical connection', 'requires', 'filament support and contact wire'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filament support and contact wire', 'requires', 'electrical connection'), True)	(('electrical connection', 'required by', 'filament support and contact wire'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('electrical connection', 'part of', 'metal base'), True)	(('metal base', 'part of', 'electrical connection'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('electrical connection', 'part of', 'metal base'), True)	(('metal base', 'has part', 'electrical connection'), True)
Constraint 4 (True antecedent)	('tungesten filament', 'above', 'filament support and contact wire')('filament support and contact wire', 'above', 'metal base')	(('tungesten filament', 'above', 'metal base'), True)
Constraint 4 (True antecedent)	('metal base', 'below', 'filament support and contact wire')('filament support and contact wire', 'below', 'tungesten filament')	(('metal base', 'below', 'tungesten filament'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('tungesten filament', 'surrounds', 'glass shell'), False)	(('glass shell', 'surrounded by', 'tungesten filament'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filament support and contact wire', 'surrounds', 'glass shell'), False)	(('glass shell', 'surrounded by', 'filament support and contact wire'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('filament support and contact wire', 'above', 'tungesten filament'), False)	(('tungesten filament', 'below', 'filament support and contact wire'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('electrical connection', 'requires', 'tungesten filament'), False)	(('tungesten filament', 'required by', 'electrical connection'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'above', 'filament support and contact wire'), False)	(('filament support and contact wire', 'below', 'metal base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('electrical connection', 'requires', 'filament support and contact wire'), False)	(('filament support and contact wire', 'required by', 'electrical connection'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'part of', 'electrical connection'), False)	(('electrical connection', 'has part', 'metal base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tungesten filament', 'above', 'metal base'), True)	(('metal base', 'above', 'tungesten filament'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal base', 'below', 'tungesten filament'), True)	(('tungesten filament', 'below', 'metal base'), False)
Round 3 ...
microscope worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('eyepiece', 'connects', 'body tube'), True)	(('body tube', 'connects', 'eyepiece'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'above', 'body tube'), True)	(('body tube', 'above', 'eyepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyepiece', 'above', 'body tube'), True)	(('body tube', 'below', 'eyepiece'), True)
Constraint 1: x rln y <-> y rln x	(('body tube', 'connects', 'coarse focus'), True)	(('coarse focus', 'connects', 'body tube'), True)
Constraint 1: x rln y <-> y rln x	(('body tube', 'connects', 'arm'), True)	(('arm', 'connects', 'body tube'), True)
Constraint 1: x rln y <-> y rln x	(('body tube', 'connects', 'nosepiece'), True)	(('nosepiece', 'connects', 'body tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body tube', 'above', 'nosepiece'), True)	(('nosepiece', 'above', 'body tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body tube', 'above', 'nosepiece'), True)	(('nosepiece', 'below', 'body tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body tube', 'above', 'arm'), True)	(('arm', 'above', 'body tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body tube', 'above', 'arm'), True)	(('arm', 'below', 'body tube'), True)
Constraint 1: x rln y <-> y rln x	(('nosepiece', 'connects', 'objective lens'), True)	(('objective lens', 'connects', 'nosepiece'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nosepiece', 'above', 'objective lens'), True)	(('objective lens', 'above', 'nosepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nosepiece', 'above', 'objective lens'), True)	(('objective lens', 'below', 'nosepiece'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'fine focus'), True)	(('fine focus', 'connects', 'arm'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'base'), True)	(('base', 'connects', 'arm'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'stage clips'), True)	(('stage clips', 'connects', 'arm'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'specimen stage'), True)	(('specimen stage', 'connects', 'arm'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('arm', 'above', 'base'), True)	(('base', 'above', 'arm'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('arm', 'above', 'base'), True)	(('base', 'below', 'arm'), True)
Constraint 1: x rln y <-> y rln x	(('specimen stage', 'connects', 'stage clips'), True)	(('stage clips', 'connects', 'specimen stage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('specimen stage', 'above', 'illumination mirror'), True)	(('illumination mirror', 'above', 'specimen stage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('specimen stage', 'above', 'illumination mirror'), True)	(('illumination mirror', 'below', 'specimen stage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('illumination mirror', 'above', 'base'), True)	(('base', 'above', 'illumination mirror'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('illumination mirror', 'above', 'base'), True)	(('base', 'below', 'illumination mirror'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'illumination mirror'), True)	(('illumination mirror', 'connects', 'arm'), True)
Constraint 4 (True antecedent)	('eyepiece', 'above', 'body tube')('body tube', 'above', 'nosepiece')	(('eyepiece', 'above', 'nosepiece'), True)
Constraint 4 (True antecedent)	('eyepiece', 'above', 'body tube')('body tube', 'above', 'arm')	(('eyepiece', 'above', 'arm'), True)
Constraint 4 (True antecedent)	('body tube', 'above', 'nosepiece')('nosepiece', 'above', 'objective lens')	(('body tube', 'above', 'objective lens'), True)
Constraint 4 (True antecedent)	('body tube', 'above', 'arm')('arm', 'above', 'base')	(('body tube', 'above', 'base'), True)
Constraint 4 (True antecedent)	('specimen stage', 'above', 'illumination mirror')('illumination mirror', 'above', 'base')	(('specimen stage', 'above', 'base'), True)
Constraint 4 (True antecedent)	('nosepiece', 'below', 'body tube')('body tube', 'below', 'eyepiece')	(('nosepiece', 'below', 'eyepiece'), True)
Constraint 4 (True antecedent)	('arm', 'below', 'body tube')('body tube', 'below', 'eyepiece')	(('arm', 'below', 'eyepiece'), True)
Constraint 4 (True antecedent)	('objective lens', 'below', 'nosepiece')('nosepiece', 'below', 'body tube')	(('objective lens', 'below', 'body tube'), True)
Constraint 4 (True antecedent)	('base', 'below', 'arm')('arm', 'below', 'body tube')	(('base', 'below', 'body tube'), True)
Constraint 4 (True antecedent)	('base', 'below', 'illumination mirror')('illumination mirror', 'below', 'specimen stage')	(('base', 'below', 'specimen stage'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body tube', 'above', 'eyepiece'), False)	(('eyepiece', 'below', 'body tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nosepiece', 'above', 'body tube'), False)	(('body tube', 'below', 'nosepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('arm', 'above', 'body tube'), False)	(('body tube', 'below', 'arm'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('objective lens', 'above', 'nosepiece'), False)	(('nosepiece', 'below', 'objective lens'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'arm'), False)	(('arm', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('illumination mirror', 'above', 'specimen stage'), False)	(('specimen stage', 'below', 'illumination mirror'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'illumination mirror'), False)	(('illumination mirror', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'above', 'nosepiece'), True)	(('nosepiece', 'above', 'eyepiece'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'above', 'arm'), True)	(('arm', 'above', 'eyepiece'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body tube', 'above', 'objective lens'), True)	(('objective lens', 'above', 'body tube'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body tube', 'above', 'base'), True)	(('base', 'above', 'body tube'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('specimen stage', 'above', 'base'), True)	(('base', 'above', 'specimen stage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nosepiece', 'below', 'eyepiece'), True)	(('eyepiece', 'below', 'nosepiece'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('arm', 'below', 'eyepiece'), True)	(('eyepiece', 'below', 'arm'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('objective lens', 'below', 'body tube'), True)	(('body tube', 'below', 'objective lens'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'body tube'), True)	(('body tube', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'specimen stage'), True)	(('specimen stage', 'below', 'base'), False)
Constraint 4 (True antecedent)	('eyepiece', 'above', 'body tube')('body tube', 'above', 'objective lens')	(('eyepiece', 'above', 'objective lens'), True)
Constraint 4 (True antecedent)	('eyepiece', 'above', 'body tube')('body tube', 'above', 'base')	(('eyepiece', 'above', 'base'), True)
Constraint 4 (True antecedent)	('objective lens', 'below', 'nosepiece')('nosepiece', 'below', 'eyepiece')	(('objective lens', 'below', 'eyepiece'), True)
Constraint 4 (True antecedent)	('base', 'below', 'arm')('arm', 'below', 'eyepiece')	(('base', 'below', 'eyepiece'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'above', 'objective lens'), True)	(('objective lens', 'above', 'eyepiece'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'above', 'base'), True)	(('base', 'above', 'eyepiece'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('objective lens', 'below', 'eyepiece'), True)	(('eyepiece', 'below', 'objective lens'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'eyepiece'), True)	(('eyepiece', 'below', 'base'), False)
Round 4 ...
microscope worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('eyepiece', 'connects', 'eyepiece tube'), True)	(('eyepiece tube', 'connects', 'eyepiece'), True)
Constraint 1: x rln y <-> y rln x	(('eyepiece tube', 'connects', 'body tube'), True)	(('body tube', 'connects', 'eyepiece tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body tube', 'above', 'arm'), True)	(('arm', 'above', 'body tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body tube', 'above', 'arm'), True)	(('arm', 'below', 'body tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body tube', 'above', 'nosepiece'), True)	(('nosepiece', 'above', 'body tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body tube', 'above', 'nosepiece'), True)	(('nosepiece', 'below', 'body tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('arm', 'above', 'base'), True)	(('base', 'above', 'arm'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('arm', 'above', 'base'), True)	(('base', 'below', 'arm'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('objective lens', 'part of', 'nosepiece'), True)	(('nosepiece', 'part of', 'objective lens'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('objective lens', 'part of', 'nosepiece'), True)	(('nosepiece', 'has part', 'objective lens'), True)
Constraint 1: x rln y <-> y rln x	(('stage clips', 'next to', 'specimen stage'), True)	(('specimen stage', 'next to', 'stage clips'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('specimen stage', 'above', 'base'), True)	(('base', 'above', 'specimen stage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('specimen stage', 'above', 'base'), True)	(('base', 'below', 'specimen stage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('specimen stage', 'above', 'illumination mirror'), True)	(('illumination mirror', 'above', 'specimen stage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('specimen stage', 'above', 'illumination mirror'), True)	(('illumination mirror', 'below', 'specimen stage'), True)
Constraint 4 (True antecedent)	('body tube', 'above', 'arm')('arm', 'above', 'base')	(('body tube', 'above', 'base'), True)
Constraint 4 (True antecedent)	('base', 'below', 'arm')('arm', 'below', 'body tube')	(('base', 'below', 'body tube'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('arm', 'above', 'body tube'), False)	(('body tube', 'below', 'arm'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nosepiece', 'above', 'body tube'), False)	(('body tube', 'below', 'nosepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'arm'), False)	(('arm', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nosepiece', 'part of', 'objective lens'), False)	(('objective lens', 'has part', 'nosepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'specimen stage'), False)	(('specimen stage', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('illumination mirror', 'above', 'specimen stage'), False)	(('specimen stage', 'below', 'illumination mirror'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body tube', 'above', 'base'), True)	(('base', 'above', 'body tube'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'body tube'), True)	(('body tube', 'below', 'base'), False)
Round 3 ...
microscope worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'above', 'coarse focus'), True)	(('coarse focus', 'above', 'eyepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyepiece', 'above', 'coarse focus'), True)	(('coarse focus', 'below', 'eyepiece'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('coarse focus', 'above', 'objective lens'), True)	(('objective lens', 'above', 'coarse focus'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('coarse focus', 'above', 'objective lens'), True)	(('objective lens', 'below', 'coarse focus'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('coarse focus', 'above', 'nosepiece'), True)	(('nosepiece', 'above', 'coarse focus'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('coarse focus', 'above', 'nosepiece'), True)	(('nosepiece', 'below', 'coarse focus'), True)
Constraint 1: x rln y <-> y rln x	(('objective lens', 'next to', 'nosepiece'), True)	(('nosepiece', 'next to', 'objective lens'), True)
Constraint 1: x rln y <-> y rln x	(('objective lens', 'next to', 'arm'), True)	(('arm', 'next to', 'objective lens'), True)
Constraint 1: x rln y <-> y rln x	(('nosepiece', 'next to', 'arm'), True)	(('arm', 'next to', 'nosepiece'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('arm', 'above', 'specimen stage'), True)	(('specimen stage', 'above', 'arm'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('arm', 'above', 'specimen stage'), True)	(('specimen stage', 'below', 'arm'), True)
Constraint 1: x rln y <-> y rln x	(('specimen stage', 'next to', 'stage clips'), True)	(('stage clips', 'next to', 'specimen stage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stage clips', 'above', 'illumination mirror'), True)	(('illumination mirror', 'above', 'stage clips'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stage clips', 'above', 'illumination mirror'), True)	(('illumination mirror', 'below', 'stage clips'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('illumination mirror', 'above', 'base'), True)	(('base', 'above', 'illumination mirror'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('illumination mirror', 'above', 'base'), True)	(('base', 'below', 'illumination mirror'), True)
Constraint 4 (True antecedent)	('eyepiece', 'above', 'coarse focus')('coarse focus', 'above', 'objective lens')	(('eyepiece', 'above', 'objective lens'), True)
Constraint 4 (True antecedent)	('eyepiece', 'above', 'coarse focus')('coarse focus', 'above', 'nosepiece')	(('eyepiece', 'above', 'nosepiece'), True)
Constraint 4 (True antecedent)	('stage clips', 'above', 'illumination mirror')('illumination mirror', 'above', 'base')	(('stage clips', 'above', 'base'), True)
Constraint 4 (True antecedent)	('objective lens', 'below', 'coarse focus')('coarse focus', 'below', 'eyepiece')	(('objective lens', 'below', 'eyepiece'), True)
Constraint 4 (True antecedent)	('nosepiece', 'below', 'coarse focus')('coarse focus', 'below', 'eyepiece')	(('nosepiece', 'below', 'eyepiece'), True)
Constraint 4 (True antecedent)	('base', 'below', 'illumination mirror')('illumination mirror', 'below', 'stage clips')	(('base', 'below', 'stage clips'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('coarse focus', 'above', 'eyepiece'), False)	(('eyepiece', 'below', 'coarse focus'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('objective lens', 'above', 'coarse focus'), False)	(('coarse focus', 'below', 'objective lens'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nosepiece', 'above', 'coarse focus'), False)	(('coarse focus', 'below', 'nosepiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('specimen stage', 'above', 'arm'), False)	(('arm', 'below', 'specimen stage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('illumination mirror', 'above', 'stage clips'), False)	(('stage clips', 'below', 'illumination mirror'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'illumination mirror'), False)	(('illumination mirror', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'above', 'objective lens'), True)	(('objective lens', 'above', 'eyepiece'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyepiece', 'above', 'nosepiece'), True)	(('nosepiece', 'above', 'eyepiece'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stage clips', 'above', 'base'), True)	(('base', 'above', 'stage clips'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('objective lens', 'below', 'eyepiece'), True)	(('eyepiece', 'below', 'objective lens'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nosepiece', 'below', 'eyepiece'), True)	(('eyepiece', 'below', 'nosepiece'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'stage clips'), True)	(('stage clips', 'below', 'base'), False)
Round 3 ...
rabbit worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'inside', 'head'), True)	(('head', 'inside', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'inside', 'head'), True)	(('head', 'contains', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'nose'), True)	(('nose', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'nose'), True)	(('nose', 'below', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'head'), True)	(('head', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'head'), True)	(('head', 'below', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('whiskers', 'connects', 'head'), True)	(('head', 'connects', 'whiskers'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'body'), True)	(('body', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'body'), True)	(('body', 'below', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'foot'), True)	(('foot', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'foot'), True)	(('foot', 'below', 'leg'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'nose')('nose', 'above', 'mouth')	(('eye', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'head')('head', 'above', 'body')	(('ear', 'above', 'body'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'leg')	(('head', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('body', 'above', 'leg')('leg', 'above', 'foot')	(('body', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'eye')	(('mouth', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('body', 'below', 'head')('head', 'below', 'ear')	(('body', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'head')	(('leg', 'below', 'head'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'leg')('leg', 'below', 'body')	(('foot', 'below', 'body'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'inside', 'eye'), False)	(('eye', 'contains', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'eye'), False)	(('eye', 'below', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'ear'), False)	(('ear', 'below', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'head'), False)	(('head', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'above', 'leg'), False)	(('leg', 'below', 'foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'mouth'), True)	(('mouth', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'body'), True)	(('body', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'leg'), True)	(('leg', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'foot'), True)	(('foot', 'above', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'eye'), True)	(('eye', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'ear'), True)	(('ear', 'below', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'head'), True)	(('head', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'body'), True)	(('body', 'below', 'foot'), False)
Constraint 4 (True antecedent)	('ear', 'above', 'head')('head', 'above', 'leg')	(('ear', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'body')('body', 'above', 'foot')	(('ear', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'foot')	(('head', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'ear')	(('leg', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'leg')('leg', 'below', 'head')	(('foot', 'below', 'head'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'body')('body', 'below', 'ear')	(('foot', 'below', 'ear'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'leg'), True)	(('leg', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'foot'), True)	(('foot', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'foot'), True)	(('foot', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'ear'), True)	(('ear', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'head'), True)	(('head', 'below', 'foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'ear'), True)	(('ear', 'below', 'foot'), False)
Round 4 ...
rabbit worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('eye', 'connects', 'head'), True)	(('head', 'connects', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'nose'), True)	(('nose', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'nose'), True)	(('nose', 'below', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'behind', 'nose'), True)	(('nose', 'behind', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'nose'), True)	(('nose', 'in front of', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'eye'), True)	(('eye', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'eye'), True)	(('eye', 'below', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'behind', 'eye'), True)	(('eye', 'behind', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'behind', 'eye'), True)	(('eye', 'in front of', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'connects', 'head'), True)	(('head', 'connects', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'head'), True)	(('head', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'head'), True)	(('head', 'below', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 1: x rln y <-> y rln x	(('nose', 'connects', 'head'), True)	(('head', 'connects', 'nose'), True)
Constraint 1: x rln y <-> y rln x	(('mouth', 'connects', 'head'), True)	(('head', 'connects', 'mouth'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'behind', 'ear'), True)	(('ear', 'behind', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'behind', 'ear'), True)	(('ear', 'in front of', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'body'), True)	(('body', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'body'), True)	(('body', 'below', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'body'), True)	(('body', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'head'), True)	(('head', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'head'), True)	(('head', 'in front of', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'foot'), True)	(('foot', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'foot'), True)	(('foot', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'foot'), True)	(('foot', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'behind', 'leg'), True)	(('leg', 'behind', 'foot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'behind', 'leg'), True)	(('leg', 'in front of', 'foot'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'nose')('nose', 'above', 'mouth')	(('eye', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'eye')('eye', 'above', 'nose')	(('ear', 'above', 'nose'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'head')('head', 'above', 'body')	(('ear', 'above', 'body'), True)
Constraint 4 (True antecedent)	('ear', 'behind', 'eye')('eye', 'behind', 'nose')	(('ear', 'behind', 'nose'), True)
Constraint 4 (True antecedent)	('head', 'behind', 'ear')('ear', 'behind', 'eye')	(('head', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'leg')	(('head', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'foot')	(('head', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('body', 'behind', 'head')('head', 'behind', 'ear')	(('body', 'behind', 'ear'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'body')('body', 'behind', 'head')	(('tail', 'behind', 'head'), True)
Constraint 4 (True antecedent)	('nose', 'below', 'eye')('eye', 'below', 'ear')	(('nose', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('nose', 'in front of', 'eye')('eye', 'in front of', 'ear')	(('nose', 'in front of', 'ear'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'ear')('ear', 'in front of', 'head')	(('eye', 'in front of', 'head'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'eye')	(('mouth', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('ear', 'in front of', 'head')('head', 'in front of', 'body')	(('ear', 'in front of', 'body'), True)
Constraint 4 (True antecedent)	('body', 'below', 'head')('head', 'below', 'ear')	(('body', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('head', 'in front of', 'body')('body', 'in front of', 'tail')	(('head', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'head')	(('leg', 'below', 'head'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'body')('body', 'below', 'head')	(('foot', 'below', 'head'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'eye'), False)	(('eye', 'below', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'behind', 'eye'), False)	(('eye', 'in front of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'ear'), False)	(('ear', 'below', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'ear'), False)	(('ear', 'in front of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'ear'), False)	(('ear', 'below', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'behind', 'head'), False)	(('head', 'in front of', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'head'), False)	(('head', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'behind', 'body'), False)	(('body', 'in front of', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'above', 'body'), False)	(('body', 'below', 'foot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'behind', 'foot'), False)	(('foot', 'in front of', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'mouth'), True)	(('mouth', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'nose'), True)	(('nose', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'body'), True)	(('body', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'behind', 'nose'), True)	(('nose', 'behind', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'behind', 'eye'), True)	(('eye', 'behind', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'leg'), True)	(('leg', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'foot'), True)	(('foot', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'ear'), True)	(('ear', 'behind', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'head'), True)	(('head', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'below', 'ear'), True)	(('ear', 'below', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'in front of', 'ear'), True)	(('ear', 'in front of', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'head'), True)	(('head', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'eye'), True)	(('eye', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'in front of', 'body'), True)	(('body', 'in front of', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'ear'), True)	(('ear', 'below', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'in front of', 'tail'), True)	(('tail', 'in front of', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'head'), True)	(('head', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'head'), True)	(('head', 'below', 'foot'), False)
Constraint 4 (True antecedent)	('ear', 'above', 'eye')('eye', 'above', 'mouth')	(('ear', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'head')('head', 'above', 'leg')	(('ear', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'head')('head', 'above', 'foot')	(('ear', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('head', 'behind', 'ear')('ear', 'behind', 'nose')	(('head', 'behind', 'nose'), True)
Constraint 4 (True antecedent)	('body', 'behind', 'head')('head', 'behind', 'eye')	(('body', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('body', 'behind', 'ear')('ear', 'behind', 'nose')	(('body', 'behind', 'nose'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'body')('body', 'behind', 'ear')	(('tail', 'behind', 'ear'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'head')('head', 'behind', 'eye')	(('tail', 'behind', 'eye'), True)
Constraint 4 (True antecedent)	('nose', 'in front of', 'eye')('eye', 'in front of', 'head')	(('nose', 'in front of', 'head'), True)
Constraint 4 (True antecedent)	('nose', 'in front of', 'ear')('ear', 'in front of', 'body')	(('nose', 'in front of', 'body'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'ear')('ear', 'in front of', 'body')	(('eye', 'in front of', 'body'), True)
Constraint 4 (True antecedent)	('eye', 'in front of', 'head')('head', 'in front of', 'tail')	(('eye', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'ear')	(('mouth', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('ear', 'in front of', 'head')('head', 'in front of', 'tail')	(('ear', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'ear')	(('leg', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'body')('body', 'below', 'ear')	(('foot', 'below', 'ear'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'mouth'), True)	(('mouth', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'leg'), True)	(('leg', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'foot'), True)	(('foot', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'behind', 'nose'), True)	(('nose', 'behind', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'eye'), True)	(('eye', 'behind', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'nose'), True)	(('nose', 'behind', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'ear'), True)	(('ear', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'eye'), True)	(('eye', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'in front of', 'head'), True)	(('head', 'in front of', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'in front of', 'body'), True)	(('body', 'in front of', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'body'), True)	(('body', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'in front of', 'tail'), True)	(('tail', 'in front of', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'ear'), True)	(('ear', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'in front of', 'tail'), True)	(('tail', 'in front of', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'ear'), True)	(('ear', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'ear'), True)	(('ear', 'below', 'foot'), False)
Constraint 4 (True antecedent)	('tail', 'behind', 'body')('body', 'behind', 'nose')	(('tail', 'behind', 'nose'), True)
Constraint 4 (True antecedent)	('nose', 'in front of', 'eye')('eye', 'in front of', 'tail')	(('nose', 'in front of', 'tail'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'nose'), True)	(('nose', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'in front of', 'tail'), True)	(('tail', 'in front of', 'nose'), False)
Round 5 ...
rabbit worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'head'), True)	(('head', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'head'), True)	(('head', 'below', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'connects', 'head'), True)	(('head', 'connects', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'body'), True)	(('body', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'part of', 'head'), True)	(('head', 'part of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'part of', 'head'), True)	(('head', 'has part', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'nose'), True)	(('nose', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'nose'), True)	(('nose', 'below', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'part of', 'head'), True)	(('head', 'part of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'part of', 'head'), True)	(('head', 'has part', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'part of', 'head'), True)	(('head', 'part of', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'part of', 'head'), True)	(('head', 'has part', 'mouth'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'foot'), True)	(('foot', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'foot'), True)	(('foot', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'foot'), True)	(('foot', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'nose')('nose', 'above', 'mouth')	(('eye', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'eye')	(('mouth', 'below', 'eye'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'ear'), False)	(('ear', 'below', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'eye'), False)	(('eye', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'eye'), False)	(('eye', 'below', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'nose'), False)	(('nose', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'mouth'), False)	(('mouth', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'above', 'body'), False)	(('body', 'below', 'foot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'mouth'), True)	(('mouth', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'eye'), True)	(('eye', 'below', 'mouth'), False)
Round 3 ...
refrigerator worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('freezer', 'behind', 'freezer door'), True)	(('freezer door', 'behind', 'freezer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('freezer', 'behind', 'freezer door'), True)	(('freezer door', 'in front of', 'freezer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('freezer', 'above', 'door'), True)	(('door', 'above', 'freezer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('freezer', 'above', 'door'), True)	(('door', 'below', 'freezer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ice cube tray', 'inside', 'freezer'), True)	(('freezer', 'inside', 'ice cube tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ice cube tray', 'inside', 'freezer'), True)	(('freezer', 'contains', 'ice cube tray'), True)
Constraint 1: x rln y <-> y rln x	(('shelf', 'next to', 'bottle storage'), True)	(('bottle storage', 'next to', 'shelf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shelf', 'behind', 'door'), True)	(('door', 'behind', 'shelf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'behind', 'door'), True)	(('door', 'in front of', 'shelf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('thermostat control', 'behind', 'door'), True)	(('door', 'behind', 'thermostat control'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thermostat control', 'behind', 'door'), True)	(('door', 'in front of', 'thermostat control'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('crisper', 'above', 'shelf'), True)	(('shelf', 'above', 'crisper'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crisper', 'above', 'shelf'), True)	(('shelf', 'below', 'crisper'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('freezer door', 'behind', 'freezer'), False)	(('freezer', 'in front of', 'freezer door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'freezer'), False)	(('freezer', 'below', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('freezer', 'inside', 'ice cube tray'), False)	(('ice cube tray', 'contains', 'freezer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'shelf'), False)	(('shelf', 'in front of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'thermostat control'), False)	(('thermostat control', 'in front of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'above', 'crisper'), False)	(('crisper', 'below', 'shelf'), False)
Round 3 ...
refrigerator worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ice cube tray', 'inside', 'freezer'), True)	(('freezer', 'inside', 'ice cube tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ice cube tray', 'inside', 'freezer'), True)	(('freezer', 'contains', 'ice cube tray'), True)
Constraint 1: x rln y <-> y rln x	(('freezer', 'connects', 'freezer door'), True)	(('freezer door', 'connects', 'freezer'), True)
Constraint 1: x rln y <-> y rln x	(('freezer', 'connects', 'refrigerator'), True)	(('refrigerator', 'connects', 'freezer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('freezer', 'above', 'refrigerator'), True)	(('refrigerator', 'above', 'freezer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('freezer', 'above', 'refrigerator'), True)	(('refrigerator', 'below', 'freezer'), True)
Constraint 1: x rln y <-> y rln x	(('refrigerator', 'connects', 'refrigerator door'), True)	(('refrigerator door', 'connects', 'refrigerator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shelf', 'inside', 'refrigerator'), True)	(('refrigerator', 'inside', 'shelf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'inside', 'refrigerator'), True)	(('refrigerator', 'contains', 'shelf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bottle storage', 'inside', 'refrigerator door'), True)	(('refrigerator door', 'inside', 'bottle storage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottle storage', 'inside', 'refrigerator door'), True)	(('refrigerator door', 'contains', 'bottle storage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bottle storage', 'part of', 'refrigerator door'), True)	(('refrigerator door', 'part of', 'bottle storage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottle storage', 'part of', 'refrigerator door'), True)	(('refrigerator door', 'has part', 'bottle storage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('thermostat control', 'inside', 'refrigerator'), True)	(('refrigerator', 'inside', 'thermostat control'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thermostat control', 'inside', 'refrigerator'), True)	(('refrigerator', 'contains', 'thermostat control'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('freezer', 'inside', 'ice cube tray'), False)	(('ice cube tray', 'contains', 'freezer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('refrigerator', 'above', 'freezer'), False)	(('freezer', 'below', 'refrigerator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('refrigerator', 'inside', 'shelf'), False)	(('shelf', 'contains', 'refrigerator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('refrigerator door', 'inside', 'bottle storage'), False)	(('bottle storage', 'contains', 'refrigerator door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('refrigerator door', 'part of', 'bottle storage'), False)	(('bottle storage', 'has part', 'refrigerator door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('refrigerator', 'inside', 'thermostat control'), False)	(('thermostat control', 'contains', 'refrigerator'), False)
Round 3 ...
refrigerator worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ice cube tray', 'part of', 'freezer'), True)	(('freezer', 'part of', 'ice cube tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ice cube tray', 'part of', 'freezer'), True)	(('freezer', 'has part', 'ice cube tray'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('freezer', 'above', 'thermostat control'), True)	(('thermostat control', 'above', 'freezer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('freezer', 'above', 'thermostat control'), True)	(('thermostat control', 'below', 'freezer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('thermostat control', 'above', 'shelf'), True)	(('shelf', 'above', 'thermostat control'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thermostat control', 'above', 'shelf'), True)	(('shelf', 'below', 'thermostat control'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shelf', 'above', 'crisper'), True)	(('crisper', 'above', 'shelf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'above', 'crisper'), True)	(('crisper', 'below', 'shelf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shelf', 'above', 'lower door'), True)	(('lower door', 'above', 'shelf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'above', 'lower door'), True)	(('lower door', 'below', 'shelf'), True)
Constraint 1: x rln y <-> y rln x	(('crisper', 'next to', 'lower door'), True)	(('lower door', 'next to', 'crisper'), True)
Constraint 4 (True antecedent)	('freezer', 'above', 'thermostat control')('thermostat control', 'above', 'shelf')	(('freezer', 'above', 'shelf'), True)
Constraint 4 (True antecedent)	('thermostat control', 'above', 'shelf')('shelf', 'above', 'crisper')	(('thermostat control', 'above', 'crisper'), True)
Constraint 4 (True antecedent)	('thermostat control', 'above', 'shelf')('shelf', 'above', 'lower door')	(('thermostat control', 'above', 'lower door'), True)
Constraint 4 (True antecedent)	('shelf', 'below', 'thermostat control')('thermostat control', 'below', 'freezer')	(('shelf', 'below', 'freezer'), True)
Constraint 4 (True antecedent)	('crisper', 'below', 'shelf')('shelf', 'below', 'thermostat control')	(('crisper', 'below', 'thermostat control'), True)
Constraint 4 (True antecedent)	('lower door', 'below', 'shelf')('shelf', 'below', 'thermostat control')	(('lower door', 'below', 'thermostat control'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('freezer', 'part of', 'ice cube tray'), False)	(('ice cube tray', 'has part', 'freezer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thermostat control', 'above', 'freezer'), False)	(('freezer', 'below', 'thermostat control'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'above', 'thermostat control'), False)	(('thermostat control', 'below', 'shelf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crisper', 'above', 'shelf'), False)	(('shelf', 'below', 'crisper'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lower door', 'above', 'shelf'), False)	(('shelf', 'below', 'lower door'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('freezer', 'above', 'shelf'), True)	(('shelf', 'above', 'freezer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('thermostat control', 'above', 'crisper'), True)	(('crisper', 'above', 'thermostat control'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('thermostat control', 'above', 'lower door'), True)	(('lower door', 'above', 'thermostat control'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shelf', 'below', 'freezer'), True)	(('freezer', 'below', 'shelf'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('crisper', 'below', 'thermostat control'), True)	(('thermostat control', 'below', 'crisper'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lower door', 'below', 'thermostat control'), True)	(('thermostat control', 'below', 'lower door'), False)
Constraint 4 (True antecedent)	('freezer', 'above', 'thermostat control')('thermostat control', 'above', 'crisper')	(('freezer', 'above', 'crisper'), True)
Constraint 4 (True antecedent)	('freezer', 'above', 'thermostat control')('thermostat control', 'above', 'lower door')	(('freezer', 'above', 'lower door'), True)
Constraint 4 (True antecedent)	('crisper', 'below', 'shelf')('shelf', 'below', 'freezer')	(('crisper', 'below', 'freezer'), True)
Constraint 4 (True antecedent)	('lower door', 'below', 'shelf')('shelf', 'below', 'freezer')	(('lower door', 'below', 'freezer'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('freezer', 'above', 'crisper'), True)	(('crisper', 'above', 'freezer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('freezer', 'above', 'lower door'), True)	(('lower door', 'above', 'freezer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('crisper', 'below', 'freezer'), True)	(('freezer', 'below', 'crisper'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lower door', 'below', 'freezer'), True)	(('freezer', 'below', 'lower door'), False)
Round 4 ...
rocket worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'above', 'payload system'), True)	(('payload system', 'above', 'nose cone'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose cone', 'above', 'payload system'), True)	(('payload system', 'below', 'nose cone'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'part of', 'structure system'), True)	(('structure system', 'part of', 'nose cone'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose cone', 'part of', 'structure system'), True)	(('structure system', 'has part', 'nose cone'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'above', 'guidance system'), True)	(('guidance system', 'above', 'payload system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('payload system', 'above', 'guidance system'), True)	(('guidance system', 'below', 'payload system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'above', 'propulsion system'), True)	(('propulsion system', 'above', 'guidance system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guidance system', 'above', 'propulsion system'), True)	(('propulsion system', 'below', 'guidance system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'part of', 'propulsion system'), True)	(('propulsion system', 'part of', 'fuel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuel', 'part of', 'propulsion system'), True)	(('propulsion system', 'has part', 'fuel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'above', 'oxidizer'), True)	(('oxidizer', 'above', 'fuel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuel', 'above', 'oxidizer'), True)	(('oxidizer', 'below', 'fuel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'part of', 'propulsion system'), True)	(('propulsion system', 'part of', 'oxidizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oxidizer', 'part of', 'propulsion system'), True)	(('propulsion system', 'has part', 'oxidizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'above', 'pumps'), True)	(('pumps', 'above', 'oxidizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oxidizer', 'above', 'pumps'), True)	(('pumps', 'below', 'oxidizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'part of', 'propulsion system'), True)	(('propulsion system', 'part of', 'pumps'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pumps', 'part of', 'propulsion system'), True)	(('propulsion system', 'has part', 'pumps'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'above', 'nozzle'), True)	(('nozzle', 'above', 'pumps'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pumps', 'above', 'nozzle'), True)	(('nozzle', 'below', 'pumps'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'part of', 'propulsion system'), True)	(('propulsion system', 'part of', 'nozzle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nozzle', 'part of', 'propulsion system'), True)	(('propulsion system', 'has part', 'nozzle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('structure system', 'surrounds', 'propulsion system'), True)	(('propulsion system', 'surrounds', 'structure system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('structure system', 'surrounds', 'propulsion system'), True)	(('propulsion system', 'surrounded by', 'structure system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'part of', 'structure system'), True)	(('structure system', 'part of', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'part of', 'structure system'), True)	(('structure system', 'has part', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'fin'), True)	(('fin', 'above', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'fin'), True)	(('fin', 'below', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'part of', 'structure system'), True)	(('structure system', 'part of', 'fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fin', 'part of', 'structure system'), True)	(('structure system', 'has part', 'fin'), True)
Constraint 4 (True antecedent)	('nose cone', 'above', 'payload system')('payload system', 'above', 'guidance system')	(('nose cone', 'above', 'guidance system'), True)
Constraint 4 (True antecedent)	('payload system', 'above', 'guidance system')('guidance system', 'above', 'propulsion system')	(('payload system', 'above', 'propulsion system'), True)
Constraint 4 (True antecedent)	('fuel', 'above', 'oxidizer')('oxidizer', 'above', 'pumps')	(('fuel', 'above', 'pumps'), True)
Constraint 4 (True antecedent)	('oxidizer', 'above', 'pumps')('pumps', 'above', 'nozzle')	(('oxidizer', 'above', 'nozzle'), True)
Constraint 4 (True antecedent)	('guidance system', 'below', 'payload system')('payload system', 'below', 'nose cone')	(('guidance system', 'below', 'nose cone'), True)
Constraint 4 (True antecedent)	('propulsion system', 'below', 'guidance system')('guidance system', 'below', 'payload system')	(('propulsion system', 'below', 'payload system'), True)
Constraint 4 (True antecedent)	('pumps', 'below', 'oxidizer')('oxidizer', 'below', 'fuel')	(('pumps', 'below', 'fuel'), True)
Constraint 4 (True antecedent)	('nozzle', 'below', 'pumps')('pumps', 'below', 'oxidizer')	(('nozzle', 'below', 'oxidizer'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('payload system', 'above', 'nose cone'), False)	(('nose cone', 'below', 'payload system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('structure system', 'part of', 'nose cone'), False)	(('nose cone', 'has part', 'structure system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guidance system', 'above', 'payload system'), False)	(('payload system', 'below', 'guidance system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propulsion system', 'above', 'guidance system'), False)	(('guidance system', 'below', 'propulsion system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propulsion system', 'part of', 'fuel'), False)	(('fuel', 'has part', 'propulsion system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oxidizer', 'above', 'fuel'), False)	(('fuel', 'below', 'oxidizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propulsion system', 'part of', 'oxidizer'), False)	(('oxidizer', 'has part', 'propulsion system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pumps', 'above', 'oxidizer'), False)	(('oxidizer', 'below', 'pumps'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propulsion system', 'part of', 'pumps'), False)	(('pumps', 'has part', 'propulsion system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nozzle', 'above', 'pumps'), False)	(('pumps', 'below', 'nozzle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propulsion system', 'part of', 'nozzle'), False)	(('nozzle', 'has part', 'propulsion system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propulsion system', 'surrounds', 'structure system'), False)	(('structure system', 'surrounded by', 'propulsion system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('structure system', 'part of', 'frame'), False)	(('frame', 'has part', 'structure system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fin', 'above', 'frame'), False)	(('frame', 'below', 'fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('structure system', 'part of', 'fin'), False)	(('fin', 'has part', 'structure system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'above', 'guidance system'), True)	(('guidance system', 'above', 'nose cone'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'above', 'propulsion system'), True)	(('propulsion system', 'above', 'payload system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'above', 'pumps'), True)	(('pumps', 'above', 'fuel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'above', 'nozzle'), True)	(('nozzle', 'above', 'oxidizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'below', 'nose cone'), True)	(('nose cone', 'below', 'guidance system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('propulsion system', 'below', 'payload system'), True)	(('payload system', 'below', 'propulsion system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'below', 'fuel'), True)	(('fuel', 'below', 'pumps'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'below', 'oxidizer'), True)	(('oxidizer', 'below', 'nozzle'), False)
Constraint 4 (True antecedent)	('nose cone', 'above', 'payload system')('payload system', 'above', 'propulsion system')	(('nose cone', 'above', 'propulsion system'), True)
Constraint 4 (True antecedent)	('fuel', 'above', 'oxidizer')('oxidizer', 'above', 'nozzle')	(('fuel', 'above', 'nozzle'), True)
Constraint 4 (True antecedent)	('propulsion system', 'below', 'guidance system')('guidance system', 'below', 'nose cone')	(('propulsion system', 'below', 'nose cone'), True)
Constraint 4 (True antecedent)	('nozzle', 'below', 'pumps')('pumps', 'below', 'fuel')	(('nozzle', 'below', 'fuel'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'above', 'propulsion system'), True)	(('propulsion system', 'above', 'nose cone'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'above', 'nozzle'), True)	(('nozzle', 'above', 'fuel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('propulsion system', 'below', 'nose cone'), True)	(('nose cone', 'below', 'propulsion system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'below', 'fuel'), True)	(('fuel', 'below', 'nozzle'), False)
Round 4 ...
rocket worker_108...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('structure system', 'requires', 'frame'), True)	(('frame', 'requires', 'structure system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('structure system', 'requires', 'frame'), True)	(('frame', 'required by', 'structure system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('structure system', 'part of', 'nose cone'), True)	(('nose cone', 'part of', 'structure system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('structure system', 'part of', 'nose cone'), True)	(('nose cone', 'has part', 'structure system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('structure system', 'part of', 'fuel'), True)	(('fuel', 'part of', 'structure system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('structure system', 'part of', 'fuel'), True)	(('fuel', 'has part', 'structure system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'inside', 'nose cone'), True)	(('nose cone', 'inside', 'payload system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('payload system', 'inside', 'nose cone'), True)	(('nose cone', 'contains', 'payload system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'above', 'oxidizer'), True)	(('oxidizer', 'above', 'fuel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuel', 'above', 'oxidizer'), True)	(('oxidizer', 'below', 'fuel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'requires', 'fuel'), True)	(('fuel', 'requires', 'guidance system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guidance system', 'requires', 'fuel'), True)	(('fuel', 'required by', 'guidance system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'requires', 'payload system'), True)	(('payload system', 'requires', 'guidance system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guidance system', 'requires', 'payload system'), True)	(('payload system', 'required by', 'guidance system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'inside', 'payload system'), True)	(('payload system', 'inside', 'guidance system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guidance system', 'inside', 'payload system'), True)	(('payload system', 'contains', 'guidance system'), True)
Constraint 1: x rln y <-> y rln x	(('oxidizer', 'connects', 'pumps'), True)	(('pumps', 'connects', 'oxidizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'behind', 'nozzle'), True)	(('nozzle', 'behind', 'pumps'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pumps', 'behind', 'nozzle'), True)	(('nozzle', 'in front of', 'pumps'), True)
Constraint 1: x rln y <-> y rln x	(('nozzle', 'next to', 'fin'), True)	(('fin', 'next to', 'nozzle'), True)
Constraint 4 (True antecedent)	('guidance system', 'inside', 'payload system')('payload system', 'inside', 'nose cone')	(('guidance system', 'inside', 'nose cone'), True)
Constraint 4 (True antecedent)	('nose cone', 'contains', 'payload system')('payload system', 'contains', 'guidance system')	(('nose cone', 'contains', 'guidance system'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'requires', 'structure system'), False)	(('structure system', 'required by', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose cone', 'part of', 'structure system'), False)	(('structure system', 'has part', 'nose cone'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuel', 'part of', 'structure system'), False)	(('structure system', 'has part', 'fuel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose cone', 'inside', 'payload system'), False)	(('payload system', 'contains', 'nose cone'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oxidizer', 'above', 'fuel'), False)	(('fuel', 'below', 'oxidizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuel', 'requires', 'guidance system'), False)	(('guidance system', 'required by', 'fuel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('payload system', 'requires', 'guidance system'), False)	(('guidance system', 'required by', 'payload system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('payload system', 'inside', 'guidance system'), False)	(('guidance system', 'contains', 'payload system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nozzle', 'behind', 'pumps'), False)	(('pumps', 'in front of', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'inside', 'nose cone'), True)	(('nose cone', 'inside', 'guidance system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'contains', 'guidance system'), True)	(('guidance system', 'contains', 'nose cone'), False)
Round 3 ...
rocket worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'above', 'fuel'), True)	(('fuel', 'above', 'nose cone'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose cone', 'above', 'fuel'), True)	(('fuel', 'below', 'nose cone'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'inside', 'nose cone'), True)	(('nose cone', 'inside', 'payload system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('payload system', 'inside', 'nose cone'), True)	(('nose cone', 'contains', 'payload system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'above', 'guidance system'), True)	(('guidance system', 'above', 'payload system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('payload system', 'above', 'guidance system'), True)	(('guidance system', 'below', 'payload system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'above', 'frame'), True)	(('frame', 'above', 'fuel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuel', 'above', 'frame'), True)	(('frame', 'below', 'fuel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'above', 'fuel'), True)	(('fuel', 'above', 'guidance system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guidance system', 'above', 'fuel'), True)	(('fuel', 'below', 'guidance system'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'oxidizer'), True)	(('oxidizer', 'above', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'oxidizer'), True)	(('oxidizer', 'below', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'above', 'pumps'), True)	(('pumps', 'above', 'oxidizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oxidizer', 'above', 'pumps'), True)	(('pumps', 'below', 'oxidizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'above', 'nozzle'), True)	(('nozzle', 'above', 'pumps'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pumps', 'above', 'nozzle'), True)	(('nozzle', 'below', 'pumps'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'above', 'fin'), True)	(('fin', 'above', 'nozzle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nozzle', 'above', 'fin'), True)	(('fin', 'below', 'nozzle'), True)
Constraint 4 (True antecedent)	('nose cone', 'above', 'fuel')('fuel', 'above', 'frame')	(('nose cone', 'above', 'frame'), True)
Constraint 4 (True antecedent)	('payload system', 'above', 'guidance system')('guidance system', 'above', 'fuel')	(('payload system', 'above', 'fuel'), True)
Constraint 4 (True antecedent)	('fuel', 'above', 'frame')('frame', 'above', 'oxidizer')	(('fuel', 'above', 'oxidizer'), True)
Constraint 4 (True antecedent)	('guidance system', 'above', 'fuel')('fuel', 'above', 'frame')	(('guidance system', 'above', 'frame'), True)
Constraint 4 (True antecedent)	('frame', 'above', 'oxidizer')('oxidizer', 'above', 'pumps')	(('frame', 'above', 'pumps'), True)
Constraint 4 (True antecedent)	('oxidizer', 'above', 'pumps')('pumps', 'above', 'nozzle')	(('oxidizer', 'above', 'nozzle'), True)
Constraint 4 (True antecedent)	('pumps', 'above', 'nozzle')('nozzle', 'above', 'fin')	(('pumps', 'above', 'fin'), True)
Constraint 4 (True antecedent)	('fuel', 'below', 'guidance system')('guidance system', 'below', 'payload system')	(('fuel', 'below', 'payload system'), True)
Constraint 4 (True antecedent)	('frame', 'below', 'fuel')('fuel', 'below', 'nose cone')	(('frame', 'below', 'nose cone'), True)
Constraint 4 (True antecedent)	('frame', 'below', 'fuel')('fuel', 'below', 'guidance system')	(('frame', 'below', 'guidance system'), True)
Constraint 4 (True antecedent)	('oxidizer', 'below', 'frame')('frame', 'below', 'fuel')	(('oxidizer', 'below', 'fuel'), True)
Constraint 4 (True antecedent)	('pumps', 'below', 'oxidizer')('oxidizer', 'below', 'frame')	(('pumps', 'below', 'frame'), True)
Constraint 4 (True antecedent)	('nozzle', 'below', 'pumps')('pumps', 'below', 'oxidizer')	(('nozzle', 'below', 'oxidizer'), True)
Constraint 4 (True antecedent)	('fin', 'below', 'nozzle')('nozzle', 'below', 'pumps')	(('fin', 'below', 'pumps'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('fuel', 'above', 'nose cone'), False)	(('nose cone', 'below', 'fuel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose cone', 'inside', 'payload system'), False)	(('payload system', 'contains', 'nose cone'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('guidance system', 'above', 'payload system'), False)	(('payload system', 'below', 'guidance system'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'fuel'), False)	(('fuel', 'below', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuel', 'above', 'guidance system'), False)	(('guidance system', 'below', 'fuel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oxidizer', 'above', 'frame'), False)	(('frame', 'below', 'oxidizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pumps', 'above', 'oxidizer'), False)	(('oxidizer', 'below', 'pumps'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nozzle', 'above', 'pumps'), False)	(('pumps', 'below', 'nozzle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fin', 'above', 'nozzle'), False)	(('nozzle', 'below', 'fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'above', 'frame'), True)	(('frame', 'above', 'nose cone'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'above', 'fuel'), True)	(('fuel', 'above', 'payload system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'above', 'oxidizer'), True)	(('oxidizer', 'above', 'fuel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'above', 'frame'), True)	(('frame', 'above', 'guidance system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'pumps'), True)	(('pumps', 'above', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'above', 'nozzle'), True)	(('nozzle', 'above', 'oxidizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'above', 'fin'), True)	(('fin', 'above', 'pumps'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'below', 'payload system'), True)	(('payload system', 'below', 'fuel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'below', 'nose cone'), True)	(('nose cone', 'below', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'below', 'guidance system'), True)	(('guidance system', 'below', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'below', 'fuel'), True)	(('fuel', 'below', 'oxidizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'below', 'frame'), True)	(('frame', 'below', 'pumps'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'below', 'oxidizer'), True)	(('oxidizer', 'below', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'below', 'pumps'), True)	(('pumps', 'below', 'fin'), False)
Constraint 4 (True antecedent)	('nose cone', 'above', 'fuel')('fuel', 'above', 'oxidizer')	(('nose cone', 'above', 'oxidizer'), True)
Constraint 4 (True antecedent)	('nose cone', 'above', 'frame')('frame', 'above', 'pumps')	(('nose cone', 'above', 'pumps'), True)
Constraint 4 (True antecedent)	('payload system', 'above', 'guidance system')('guidance system', 'above', 'frame')	(('payload system', 'above', 'frame'), True)
Constraint 4 (True antecedent)	('payload system', 'above', 'fuel')('fuel', 'above', 'oxidizer')	(('payload system', 'above', 'oxidizer'), True)
Constraint 4 (True antecedent)	('fuel', 'above', 'frame')('frame', 'above', 'pumps')	(('fuel', 'above', 'pumps'), True)
Constraint 4 (True antecedent)	('fuel', 'above', 'oxidizer')('oxidizer', 'above', 'nozzle')	(('fuel', 'above', 'nozzle'), True)
Constraint 4 (True antecedent)	('guidance system', 'above', 'fuel')('fuel', 'above', 'oxidizer')	(('guidance system', 'above', 'oxidizer'), True)
Constraint 4 (True antecedent)	('guidance system', 'above', 'frame')('frame', 'above', 'pumps')	(('guidance system', 'above', 'pumps'), True)
Constraint 4 (True antecedent)	('frame', 'above', 'oxidizer')('oxidizer', 'above', 'nozzle')	(('frame', 'above', 'nozzle'), True)
Constraint 4 (True antecedent)	('frame', 'above', 'pumps')('pumps', 'above', 'fin')	(('frame', 'above', 'fin'), True)
Constraint 4 (True antecedent)	('oxidizer', 'above', 'pumps')('pumps', 'above', 'fin')	(('oxidizer', 'above', 'fin'), True)
Constraint 4 (True antecedent)	('frame', 'below', 'fuel')('fuel', 'below', 'payload system')	(('frame', 'below', 'payload system'), True)
Constraint 4 (True antecedent)	('oxidizer', 'below', 'frame')('frame', 'below', 'nose cone')	(('oxidizer', 'below', 'nose cone'), True)
Constraint 4 (True antecedent)	('oxidizer', 'below', 'frame')('frame', 'below', 'guidance system')	(('oxidizer', 'below', 'guidance system'), True)
Constraint 4 (True antecedent)	('oxidizer', 'below', 'fuel')('fuel', 'below', 'payload system')	(('oxidizer', 'below', 'payload system'), True)
Constraint 4 (True antecedent)	('pumps', 'below', 'oxidizer')('oxidizer', 'below', 'fuel')	(('pumps', 'below', 'fuel'), True)
Constraint 4 (True antecedent)	('pumps', 'below', 'frame')('frame', 'below', 'nose cone')	(('pumps', 'below', 'nose cone'), True)
Constraint 4 (True antecedent)	('pumps', 'below', 'frame')('frame', 'below', 'guidance system')	(('pumps', 'below', 'guidance system'), True)
Constraint 4 (True antecedent)	('nozzle', 'below', 'pumps')('pumps', 'below', 'frame')	(('nozzle', 'below', 'frame'), True)
Constraint 4 (True antecedent)	('nozzle', 'below', 'oxidizer')('oxidizer', 'below', 'fuel')	(('nozzle', 'below', 'fuel'), True)
Constraint 4 (True antecedent)	('fin', 'below', 'nozzle')('nozzle', 'below', 'oxidizer')	(('fin', 'below', 'oxidizer'), True)
Constraint 4 (True antecedent)	('fin', 'below', 'pumps')('pumps', 'below', 'frame')	(('fin', 'below', 'frame'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'above', 'oxidizer'), True)	(('oxidizer', 'above', 'nose cone'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'above', 'pumps'), True)	(('pumps', 'above', 'nose cone'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'above', 'frame'), True)	(('frame', 'above', 'payload system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'above', 'oxidizer'), True)	(('oxidizer', 'above', 'payload system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'above', 'pumps'), True)	(('pumps', 'above', 'fuel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'above', 'nozzle'), True)	(('nozzle', 'above', 'fuel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'above', 'oxidizer'), True)	(('oxidizer', 'above', 'guidance system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'above', 'pumps'), True)	(('pumps', 'above', 'guidance system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'nozzle'), True)	(('nozzle', 'above', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'fin'), True)	(('fin', 'above', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'above', 'fin'), True)	(('fin', 'above', 'oxidizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'below', 'payload system'), True)	(('payload system', 'below', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'below', 'nose cone'), True)	(('nose cone', 'below', 'oxidizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'below', 'guidance system'), True)	(('guidance system', 'below', 'oxidizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oxidizer', 'below', 'payload system'), True)	(('payload system', 'below', 'oxidizer'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'below', 'fuel'), True)	(('fuel', 'below', 'pumps'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'below', 'nose cone'), True)	(('nose cone', 'below', 'pumps'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'below', 'guidance system'), True)	(('guidance system', 'below', 'pumps'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'below', 'frame'), True)	(('frame', 'below', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'below', 'fuel'), True)	(('fuel', 'below', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'below', 'oxidizer'), True)	(('oxidizer', 'below', 'fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'below', 'frame'), True)	(('frame', 'below', 'fin'), False)
Constraint 4 (True antecedent)	('nose cone', 'above', 'fuel')('fuel', 'above', 'nozzle')	(('nose cone', 'above', 'nozzle'), True)
Constraint 4 (True antecedent)	('nose cone', 'above', 'frame')('frame', 'above', 'fin')	(('nose cone', 'above', 'fin'), True)
Constraint 4 (True antecedent)	('payload system', 'above', 'guidance system')('guidance system', 'above', 'pumps')	(('payload system', 'above', 'pumps'), True)
Constraint 4 (True antecedent)	('payload system', 'above', 'fuel')('fuel', 'above', 'nozzle')	(('payload system', 'above', 'nozzle'), True)
Constraint 4 (True antecedent)	('payload system', 'above', 'frame')('frame', 'above', 'fin')	(('payload system', 'above', 'fin'), True)
Constraint 4 (True antecedent)	('fuel', 'above', 'frame')('frame', 'above', 'fin')	(('fuel', 'above', 'fin'), True)
Constraint 4 (True antecedent)	('guidance system', 'above', 'fuel')('fuel', 'above', 'nozzle')	(('guidance system', 'above', 'nozzle'), True)
Constraint 4 (True antecedent)	('guidance system', 'above', 'frame')('frame', 'above', 'fin')	(('guidance system', 'above', 'fin'), True)
Constraint 4 (True antecedent)	('pumps', 'below', 'oxidizer')('oxidizer', 'below', 'payload system')	(('pumps', 'below', 'payload system'), True)
Constraint 4 (True antecedent)	('nozzle', 'below', 'pumps')('pumps', 'below', 'nose cone')	(('nozzle', 'below', 'nose cone'), True)
Constraint 4 (True antecedent)	('nozzle', 'below', 'pumps')('pumps', 'below', 'guidance system')	(('nozzle', 'below', 'guidance system'), True)
Constraint 4 (True antecedent)	('nozzle', 'below', 'oxidizer')('oxidizer', 'below', 'payload system')	(('nozzle', 'below', 'payload system'), True)
Constraint 4 (True antecedent)	('fin', 'below', 'nozzle')('nozzle', 'below', 'fuel')	(('fin', 'below', 'fuel'), True)
Constraint 4 (True antecedent)	('fin', 'below', 'pumps')('pumps', 'below', 'nose cone')	(('fin', 'below', 'nose cone'), True)
Constraint 4 (True antecedent)	('fin', 'below', 'pumps')('pumps', 'below', 'guidance system')	(('fin', 'below', 'guidance system'), True)
Constraint 4 (True antecedent)	('fin', 'below', 'oxidizer')('oxidizer', 'below', 'payload system')	(('fin', 'below', 'payload system'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'above', 'nozzle'), True)	(('nozzle', 'above', 'nose cone'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose cone', 'above', 'fin'), True)	(('fin', 'above', 'nose cone'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'above', 'pumps'), True)	(('pumps', 'above', 'payload system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'above', 'nozzle'), True)	(('nozzle', 'above', 'payload system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('payload system', 'above', 'fin'), True)	(('fin', 'above', 'payload system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuel', 'above', 'fin'), True)	(('fin', 'above', 'fuel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'above', 'nozzle'), True)	(('nozzle', 'above', 'guidance system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('guidance system', 'above', 'fin'), True)	(('fin', 'above', 'guidance system'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pumps', 'below', 'payload system'), True)	(('payload system', 'below', 'pumps'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'below', 'nose cone'), True)	(('nose cone', 'below', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'below', 'guidance system'), True)	(('guidance system', 'below', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'below', 'payload system'), True)	(('payload system', 'below', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'below', 'fuel'), True)	(('fuel', 'below', 'fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'below', 'nose cone'), True)	(('nose cone', 'below', 'fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'below', 'guidance system'), True)	(('guidance system', 'below', 'fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'below', 'payload system'), True)	(('payload system', 'below', 'fin'), False)
Round 5 ...
sandwich worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top bread', 'above', 'fillings'), True)	(('fillings', 'above', 'top bread'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top bread', 'above', 'fillings'), True)	(('fillings', 'below', 'top bread'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fillings', 'above', 'bottom bread'), True)	(('bottom bread', 'above', 'fillings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fillings', 'above', 'bottom bread'), True)	(('bottom bread', 'below', 'fillings'), True)
Constraint 4 (True antecedent)	('top bread', 'above', 'fillings')('fillings', 'above', 'bottom bread')	(('top bread', 'above', 'bottom bread'), True)
Constraint 4 (True antecedent)	('bottom bread', 'below', 'fillings')('fillings', 'below', 'top bread')	(('bottom bread', 'below', 'top bread'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('fillings', 'above', 'top bread'), False)	(('top bread', 'below', 'fillings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom bread', 'above', 'fillings'), False)	(('fillings', 'below', 'bottom bread'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top bread', 'above', 'bottom bread'), True)	(('bottom bread', 'above', 'top bread'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottom bread', 'below', 'top bread'), True)	(('top bread', 'below', 'bottom bread'), False)
Round 3 ...
sandwich worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top bread', 'above', 'fillings'), True)	(('fillings', 'above', 'top bread'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top bread', 'above', 'fillings'), True)	(('fillings', 'below', 'top bread'), True)
Constraint 1: x rln y <-> y rln x	(('top bread', 'connects', 'fillings'), True)	(('fillings', 'connects', 'top bread'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fillings', 'above', 'bottom bread'), True)	(('bottom bread', 'above', 'fillings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fillings', 'above', 'bottom bread'), True)	(('bottom bread', 'below', 'fillings'), True)
Constraint 1: x rln y <-> y rln x	(('fillings', 'connects', 'bottom bread'), True)	(('bottom bread', 'connects', 'fillings'), True)
Constraint 4 (True antecedent)	('top bread', 'above', 'fillings')('fillings', 'above', 'bottom bread')	(('top bread', 'above', 'bottom bread'), True)
Constraint 4 (True antecedent)	('bottom bread', 'below', 'fillings')('fillings', 'below', 'top bread')	(('bottom bread', 'below', 'top bread'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('fillings', 'above', 'top bread'), False)	(('top bread', 'below', 'fillings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom bread', 'above', 'fillings'), False)	(('fillings', 'below', 'bottom bread'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top bread', 'above', 'bottom bread'), True)	(('bottom bread', 'above', 'top bread'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottom bread', 'below', 'top bread'), True)	(('top bread', 'below', 'bottom bread'), False)
Round 3 ...
sandwich worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top bread', 'above', 'fillings'), True)	(('fillings', 'above', 'top bread'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top bread', 'above', 'fillings'), True)	(('fillings', 'below', 'top bread'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fillings', 'above', 'bottom bread'), True)	(('bottom bread', 'above', 'fillings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fillings', 'above', 'bottom bread'), True)	(('bottom bread', 'below', 'fillings'), True)
Constraint 4 (True antecedent)	('top bread', 'above', 'fillings')('fillings', 'above', 'bottom bread')	(('top bread', 'above', 'bottom bread'), True)
Constraint 4 (True antecedent)	('bottom bread', 'below', 'fillings')('fillings', 'below', 'top bread')	(('bottom bread', 'below', 'top bread'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('fillings', 'above', 'top bread'), False)	(('top bread', 'below', 'fillings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom bread', 'above', 'fillings'), False)	(('fillings', 'below', 'bottom bread'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top bread', 'above', 'bottom bread'), True)	(('bottom bread', 'above', 'top bread'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottom bread', 'below', 'top bread'), True)	(('top bread', 'below', 'bottom bread'), False)
Round 3 ...
screw worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'shank'), True)	(('shank', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'shank'), True)	(('shank', 'below', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'shank'), True)	(('shank', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('shank', 'connects', 'threads'), True)	(('threads', 'connects', 'shank'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shank', 'above', 'threads'), True)	(('threads', 'above', 'shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shank', 'above', 'threads'), True)	(('threads', 'below', 'shank'), True)
Constraint 1: x rln y <-> y rln x	(('threads', 'connects', 'tip'), True)	(('tip', 'connects', 'threads'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('threads', 'above', 'tip'), True)	(('tip', 'above', 'threads'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('threads', 'above', 'tip'), True)	(('tip', 'below', 'threads'), True)
Constraint 4 (True antecedent)	('head', 'above', 'shank')('shank', 'above', 'threads')	(('head', 'above', 'threads'), True)
Constraint 4 (True antecedent)	('shank', 'above', 'threads')('threads', 'above', 'tip')	(('shank', 'above', 'tip'), True)
Constraint 4 (True antecedent)	('threads', 'below', 'shank')('shank', 'below', 'head')	(('threads', 'below', 'head'), True)
Constraint 4 (True antecedent)	('tip', 'below', 'threads')('threads', 'below', 'shank')	(('tip', 'below', 'shank'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('shank', 'above', 'head'), False)	(('head', 'below', 'shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('threads', 'above', 'shank'), False)	(('shank', 'below', 'threads'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tip', 'above', 'threads'), False)	(('threads', 'below', 'tip'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'threads'), True)	(('threads', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shank', 'above', 'tip'), True)	(('tip', 'above', 'shank'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('threads', 'below', 'head'), True)	(('head', 'below', 'threads'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tip', 'below', 'shank'), True)	(('shank', 'below', 'tip'), False)
Constraint 4 (True antecedent)	('head', 'above', 'shank')('shank', 'above', 'tip')	(('head', 'above', 'tip'), True)
Constraint 4 (True antecedent)	('tip', 'below', 'threads')('threads', 'below', 'head')	(('tip', 'below', 'head'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'tip'), True)	(('tip', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tip', 'below', 'head'), True)	(('head', 'below', 'tip'), False)
Round 4 ...
screw worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'shank'), True)	(('shank', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'shank'), True)	(('shank', 'below', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'shank'), True)	(('shank', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('shank', 'connects', 'threads'), True)	(('threads', 'connects', 'shank'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shank', 'above', 'threads'), True)	(('threads', 'above', 'shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shank', 'above', 'threads'), True)	(('threads', 'below', 'shank'), True)
Constraint 1: x rln y <-> y rln x	(('threads', 'connects', 'tip'), True)	(('tip', 'connects', 'threads'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('threads', 'above', 'tip'), True)	(('tip', 'above', 'threads'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('threads', 'above', 'tip'), True)	(('tip', 'below', 'threads'), True)
Constraint 4 (True antecedent)	('head', 'above', 'shank')('shank', 'above', 'threads')	(('head', 'above', 'threads'), True)
Constraint 4 (True antecedent)	('shank', 'above', 'threads')('threads', 'above', 'tip')	(('shank', 'above', 'tip'), True)
Constraint 4 (True antecedent)	('threads', 'below', 'shank')('shank', 'below', 'head')	(('threads', 'below', 'head'), True)
Constraint 4 (True antecedent)	('tip', 'below', 'threads')('threads', 'below', 'shank')	(('tip', 'below', 'shank'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('shank', 'above', 'head'), False)	(('head', 'below', 'shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('threads', 'above', 'shank'), False)	(('shank', 'below', 'threads'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tip', 'above', 'threads'), False)	(('threads', 'below', 'tip'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'threads'), True)	(('threads', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shank', 'above', 'tip'), True)	(('tip', 'above', 'shank'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('threads', 'below', 'head'), True)	(('head', 'below', 'threads'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tip', 'below', 'shank'), True)	(('shank', 'below', 'tip'), False)
Constraint 4 (True antecedent)	('head', 'above', 'shank')('shank', 'above', 'tip')	(('head', 'above', 'tip'), True)
Constraint 4 (True antecedent)	('tip', 'below', 'threads')('threads', 'below', 'head')	(('tip', 'below', 'head'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'tip'), True)	(('tip', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tip', 'below', 'head'), True)	(('head', 'below', 'tip'), False)
Round 4 ...
screw worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'shank'), True)	(('shank', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'shank'), True)	(('shank', 'below', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('threads', 'part of', 'shank'), True)	(('shank', 'part of', 'threads'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('threads', 'part of', 'shank'), True)	(('shank', 'has part', 'threads'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tip', 'part of', 'shank'), True)	(('shank', 'part of', 'tip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tip', 'part of', 'shank'), True)	(('shank', 'has part', 'tip'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('shank', 'above', 'head'), False)	(('head', 'below', 'shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shank', 'part of', 'threads'), False)	(('threads', 'has part', 'shank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shank', 'part of', 'tip'), False)	(('tip', 'has part', 'shank'), False)
Round 3 ...
space heater worker_106...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('carry handle', 'above', 'control switch'), True)	(('control switch', 'above', 'carry handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carry handle', 'above', 'control switch'), True)	(('control switch', 'below', 'carry handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('carry handle', 'above', 'adjustable thermostat'), True)	(('adjustable thermostat', 'above', 'carry handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carry handle', 'above', 'adjustable thermostat'), True)	(('adjustable thermostat', 'below', 'carry handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control switch', 'above', 'heating coil'), True)	(('heating coil', 'above', 'control switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control switch', 'above', 'heating coil'), True)	(('heating coil', 'below', 'control switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('adjustable thermostat', 'above', 'heating coil'), True)	(('heating coil', 'above', 'adjustable thermostat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('adjustable thermostat', 'above', 'heating coil'), True)	(('heating coil', 'below', 'adjustable thermostat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heating coil', 'part of', 'fan'), True)	(('fan', 'part of', 'heating coil'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating coil', 'part of', 'fan'), True)	(('fan', 'has part', 'heating coil'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fan', 'requires', 'power cord'), True)	(('power cord', 'requires', 'fan'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan', 'requires', 'power cord'), True)	(('power cord', 'required by', 'fan'), True)
Constraint 4 (True antecedent)	('carry handle', 'above', 'control switch')('control switch', 'above', 'heating coil')	(('carry handle', 'above', 'heating coil'), True)
Constraint 4 (True antecedent)	('heating coil', 'below', 'control switch')('control switch', 'below', 'carry handle')	(('heating coil', 'below', 'carry handle'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('control switch', 'above', 'carry handle'), False)	(('carry handle', 'below', 'control switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('adjustable thermostat', 'above', 'carry handle'), False)	(('carry handle', 'below', 'adjustable thermostat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating coil', 'above', 'control switch'), False)	(('control switch', 'below', 'heating coil'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating coil', 'above', 'adjustable thermostat'), False)	(('adjustable thermostat', 'below', 'heating coil'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan', 'part of', 'heating coil'), False)	(('heating coil', 'has part', 'fan'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power cord', 'requires', 'fan'), False)	(('fan', 'required by', 'power cord'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('carry handle', 'above', 'heating coil'), True)	(('heating coil', 'above', 'carry handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heating coil', 'below', 'carry handle'), True)	(('carry handle', 'below', 'heating coil'), False)
Round 3 ...
space heater worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('control switch', 'next to', 'adjustable thermostat'), True)	(('adjustable thermostat', 'next to', 'control switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power cord', 'requires', 'heating coil'), True)	(('heating coil', 'requires', 'power cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power cord', 'requires', 'heating coil'), True)	(('heating coil', 'required by', 'power cord'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power cord', 'requires', 'fan'), True)	(('fan', 'requires', 'power cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power cord', 'requires', 'fan'), True)	(('fan', 'required by', 'power cord'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fan', 'inside', 'casing'), True)	(('casing', 'inside', 'fan'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan', 'inside', 'casing'), True)	(('casing', 'contains', 'fan'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('adjustable thermostat', 'requires', 'heating coil'), True)	(('heating coil', 'requires', 'adjustable thermostat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('adjustable thermostat', 'requires', 'heating coil'), True)	(('heating coil', 'required by', 'adjustable thermostat'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('heating coil', 'requires', 'power cord'), False)	(('power cord', 'required by', 'heating coil'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan', 'requires', 'power cord'), False)	(('power cord', 'required by', 'fan'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'inside', 'fan'), False)	(('fan', 'contains', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating coil', 'requires', 'adjustable thermostat'), False)	(('adjustable thermostat', 'required by', 'heating coil'), False)
Round 3 ...
space heater worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('heating coil', 'inside', 'casing'), True)	(('casing', 'inside', 'heating coil'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating coil', 'inside', 'casing'), True)	(('casing', 'contains', 'heating coil'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heating coil', 'above', 'fan'), True)	(('fan', 'above', 'heating coil'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating coil', 'above', 'fan'), True)	(('fan', 'below', 'heating coil'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control switch', 'part of', 'casing'), True)	(('casing', 'part of', 'control switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control switch', 'part of', 'casing'), True)	(('casing', 'has part', 'control switch'), True)
Constraint 1: x rln y <-> y rln x	(('control switch', 'next to', 'adjustable thermostat'), True)	(('adjustable thermostat', 'next to', 'control switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('adjustable thermostat', 'part of', 'casing'), True)	(('casing', 'part of', 'adjustable thermostat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('adjustable thermostat', 'part of', 'casing'), True)	(('casing', 'has part', 'adjustable thermostat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('carry handle', 'part of', 'casing'), True)	(('casing', 'part of', 'carry handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carry handle', 'part of', 'casing'), True)	(('casing', 'has part', 'carry handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('carry handle', 'behind', 'adjustable thermostat'), True)	(('adjustable thermostat', 'behind', 'carry handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carry handle', 'behind', 'adjustable thermostat'), True)	(('adjustable thermostat', 'in front of', 'carry handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('carry handle', 'behind', 'control switch'), True)	(('control switch', 'behind', 'carry handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carry handle', 'behind', 'control switch'), True)	(('control switch', 'in front of', 'carry handle'), True)
Constraint 1: x rln y <-> y rln x	(('power cord', 'connects', 'casing'), True)	(('casing', 'connects', 'power cord'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fan', 'inside', 'casing'), True)	(('casing', 'inside', 'fan'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan', 'inside', 'casing'), True)	(('casing', 'contains', 'fan'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'inside', 'heating coil'), False)	(('heating coil', 'contains', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fan', 'above', 'heating coil'), False)	(('heating coil', 'below', 'fan'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'part of', 'control switch'), False)	(('control switch', 'has part', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'part of', 'adjustable thermostat'), False)	(('adjustable thermostat', 'has part', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'part of', 'carry handle'), False)	(('carry handle', 'has part', 'casing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('adjustable thermostat', 'behind', 'carry handle'), False)	(('carry handle', 'in front of', 'adjustable thermostat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control switch', 'behind', 'carry handle'), False)	(('carry handle', 'in front of', 'control switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('casing', 'inside', 'fan'), False)	(('fan', 'contains', 'casing'), False)
Round 3 ...
toaster worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'bread carriage handle'), True)	(('bread carriage handle', 'above', 'toasting slots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toasting slots', 'above', 'bread carriage handle'), True)	(('bread carriage handle', 'below', 'toasting slots'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'indicators'), True)	(('indicators', 'above', 'toasting slots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toasting slots', 'above', 'indicators'), True)	(('indicators', 'below', 'toasting slots'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'part of', 'frame'), True)	(('frame', 'part of', 'toasting slots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toasting slots', 'part of', 'frame'), True)	(('frame', 'has part', 'toasting slots'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'power cord'), True)	(('power cord', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'bread carriage handle'), True)	(('bread carriage handle', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'crumb tray'), True)	(('crumb tray', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'indicators'), True)	(('indicators', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('bread carriage handle', 'next to', 'indicators'), True)	(('indicators', 'next to', 'bread carriage handle'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('bread carriage handle', 'above', 'toasting slots'), False)	(('toasting slots', 'below', 'bread carriage handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('indicators', 'above', 'toasting slots'), False)	(('toasting slots', 'below', 'indicators'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'part of', 'toasting slots'), False)	(('toasting slots', 'has part', 'frame'), False)
Round 3 ...
toaster worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'bread carriage handle'), True)	(('bread carriage handle', 'above', 'toasting slots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toasting slots', 'above', 'bread carriage handle'), True)	(('bread carriage handle', 'below', 'toasting slots'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'reheat button'), True)	(('reheat button', 'above', 'toasting slots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toasting slots', 'above', 'reheat button'), True)	(('reheat button', 'below', 'toasting slots'), True)
Constraint 1: x rln y <-> y rln x	(('reheat button', 'next to', 'bread carriage handle'), True)	(('bread carriage handle', 'next to', 'reheat button'), True)
Constraint 1: x rln y <-> y rln x	(('reheat button', 'next to', 'frozen bread button'), True)	(('frozen bread button', 'next to', 'reheat button'), True)
Constraint 1: x rln y <-> y rln x	(('frozen bread button', 'next to', 'eject button'), True)	(('eject button', 'next to', 'frozen bread button'), True)
Constraint 1: x rln y <-> y rln x	(('frozen bread button', 'next to', 'bread carriage handle'), True)	(('bread carriage handle', 'next to', 'frozen bread button'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eject button', 'above', 'crumb trays'), True)	(('crumb trays', 'above', 'eject button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eject button', 'above', 'crumb trays'), True)	(('crumb trays', 'below', 'eject button'), True)
Constraint 1: x rln y <-> y rln x	(('eject button', 'next to', 'bread carriage handle'), True)	(('bread carriage handle', 'next to', 'eject button'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bread carriage handle', 'above', 'crumb trays'), True)	(('crumb trays', 'above', 'bread carriage handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bread carriage handle', 'above', 'crumb trays'), True)	(('crumb trays', 'below', 'bread carriage handle'), True)
Constraint 4 (True antecedent)	('toasting slots', 'above', 'bread carriage handle')('bread carriage handle', 'above', 'crumb trays')	(('toasting slots', 'above', 'crumb trays'), True)
Constraint 4 (True antecedent)	('crumb trays', 'below', 'bread carriage handle')('bread carriage handle', 'below', 'toasting slots')	(('crumb trays', 'below', 'toasting slots'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('bread carriage handle', 'above', 'toasting slots'), False)	(('toasting slots', 'below', 'bread carriage handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reheat button', 'above', 'toasting slots'), False)	(('toasting slots', 'below', 'reheat button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crumb trays', 'above', 'eject button'), False)	(('eject button', 'below', 'crumb trays'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crumb trays', 'above', 'bread carriage handle'), False)	(('bread carriage handle', 'below', 'crumb trays'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'crumb trays'), True)	(('crumb trays', 'above', 'toasting slots'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('crumb trays', 'below', 'toasting slots'), True)	(('toasting slots', 'below', 'crumb trays'), False)
Round 3 ...
toaster worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'bread carriage handle'), True)	(('bread carriage handle', 'above', 'toasting slots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toasting slots', 'above', 'bread carriage handle'), True)	(('bread carriage handle', 'below', 'toasting slots'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'crumb tray'), True)	(('crumb tray', 'above', 'toasting slots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toasting slots', 'above', 'crumb tray'), True)	(('crumb tray', 'below', 'toasting slots'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'reheat button'), True)	(('reheat button', 'above', 'toasting slots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toasting slots', 'above', 'reheat button'), True)	(('reheat button', 'below', 'toasting slots'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'requires', 'power cord'), True)	(('power cord', 'requires', 'toasting slots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toasting slots', 'requires', 'power cord'), True)	(('power cord', 'required by', 'toasting slots'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('reheat button', 'above', 'frozen bread button'), True)	(('frozen bread button', 'above', 'reheat button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reheat button', 'above', 'frozen bread button'), True)	(('frozen bread button', 'below', 'reheat button'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frozen bread button', 'above', 'eject button'), True)	(('eject button', 'above', 'frozen bread button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frozen bread button', 'above', 'eject button'), True)	(('eject button', 'below', 'frozen bread button'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eject button', 'above', 'browning control'), True)	(('browning control', 'above', 'eject button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eject button', 'above', 'browning control'), True)	(('browning control', 'below', 'eject button'), True)
Constraint 4 (True antecedent)	('toasting slots', 'above', 'reheat button')('reheat button', 'above', 'frozen bread button')	(('toasting slots', 'above', 'frozen bread button'), True)
Constraint 4 (True antecedent)	('reheat button', 'above', 'frozen bread button')('frozen bread button', 'above', 'eject button')	(('reheat button', 'above', 'eject button'), True)
Constraint 4 (True antecedent)	('frozen bread button', 'above', 'eject button')('eject button', 'above', 'browning control')	(('frozen bread button', 'above', 'browning control'), True)
Constraint 4 (True antecedent)	('frozen bread button', 'below', 'reheat button')('reheat button', 'below', 'toasting slots')	(('frozen bread button', 'below', 'toasting slots'), True)
Constraint 4 (True antecedent)	('eject button', 'below', 'frozen bread button')('frozen bread button', 'below', 'reheat button')	(('eject button', 'below', 'reheat button'), True)
Constraint 4 (True antecedent)	('browning control', 'below', 'eject button')('eject button', 'below', 'frozen bread button')	(('browning control', 'below', 'frozen bread button'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('bread carriage handle', 'above', 'toasting slots'), False)	(('toasting slots', 'below', 'bread carriage handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crumb tray', 'above', 'toasting slots'), False)	(('toasting slots', 'below', 'crumb tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('reheat button', 'above', 'toasting slots'), False)	(('toasting slots', 'below', 'reheat button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power cord', 'requires', 'toasting slots'), False)	(('toasting slots', 'required by', 'power cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frozen bread button', 'above', 'reheat button'), False)	(('reheat button', 'below', 'frozen bread button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eject button', 'above', 'frozen bread button'), False)	(('frozen bread button', 'below', 'eject button'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('browning control', 'above', 'eject button'), False)	(('eject button', 'below', 'browning control'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'frozen bread button'), True)	(('frozen bread button', 'above', 'toasting slots'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('reheat button', 'above', 'eject button'), True)	(('eject button', 'above', 'reheat button'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frozen bread button', 'above', 'browning control'), True)	(('browning control', 'above', 'frozen bread button'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frozen bread button', 'below', 'toasting slots'), True)	(('toasting slots', 'below', 'frozen bread button'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eject button', 'below', 'reheat button'), True)	(('reheat button', 'below', 'eject button'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('browning control', 'below', 'frozen bread button'), True)	(('frozen bread button', 'below', 'browning control'), False)
Constraint 4 (True antecedent)	('toasting slots', 'above', 'reheat button')('reheat button', 'above', 'eject button')	(('toasting slots', 'above', 'eject button'), True)
Constraint 4 (True antecedent)	('toasting slots', 'above', 'frozen bread button')('frozen bread button', 'above', 'browning control')	(('toasting slots', 'above', 'browning control'), True)
Constraint 4 (True antecedent)	('reheat button', 'above', 'frozen bread button')('frozen bread button', 'above', 'browning control')	(('reheat button', 'above', 'browning control'), True)
Constraint 4 (True antecedent)	('eject button', 'below', 'frozen bread button')('frozen bread button', 'below', 'toasting slots')	(('eject button', 'below', 'toasting slots'), True)
Constraint 4 (True antecedent)	('browning control', 'below', 'eject button')('eject button', 'below', 'reheat button')	(('browning control', 'below', 'reheat button'), True)
Constraint 4 (True antecedent)	('browning control', 'below', 'frozen bread button')('frozen bread button', 'below', 'toasting slots')	(('browning control', 'below', 'toasting slots'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'eject button'), True)	(('eject button', 'above', 'toasting slots'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toasting slots', 'above', 'browning control'), True)	(('browning control', 'above', 'toasting slots'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('reheat button', 'above', 'browning control'), True)	(('browning control', 'above', 'reheat button'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eject button', 'below', 'toasting slots'), True)	(('toasting slots', 'below', 'eject button'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('browning control', 'below', 'reheat button'), True)	(('reheat button', 'below', 'browning control'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('browning control', 'below', 'toasting slots'), True)	(('toasting slots', 'below', 'browning control'), False)
Round 4 ...
typewriter worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('carriage release lever', 'next to', 'paper table'), True)	(('paper table', 'next to', 'carriage release lever'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('carriage release lever', 'above', 'type guide + ribbon vibrator'), True)	(('type guide + ribbon vibrator', 'above', 'carriage release lever'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carriage release lever', 'above', 'type guide + ribbon vibrator'), True)	(('type guide + ribbon vibrator', 'below', 'carriage release lever'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('paper table', 'above', 'paper finger'), True)	(('paper finger', 'above', 'paper table'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('paper table', 'above', 'paper finger'), True)	(('paper finger', 'below', 'paper table'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('type guide + ribbon vibrator', 'above', 'keytop'), True)	(('keytop', 'above', 'type guide + ribbon vibrator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('type guide + ribbon vibrator', 'above', 'keytop'), True)	(('keytop', 'below', 'type guide + ribbon vibrator'), True)
Constraint 1: x rln y <-> y rln x	(('type guide + ribbon vibrator', 'connects', 'ribbon spool'), True)	(('ribbon spool', 'connects', 'type guide + ribbon vibrator'), True)
Constraint 1: x rln y <-> y rln x	(('platen', 'next to', 'paper finger'), True)	(('paper finger', 'next to', 'platen'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('platen', 'behind', 'type guide + ribbon vibrator'), True)	(('type guide + ribbon vibrator', 'behind', 'platen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('platen', 'behind', 'type guide + ribbon vibrator'), True)	(('type guide + ribbon vibrator', 'in front of', 'platen'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ribbon spool', 'above', 'typebars'), True)	(('typebars', 'above', 'ribbon spool'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ribbon spool', 'above', 'typebars'), True)	(('typebars', 'below', 'ribbon spool'), True)
Constraint 4 (True antecedent)	('carriage release lever', 'above', 'type guide + ribbon vibrator')('type guide + ribbon vibrator', 'above', 'keytop')	(('carriage release lever', 'above', 'keytop'), True)
Constraint 4 (True antecedent)	('keytop', 'below', 'type guide + ribbon vibrator')('type guide + ribbon vibrator', 'below', 'carriage release lever')	(('keytop', 'below', 'carriage release lever'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('type guide + ribbon vibrator', 'above', 'carriage release lever'), False)	(('carriage release lever', 'below', 'type guide + ribbon vibrator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('paper finger', 'above', 'paper table'), False)	(('paper table', 'below', 'paper finger'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keytop', 'above', 'type guide + ribbon vibrator'), False)	(('type guide + ribbon vibrator', 'below', 'keytop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('type guide + ribbon vibrator', 'behind', 'platen'), False)	(('platen', 'in front of', 'type guide + ribbon vibrator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('typebars', 'above', 'ribbon spool'), False)	(('ribbon spool', 'below', 'typebars'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('carriage release lever', 'above', 'keytop'), True)	(('keytop', 'above', 'carriage release lever'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keytop', 'below', 'carriage release lever'), True)	(('carriage release lever', 'below', 'keytop'), False)
Round 3 ...
typewriter worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('paper table', 'above', 'type guide'), True)	(('type guide', 'above', 'paper table'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('paper table', 'above', 'type guide'), True)	(('type guide', 'below', 'paper table'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('paper table', 'above', 'paper finger'), True)	(('paper finger', 'above', 'paper table'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('paper table', 'above', 'paper finger'), True)	(('paper finger', 'below', 'paper table'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('paper table', 'above', 'ribbon vibrator'), True)	(('ribbon vibrator', 'above', 'paper table'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('paper table', 'above', 'ribbon vibrator'), True)	(('ribbon vibrator', 'below', 'paper table'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('paper finger', 'behind', 'type guide'), True)	(('type guide', 'behind', 'paper finger'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('paper finger', 'behind', 'type guide'), True)	(('type guide', 'in front of', 'paper finger'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('paper finger', 'behind', 'ribbon vibrator'), True)	(('ribbon vibrator', 'behind', 'paper finger'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('paper finger', 'behind', 'ribbon vibrator'), True)	(('ribbon vibrator', 'in front of', 'paper finger'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('paper finger', 'part of', 'platen'), True)	(('platen', 'part of', 'paper finger'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('paper finger', 'part of', 'platen'), True)	(('platen', 'has part', 'paper finger'), True)
Constraint 1: x rln y <-> y rln x	(('carriage release lever', 'connects', 'platen'), True)	(('platen', 'connects', 'carriage release lever'), True)
Constraint 1: x rln y <-> y rln x	(('type guide', 'connects', 'ribbon vibrator'), True)	(('ribbon vibrator', 'connects', 'type guide'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('platen', 'behind', 'ribbon vibrator'), True)	(('ribbon vibrator', 'behind', 'platen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('platen', 'behind', 'ribbon vibrator'), True)	(('ribbon vibrator', 'in front of', 'platen'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('platen', 'behind', 'type guide'), True)	(('type guide', 'behind', 'platen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('platen', 'behind', 'type guide'), True)	(('type guide', 'in front of', 'platen'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('type bars', 'behind', 'ribbon vibrator'), True)	(('ribbon vibrator', 'behind', 'type bars'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('type bars', 'behind', 'ribbon vibrator'), True)	(('ribbon vibrator', 'in front of', 'type bars'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('type bars', 'behind', 'type guide'), True)	(('type guide', 'behind', 'type bars'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('type bars', 'behind', 'type guide'), True)	(('type guide', 'in front of', 'type bars'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('type bars', 'above', 'keytop'), True)	(('keytop', 'above', 'type bars'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('type bars', 'above', 'keytop'), True)	(('keytop', 'below', 'type bars'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('type guide', 'above', 'paper table'), False)	(('paper table', 'below', 'type guide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('paper finger', 'above', 'paper table'), False)	(('paper table', 'below', 'paper finger'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ribbon vibrator', 'above', 'paper table'), False)	(('paper table', 'below', 'ribbon vibrator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('type guide', 'behind', 'paper finger'), False)	(('paper finger', 'in front of', 'type guide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ribbon vibrator', 'behind', 'paper finger'), False)	(('paper finger', 'in front of', 'ribbon vibrator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('platen', 'part of', 'paper finger'), False)	(('paper finger', 'has part', 'platen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ribbon vibrator', 'behind', 'platen'), False)	(('platen', 'in front of', 'ribbon vibrator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('type guide', 'behind', 'platen'), False)	(('platen', 'in front of', 'type guide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ribbon vibrator', 'behind', 'type bars'), False)	(('type bars', 'in front of', 'ribbon vibrator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('type guide', 'behind', 'type bars'), False)	(('type bars', 'in front of', 'type guide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keytop', 'above', 'type bars'), False)	(('type bars', 'below', 'keytop'), False)
Round 3 ...
typewriter worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('platen', 'connects', 'carriage release lever'), True)	(('carriage release lever', 'connects', 'platen'), True)
Constraint 1: x rln y <-> y rln x	(('platen', 'connects', 'type guide'), True)	(('type guide', 'connects', 'platen'), True)
Constraint 1: x rln y <-> y rln x	(('platen', 'connects', 'paper finger'), True)	(('paper finger', 'connects', 'platen'), True)
Constraint 1: x rln y <-> y rln x	(('platen', 'connects', 'paper table'), True)	(('paper table', 'connects', 'platen'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('platen', 'above', 'type bars'), True)	(('type bars', 'above', 'platen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('platen', 'above', 'type bars'), True)	(('type bars', 'below', 'platen'), True)
Constraint 1: x rln y <-> y rln x	(('paper table', 'connects', 'paper finger'), True)	(('paper finger', 'connects', 'paper table'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('type bars', 'above', 'keytop'), True)	(('keytop', 'above', 'type bars'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('type bars', 'above', 'keytop'), True)	(('keytop', 'below', 'type bars'), True)
Constraint 4 (True antecedent)	('platen', 'above', 'type bars')('type bars', 'above', 'keytop')	(('platen', 'above', 'keytop'), True)
Constraint 4 (True antecedent)	('keytop', 'below', 'type bars')('type bars', 'below', 'platen')	(('keytop', 'below', 'platen'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('type bars', 'above', 'platen'), False)	(('platen', 'below', 'type bars'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keytop', 'above', 'type bars'), False)	(('type bars', 'below', 'keytop'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('platen', 'above', 'keytop'), True)	(('keytop', 'above', 'platen'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keytop', 'below', 'platen'), True)	(('platen', 'below', 'keytop'), False)
Round 3 ...
violin worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('scroll', 'connects', 'pegbox'), True)	(('pegbox', 'connects', 'scroll'), True)
Constraint 1: x rln y <-> y rln x	(('pegbox', 'connects', 'strings'), True)	(('strings', 'connects', 'pegbox'), True)
Constraint 1: x rln y <-> y rln x	(('pegbox', 'connects', 'neck and fingerboard'), True)	(('neck and fingerboard', 'connects', 'pegbox'), True)
Constraint 1: x rln y <-> y rln x	(('neck and fingerboard', 'connects', 'body'), True)	(('body', 'connects', 'neck and fingerboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('neck and fingerboard', 'above', 'body'), True)	(('body', 'above', 'neck and fingerboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck and fingerboard', 'above', 'body'), True)	(('body', 'below', 'neck and fingerboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('strings', 'above', 'neck and fingerboard'), True)	(('neck and fingerboard', 'above', 'strings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'above', 'neck and fingerboard'), True)	(('neck and fingerboard', 'below', 'strings'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('strings', 'above', 'body'), True)	(('body', 'above', 'strings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'above', 'body'), True)	(('body', 'below', 'strings'), True)
Constraint 1: x rln y <-> y rln x	(('strings', 'connects', 'tailpiece'), True)	(('tailpiece', 'connects', 'strings'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('f-holes', 'part of', 'body'), True)	(('body', 'part of', 'f-holes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('f-holes', 'part of', 'body'), True)	(('body', 'has part', 'f-holes'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'bridge'), True)	(('bridge', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'chin rest'), True)	(('chin rest', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bridge', 'above', 'body'), True)	(('body', 'above', 'bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridge', 'above', 'body'), True)	(('body', 'below', 'bridge'), True)
Constraint 1: x rln y <-> y rln x	(('bridge', 'next to', 'tailpiece'), True)	(('tailpiece', 'next to', 'bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('chin rest', 'above', 'body'), True)	(('body', 'above', 'chin rest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chin rest', 'above', 'body'), True)	(('body', 'below', 'chin rest'), True)
Constraint 1: x rln y <-> y rln x	(('chin rest', 'next to', 'tailpiece'), True)	(('tailpiece', 'next to', 'chin rest'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tailpiece', 'above', 'body'), True)	(('body', 'above', 'tailpiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tailpiece', 'above', 'body'), True)	(('body', 'below', 'tailpiece'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'neck and fingerboard'), False)	(('neck and fingerboard', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck and fingerboard', 'above', 'strings'), False)	(('strings', 'below', 'neck and fingerboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'strings'), False)	(('strings', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'f-holes'), False)	(('f-holes', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'bridge'), False)	(('bridge', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'chin rest'), False)	(('chin rest', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'tailpiece'), False)	(('tailpiece', 'below', 'body'), False)
Round 3 ...
violin worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('scroll', 'above', 'pegbox'), True)	(('pegbox', 'above', 'scroll'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('scroll', 'above', 'pegbox'), True)	(('pegbox', 'below', 'scroll'), True)
Constraint 1: x rln y <-> y rln x	(('pegbox', 'next to', 'strings'), True)	(('strings', 'next to', 'pegbox'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'strings'), True)	(('strings', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'strings'), True)	(('strings', 'in front of', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'f-holes'), True)	(('f-holes', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'f-holes'), True)	(('f-holes', 'in front of', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'bridge'), True)	(('bridge', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'bridge'), True)	(('bridge', 'in front of', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'chin rest'), True)	(('chin rest', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'chin rest'), True)	(('chin rest', 'in front of', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('f-holes', 'next to', 'bridge'), True)	(('bridge', 'next to', 'f-holes'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bridge', 'behind', 'strings'), True)	(('strings', 'behind', 'bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridge', 'behind', 'strings'), True)	(('strings', 'in front of', 'bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bridge', 'above', 'chin rest'), True)	(('chin rest', 'above', 'bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridge', 'above', 'chin rest'), True)	(('chin rest', 'below', 'bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('chin rest', 'behind', 'strings'), True)	(('strings', 'behind', 'chin rest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chin rest', 'behind', 'strings'), True)	(('strings', 'in front of', 'chin rest'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('pegbox', 'above', 'scroll'), False)	(('scroll', 'below', 'pegbox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'behind', 'body'), False)	(('body', 'in front of', 'strings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('f-holes', 'behind', 'body'), False)	(('body', 'in front of', 'f-holes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridge', 'behind', 'body'), False)	(('body', 'in front of', 'bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chin rest', 'behind', 'body'), False)	(('body', 'in front of', 'chin rest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'behind', 'bridge'), False)	(('bridge', 'in front of', 'strings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chin rest', 'above', 'bridge'), False)	(('bridge', 'below', 'chin rest'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'behind', 'chin rest'), False)	(('chin rest', 'in front of', 'strings'), False)
Round 3 ...
violin worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('scroll', 'part of', 'pegbox'), True)	(('pegbox', 'part of', 'scroll'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('scroll', 'part of', 'pegbox'), True)	(('pegbox', 'has part', 'scroll'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pegbox', 'above', 'neck and fingerboard'), True)	(('neck and fingerboard', 'above', 'pegbox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pegbox', 'above', 'neck and fingerboard'), True)	(('neck and fingerboard', 'below', 'pegbox'), True)
Constraint 1: x rln y <-> y rln x	(('pegbox', 'connects', 'neck and fingerboard'), True)	(('neck and fingerboard', 'connects', 'pegbox'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('neck and fingerboard', 'above', 'body'), True)	(('body', 'above', 'neck and fingerboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck and fingerboard', 'above', 'body'), True)	(('body', 'below', 'neck and fingerboard'), True)
Constraint 1: x rln y <-> y rln x	(('neck and fingerboard', 'connects', 'body'), True)	(('body', 'connects', 'neck and fingerboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('strings', 'part of', 'neck and fingerboard'), True)	(('neck and fingerboard', 'part of', 'strings'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strings', 'part of', 'neck and fingerboard'), True)	(('neck and fingerboard', 'has part', 'strings'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bridge', 'part of', 'body'), True)	(('body', 'part of', 'bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridge', 'part of', 'body'), True)	(('body', 'has part', 'bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bridge', 'above', 'tailpiece'), True)	(('tailpiece', 'above', 'bridge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bridge', 'above', 'tailpiece'), True)	(('tailpiece', 'below', 'bridge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tailpiece', 'part of', 'body'), True)	(('body', 'part of', 'tailpiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tailpiece', 'part of', 'body'), True)	(('body', 'has part', 'tailpiece'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tailpiece', 'above', 'chin rest'), True)	(('chin rest', 'above', 'tailpiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tailpiece', 'above', 'chin rest'), True)	(('chin rest', 'below', 'tailpiece'), True)
Constraint 4 (True antecedent)	('pegbox', 'above', 'neck and fingerboard')('neck and fingerboard', 'above', 'body')	(('pegbox', 'above', 'body'), True)
Constraint 4 (True antecedent)	('bridge', 'above', 'tailpiece')('tailpiece', 'above', 'chin rest')	(('bridge', 'above', 'chin rest'), True)
Constraint 4 (True antecedent)	('body', 'below', 'neck and fingerboard')('neck and fingerboard', 'below', 'pegbox')	(('body', 'below', 'pegbox'), True)
Constraint 4 (True antecedent)	('chin rest', 'below', 'tailpiece')('tailpiece', 'below', 'bridge')	(('chin rest', 'below', 'bridge'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('pegbox', 'part of', 'scroll'), False)	(('scroll', 'has part', 'pegbox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck and fingerboard', 'above', 'pegbox'), False)	(('pegbox', 'below', 'neck and fingerboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'neck and fingerboard'), False)	(('neck and fingerboard', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck and fingerboard', 'part of', 'strings'), False)	(('strings', 'has part', 'neck and fingerboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'bridge'), False)	(('bridge', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tailpiece', 'above', 'bridge'), False)	(('bridge', 'below', 'tailpiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'tailpiece'), False)	(('tailpiece', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chin rest', 'above', 'tailpiece'), False)	(('tailpiece', 'below', 'chin rest'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pegbox', 'above', 'body'), True)	(('body', 'above', 'pegbox'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bridge', 'above', 'chin rest'), True)	(('chin rest', 'above', 'bridge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'pegbox'), True)	(('pegbox', 'below', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('chin rest', 'below', 'bridge'), True)	(('bridge', 'below', 'chin rest'), False)
Round 3 ...
wall clock worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('face', 'inside', 'case'), True)	(('case', 'inside', 'face'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('face', 'inside', 'case'), True)	(('case', 'contains', 'face'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('face', 'behind', 'minute hand'), True)	(('minute hand', 'behind', 'face'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('face', 'behind', 'minute hand'), True)	(('minute hand', 'in front of', 'face'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('minute hand', 'inside', 'case'), True)	(('case', 'inside', 'minute hand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('minute hand', 'inside', 'case'), True)	(('case', 'contains', 'minute hand'), True)
Constraint 1: x rln y <-> y rln x	(('minute hand', 'next to', 'hour hand'), True)	(('hour hand', 'next to', 'minute hand'), True)
Constraint 1: x rln y <-> y rln x	(('minute hand', 'connects', 'hour hand'), True)	(('hour hand', 'connects', 'minute hand'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hour hand', 'inside', 'case'), True)	(('case', 'inside', 'hour hand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hour hand', 'inside', 'case'), True)	(('case', 'contains', 'hour hand'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('escape wheel', 'inside', 'case'), True)	(('case', 'inside', 'escape wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('escape wheel', 'inside', 'case'), True)	(('case', 'contains', 'escape wheel'), True)
Constraint 1: x rln y <-> y rln x	(('escape wheel', 'connects', 'main wheel'), True)	(('main wheel', 'connects', 'escape wheel'), True)
Constraint 1: x rln y <-> y rln x	(('escape wheel', 'next to', 'main wheel'), True)	(('main wheel', 'next to', 'escape wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main wheel', 'inside', 'case'), True)	(('case', 'inside', 'main wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main wheel', 'inside', 'case'), True)	(('case', 'contains', 'main wheel'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'face'), False)	(('face', 'contains', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('minute hand', 'behind', 'face'), False)	(('face', 'in front of', 'minute hand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'minute hand'), False)	(('minute hand', 'contains', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'hour hand'), False)	(('hour hand', 'contains', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'escape wheel'), False)	(('escape wheel', 'contains', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'main wheel'), False)	(('main wheel', 'contains', 'case'), False)
Round 3 ...
wall clock worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('dial', 'inside', 'case'), True)	(('case', 'inside', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'inside', 'case'), True)	(('case', 'contains', 'dial'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dial', 'requires', 'battery'), True)	(('battery', 'requires', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'requires', 'battery'), True)	(('battery', 'required by', 'dial'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hour hand', 'part of', 'dial'), True)	(('dial', 'part of', 'hour hand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hour hand', 'part of', 'dial'), True)	(('dial', 'has part', 'hour hand'), True)
Constraint 1: x rln y <-> y rln x	(('hour hand', 'connects', 'minute hand'), True)	(('minute hand', 'connects', 'hour hand'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('battery', 'inside', 'case'), True)	(('case', 'inside', 'battery'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('battery', 'inside', 'case'), True)	(('case', 'contains', 'battery'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('minute hand', 'part of', 'dial'), True)	(('dial', 'part of', 'minute hand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('minute hand', 'part of', 'dial'), True)	(('dial', 'has part', 'minute hand'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'dial'), False)	(('dial', 'contains', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('battery', 'requires', 'dial'), False)	(('dial', 'required by', 'battery'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'part of', 'hour hand'), False)	(('hour hand', 'has part', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'battery'), False)	(('battery', 'contains', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'part of', 'minute hand'), False)	(('minute hand', 'has part', 'dial'), False)
Round 3 ...
wall clock worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('dial', 'behind', 'minute hand'), True)	(('minute hand', 'behind', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'behind', 'minute hand'), True)	(('minute hand', 'in front of', 'dial'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dial', 'behind', 'hour hand'), True)	(('hour hand', 'behind', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'behind', 'hour hand'), True)	(('hour hand', 'in front of', 'dial'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dial', 'inside', 'case'), True)	(('case', 'inside', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'inside', 'case'), True)	(('case', 'contains', 'dial'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hours', 'part of', 'dial'), True)	(('dial', 'part of', 'hours'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hours', 'part of', 'dial'), True)	(('dial', 'has part', 'hours'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('minutes', 'part of', 'dial'), True)	(('dial', 'part of', 'minutes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('minutes', 'part of', 'dial'), True)	(('dial', 'has part', 'minutes'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main wheel', 'part of', 'dial'), True)	(('dial', 'part of', 'main wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main wheel', 'part of', 'dial'), True)	(('dial', 'has part', 'main wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main wheel', 'requires', 'escape wheel'), True)	(('escape wheel', 'requires', 'main wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main wheel', 'requires', 'escape wheel'), True)	(('escape wheel', 'required by', 'main wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main wheel', 'behind', 'case'), True)	(('case', 'behind', 'main wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main wheel', 'behind', 'case'), True)	(('case', 'in front of', 'main wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('escape wheel', 'part of', 'dial'), True)	(('dial', 'part of', 'escape wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('escape wheel', 'part of', 'dial'), True)	(('dial', 'has part', 'escape wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('escape wheel', 'behind', 'case'), True)	(('case', 'behind', 'escape wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('escape wheel', 'behind', 'case'), True)	(('case', 'in front of', 'escape wheel'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('minute hand', 'behind', 'dial'), False)	(('dial', 'in front of', 'minute hand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hour hand', 'behind', 'dial'), False)	(('dial', 'in front of', 'hour hand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'inside', 'dial'), False)	(('dial', 'contains', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'part of', 'hours'), False)	(('hours', 'has part', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'part of', 'minutes'), False)	(('minutes', 'has part', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'part of', 'main wheel'), False)	(('main wheel', 'has part', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('escape wheel', 'requires', 'main wheel'), False)	(('main wheel', 'required by', 'escape wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'behind', 'main wheel'), False)	(('main wheel', 'in front of', 'case'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dial', 'part of', 'escape wheel'), False)	(('escape wheel', 'has part', 'dial'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('case', 'behind', 'escape wheel'), False)	(('escape wheel', 'in front of', 'case'), False)
Round 3 ...
window worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('hinge', 'surrounds', 'glass panel'), True)	(('glass panel', 'surrounds', 'hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hinge', 'surrounds', 'glass panel'), True)	(('glass panel', 'surrounded by', 'hinge'), True)
Constraint 1: x rln y <-> y rln x	(('hinge', 'connects', 'lock handle'), True)	(('lock handle', 'connects', 'hinge'), True)
Constraint 1: x rln y <-> y rln x	(('hinge', 'connects', 'operator'), True)	(('operator', 'connects', 'hinge'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('glass panel', 'surrounds', 'hinge'), False)	(('hinge', 'surrounded by', 'glass panel'), False)
Round 3 ...
window worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('glass panel', 'connects', 'top hinge'), True)	(('top hinge', 'connects', 'glass panel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top hinge', 'above', 'glass panel'), True)	(('glass panel', 'above', 'top hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top hinge', 'above', 'glass panel'), True)	(('glass panel', 'below', 'top hinge'), True)
Constraint 1: x rln y <-> y rln x	(('glass panel', 'next to', 'lock handle'), True)	(('lock handle', 'next to', 'glass panel'), True)
Constraint 1: x rln y <-> y rln x	(('glass panel', 'connects', 'operator'), True)	(('operator', 'connects', 'glass panel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('glass panel', 'above', 'operator'), True)	(('operator', 'above', 'glass panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass panel', 'above', 'operator'), True)	(('operator', 'below', 'glass panel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top hinge', 'above', 'lock handle'), True)	(('lock handle', 'above', 'top hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top hinge', 'above', 'lock handle'), True)	(('lock handle', 'below', 'top hinge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lock handle', 'above', 'operator'), True)	(('operator', 'above', 'lock handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock handle', 'above', 'operator'), True)	(('operator', 'below', 'lock handle'), True)
Constraint 1: x rln y <-> y rln x	(('operator', 'next to', 'bottom hinge'), True)	(('bottom hinge', 'next to', 'operator'), True)
Constraint 4 (True antecedent)	('top hinge', 'above', 'glass panel')('glass panel', 'above', 'operator')	(('top hinge', 'above', 'operator'), True)
Constraint 4 (True antecedent)	('operator', 'below', 'glass panel')('glass panel', 'below', 'top hinge')	(('operator', 'below', 'top hinge'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('glass panel', 'above', 'top hinge'), False)	(('top hinge', 'below', 'glass panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('operator', 'above', 'glass panel'), False)	(('glass panel', 'below', 'operator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock handle', 'above', 'top hinge'), False)	(('top hinge', 'below', 'lock handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('operator', 'above', 'lock handle'), False)	(('lock handle', 'below', 'operator'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top hinge', 'above', 'operator'), True)	(('operator', 'above', 'top hinge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('operator', 'below', 'top hinge'), True)	(('top hinge', 'below', 'operator'), False)
Round 3 ...
window worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top hinge', 'above', 'operator'), True)	(('operator', 'above', 'top hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top hinge', 'above', 'operator'), True)	(('operator', 'below', 'top hinge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top hinge', 'above', 'glass panel'), True)	(('glass panel', 'above', 'top hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top hinge', 'above', 'glass panel'), True)	(('glass panel', 'below', 'top hinge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top hinge', 'above', 'lock handle'), True)	(('lock handle', 'above', 'top hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top hinge', 'above', 'lock handle'), True)	(('lock handle', 'below', 'top hinge'), True)
Constraint 1: x rln y <-> y rln x	(('operator', 'next to', 'glass panel'), True)	(('glass panel', 'next to', 'operator'), True)
Constraint 1: x rln y <-> y rln x	(('lock handle', 'next to', 'glass panel'), True)	(('glass panel', 'next to', 'lock handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('operator', 'above', 'bottom hinge'), True)	(('bottom hinge', 'above', 'operator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('operator', 'above', 'bottom hinge'), True)	(('bottom hinge', 'below', 'operator'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lock handle', 'above', 'bottom hinge'), True)	(('bottom hinge', 'above', 'lock handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock handle', 'above', 'bottom hinge'), True)	(('bottom hinge', 'below', 'lock handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('glass panel', 'above', 'bottom hinge'), True)	(('bottom hinge', 'above', 'glass panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass panel', 'above', 'bottom hinge'), True)	(('bottom hinge', 'below', 'glass panel'), True)
Constraint 4 (True antecedent)	('top hinge', 'above', 'operator')('operator', 'above', 'bottom hinge')	(('top hinge', 'above', 'bottom hinge'), True)
Constraint 4 (True antecedent)	('bottom hinge', 'below', 'operator')('operator', 'below', 'top hinge')	(('bottom hinge', 'below', 'top hinge'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('operator', 'above', 'top hinge'), False)	(('top hinge', 'below', 'operator'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass panel', 'above', 'top hinge'), False)	(('top hinge', 'below', 'glass panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lock handle', 'above', 'top hinge'), False)	(('top hinge', 'below', 'lock handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom hinge', 'above', 'operator'), False)	(('operator', 'below', 'bottom hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom hinge', 'above', 'lock handle'), False)	(('lock handle', 'below', 'bottom hinge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom hinge', 'above', 'glass panel'), False)	(('glass panel', 'below', 'bottom hinge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top hinge', 'above', 'bottom hinge'), True)	(('bottom hinge', 'above', 'top hinge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottom hinge', 'below', 'top hinge'), True)	(('top hinge', 'below', 'bottom hinge'), False)
Round 3 ...
bat worker_103...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('elbow', 'connects', 'arm'), True)	(('arm', 'connects', 'elbow'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'thumb'), True)	(('thumb', 'connects', 'arm'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'fingers'), True)	(('fingers', 'connects', 'arm'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wing membrane', 'part of', 'thumb'), True)	(('thumb', 'part of', 'wing membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing membrane', 'part of', 'thumb'), True)	(('thumb', 'has part', 'wing membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wing membrane', 'part of', 'arm'), True)	(('arm', 'part of', 'wing membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing membrane', 'part of', 'arm'), True)	(('arm', 'has part', 'wing membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wing membrane', 'part of', 'fingers'), True)	(('fingers', 'part of', 'wing membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing membrane', 'part of', 'fingers'), True)	(('fingers', 'has part', 'wing membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wing membrane', 'part of', 'elbow'), True)	(('elbow', 'part of', 'wing membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing membrane', 'part of', 'elbow'), True)	(('elbow', 'has part', 'wing membrane'), True)
Constraint 1: x rln y <-> y rln x	(('wing membrane', 'connects', 'fur'), True)	(('fur', 'connects', 'wing membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'above', 'tail membrane'), True)	(('tail membrane', 'above', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'above', 'tail membrane'), True)	(('tail membrane', 'below', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'leaf nose'), True)	(('leaf nose', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'leaf nose'), True)	(('leaf nose', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'ear'), True)	(('ear', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'ear'), True)	(('ear', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail membrane', 'surrounds', 'tail'), True)	(('tail', 'surrounds', 'tail membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail membrane', 'surrounds', 'tail'), True)	(('tail', 'surrounded by', 'tail membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'inside', 'tail membrane'), True)	(('tail membrane', 'inside', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'inside', 'tail membrane'), True)	(('tail membrane', 'contains', 'leg'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'toes'), True)	(('toes', 'connects', 'leg'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('thumb', 'part of', 'wing membrane'), False)	(('wing membrane', 'has part', 'thumb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('arm', 'part of', 'wing membrane'), False)	(('wing membrane', 'has part', 'arm'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fingers', 'part of', 'wing membrane'), False)	(('wing membrane', 'has part', 'fingers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('elbow', 'part of', 'wing membrane'), False)	(('wing membrane', 'has part', 'elbow'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail membrane', 'above', 'fur'), False)	(('fur', 'below', 'tail membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaf nose', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'leaf nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'surrounds', 'tail membrane'), False)	(('tail membrane', 'surrounded by', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail membrane', 'inside', 'leg'), False)	(('leg', 'contains', 'tail membrane'), False)
Round 3 ...
bat worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('fingers', 'connects', 'thumb'), True)	(('thumb', 'connects', 'fingers'), True)
Constraint 1: x rln y <-> y rln x	(('thumb', 'connects', 'arm'), True)	(('arm', 'connects', 'thumb'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'body'), True)	(('body', 'connects', 'arm'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail membrane'), True)	(('tail membrane', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail membrane', 'part of', 'tail'), True)	(('tail', 'part of', 'tail membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail membrane', 'part of', 'tail'), True)	(('tail', 'has part', 'tail membrane'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'toes'), True)	(('toes', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('toes', 'connects', 'leg'), True)	(('leg', 'connects', 'toes'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'next to', 'wing membrane'), True)	(('wing membrane', 'next to', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'nose leaf'), True)	(('nose leaf', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'nose leaf'), True)	(('nose leaf', 'in front of', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('nose leaf', 'next to', 'ear'), True)	(('ear', 'next to', 'nose leaf'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'part of', 'tail membrane'), False)	(('tail membrane', 'has part', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose leaf', 'behind', 'body'), False)	(('body', 'in front of', 'nose leaf'), False)
Round 3 ...
bat worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nose leaf', 'above', 'ear'), True)	(('ear', 'above', 'nose leaf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose leaf', 'above', 'ear'), True)	(('ear', 'below', 'nose leaf'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'next to', 'elbow'), True)	(('elbow', 'next to', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'tail'), True)	(('tail', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'tail'), True)	(('tail', 'below', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'leg'), True)	(('leg', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'leg'), True)	(('leg', 'below', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail membrane', 'surrounds', 'tail'), True)	(('tail', 'surrounds', 'tail membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail membrane', 'surrounds', 'tail'), True)	(('tail', 'surrounded by', 'tail membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail membrane', 'surrounds', 'leg'), True)	(('leg', 'surrounds', 'tail membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail membrane', 'surrounds', 'leg'), True)	(('leg', 'surrounded by', 'tail membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'toes'), True)	(('toes', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'toes'), True)	(('toes', 'below', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail membrane', 'surrounds', 'toes'), True)	(('toes', 'surrounds', 'tail membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail membrane', 'surrounds', 'toes'), True)	(('toes', 'surrounded by', 'tail membrane'), True)
Constraint 1: x rln y <-> y rln x	(('elbow', 'connects', 'arm'), True)	(('arm', 'connects', 'elbow'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'thumb'), True)	(('thumb', 'connects', 'arm'), True)
Constraint 1: x rln y <-> y rln x	(('arm', 'connects', 'fingers'), True)	(('fingers', 'connects', 'arm'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wing membrane', 'surrounds', 'thumb'), True)	(('thumb', 'surrounds', 'wing membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing membrane', 'surrounds', 'thumb'), True)	(('thumb', 'surrounded by', 'wing membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wing membrane', 'surrounds', 'fingers'), True)	(('fingers', 'surrounds', 'wing membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing membrane', 'surrounds', 'fingers'), True)	(('fingers', 'surrounded by', 'wing membrane'), True)
Constraint 4 (True antecedent)	('nose leaf', 'above', 'ear')('ear', 'above', 'tail')	(('nose leaf', 'above', 'tail'), True)
Constraint 4 (True antecedent)	('nose leaf', 'above', 'ear')('ear', 'above', 'leg')	(('nose leaf', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'leg')('leg', 'above', 'toes')	(('ear', 'above', 'toes'), True)
Constraint 4 (True antecedent)	('tail', 'below', 'ear')('ear', 'below', 'nose leaf')	(('tail', 'below', 'nose leaf'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'ear')('ear', 'below', 'nose leaf')	(('leg', 'below', 'nose leaf'), True)
Constraint 4 (True antecedent)	('toes', 'below', 'leg')('leg', 'below', 'ear')	(('toes', 'below', 'ear'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'nose leaf'), False)	(('nose leaf', 'below', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'ear'), False)	(('ear', 'below', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'ear'), False)	(('ear', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'surrounds', 'tail membrane'), False)	(('tail membrane', 'surrounded by', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'surrounds', 'tail membrane'), False)	(('tail membrane', 'surrounded by', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toes', 'above', 'leg'), False)	(('leg', 'below', 'toes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toes', 'surrounds', 'tail membrane'), False)	(('tail membrane', 'surrounded by', 'toes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thumb', 'surrounds', 'wing membrane'), False)	(('wing membrane', 'surrounded by', 'thumb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fingers', 'surrounds', 'wing membrane'), False)	(('wing membrane', 'surrounded by', 'fingers'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose leaf', 'above', 'tail'), True)	(('tail', 'above', 'nose leaf'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose leaf', 'above', 'leg'), True)	(('leg', 'above', 'nose leaf'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'toes'), True)	(('toes', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'below', 'nose leaf'), True)	(('nose leaf', 'below', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'nose leaf'), True)	(('nose leaf', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toes', 'below', 'ear'), True)	(('ear', 'below', 'toes'), False)
Constraint 4 (True antecedent)	('nose leaf', 'above', 'ear')('ear', 'above', 'toes')	(('nose leaf', 'above', 'toes'), True)
Constraint 4 (True antecedent)	('toes', 'below', 'leg')('leg', 'below', 'nose leaf')	(('toes', 'below', 'nose leaf'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nose leaf', 'above', 'toes'), True)	(('toes', 'above', 'nose leaf'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toes', 'below', 'nose leaf'), True)	(('nose leaf', 'below', 'toes'), False)
Round 4 ...
bird worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('beak', 'connects', 'head'), True)	(('head', 'connects', 'beak'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'surrounds', 'eye'), True)	(('eye', 'surrounds', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'surrounds', 'eye'), True)	(('eye', 'surrounded by', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'body'), True)	(('body', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'body'), True)	(('body', 'below', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'body'), True)	(('body', 'surrounds', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'surrounds', 'body'), True)	(('body', 'surrounded by', 'feather'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'head'), True)	(('head', 'surrounds', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'surrounds', 'head'), True)	(('head', 'surrounded by', 'feather'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'wing'), True)	(('wing', 'surrounds', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'surrounds', 'wing'), True)	(('wing', 'surrounded by', 'feather'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'tail'), True)	(('tail', 'surrounds', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'surrounds', 'tail'), True)	(('tail', 'surrounded by', 'feather'), True)
Constraint 1: x rln y <-> y rln x	(('wing', 'connects', 'body'), True)	(('body', 'connects', 'wing'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('tail', 'connects', 'body'), True)	(('body', 'connects', 'tail'), True)
Constraint 4 (True antecedent)	('feather', 'surrounds', 'head')('head', 'surrounds', 'eye')	(('feather', 'surrounds', 'eye'), True)
Constraint 4 (True antecedent)	('eye', 'surrounded by', 'head')('head', 'surrounded by', 'feather')	(('eye', 'surrounded by', 'feather'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'surrounds', 'head'), False)	(('head', 'surrounded by', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'head'), False)	(('head', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'surrounds', 'feather'), False)	(('feather', 'surrounded by', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'surrounds', 'feather'), False)	(('feather', 'surrounded by', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'surrounds', 'feather'), False)	(('feather', 'surrounded by', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'surrounds', 'feather'), False)	(('feather', 'surrounded by', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'eye'), True)	(('eye', 'surrounds', 'feather'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'surrounded by', 'feather'), True)	(('feather', 'surrounded by', 'eye'), False)
Round 3 ...
bird worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'beak'), True)	(('beak', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'beak'), True)	(('beak', 'below', 'eye'), True)
Constraint 1: x rln y <-> y rln x	(('eye', 'connects', 'head'), True)	(('head', 'connects', 'eye'), True)
Constraint 1: x rln y <-> y rln x	(('beak', 'connects', 'head'), True)	(('head', 'connects', 'beak'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'body'), True)	(('body', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'body'), True)	(('body', 'below', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'head'), True)	(('head', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'wing'), True)	(('wing', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'tail'), True)	(('tail', 'surrounds', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'surrounds', 'tail'), True)	(('tail', 'surrounded by', 'feather'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'legs'), True)	(('legs', 'surrounds', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'surrounds', 'legs'), True)	(('legs', 'surrounded by', 'feather'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'body'), True)	(('body', 'surrounds', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'surrounds', 'body'), True)	(('body', 'surrounded by', 'feather'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'head'), True)	(('head', 'surrounds', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'surrounds', 'head'), True)	(('head', 'surrounded by', 'feather'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'surrounds', 'wing'), True)	(('wing', 'surrounds', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'surrounds', 'wing'), True)	(('wing', 'surrounded by', 'feather'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'leg')	(('head', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'head')	(('leg', 'below', 'head'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('beak', 'above', 'eye'), False)	(('eye', 'below', 'beak'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'head'), False)	(('head', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'surrounds', 'feather'), False)	(('feather', 'surrounded by', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'surrounds', 'feather'), False)	(('feather', 'surrounded by', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'surrounds', 'feather'), False)	(('feather', 'surrounded by', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'surrounds', 'feather'), False)	(('feather', 'surrounded by', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'surrounds', 'feather'), False)	(('feather', 'surrounded by', 'wing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'leg'), True)	(('leg', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'head'), True)	(('head', 'below', 'leg'), False)
Round 3 ...
bird worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'beak'), True)	(('beak', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'beak'), True)	(('beak', 'below', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'part of', 'head'), True)	(('head', 'part of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'part of', 'head'), True)	(('head', 'has part', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('beak', 'part of', 'head'), True)	(('head', 'part of', 'beak'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('beak', 'part of', 'head'), True)	(('head', 'has part', 'beak'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'body'), True)	(('body', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'body'), True)	(('body', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'body'), True)	(('body', 'below', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'part of', 'body'), True)	(('body', 'part of', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'part of', 'body'), True)	(('body', 'has part', 'feather'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'above', 'wing'), True)	(('wing', 'above', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'above', 'wing'), True)	(('wing', 'below', 'feather'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'part of', 'wing'), True)	(('wing', 'part of', 'feather'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feather', 'part of', 'wing'), True)	(('wing', 'has part', 'feather'), True)
Constraint 1: x rln y <-> y rln x	(('wing', 'connects', 'body'), True)	(('body', 'connects', 'wing'), True)
Constraint 1: x rln y <-> y rln x	(('tail', 'connects', 'body'), True)	(('body', 'connects', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wing', 'above', 'leg'), True)	(('leg', 'above', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'above', 'leg'), True)	(('leg', 'below', 'wing'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'leg')	(('head', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('feather', 'above', 'wing')('wing', 'above', 'leg')	(('feather', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'head')	(('leg', 'below', 'head'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'wing')('wing', 'below', 'feather')	(('leg', 'below', 'feather'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('beak', 'above', 'eye'), False)	(('eye', 'below', 'beak'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'eye'), False)	(('eye', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'beak'), False)	(('beak', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'head'), False)	(('head', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'feather'), False)	(('feather', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'above', 'feather'), False)	(('feather', 'below', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'part of', 'feather'), False)	(('feather', 'has part', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'wing'), False)	(('wing', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'leg'), True)	(('leg', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('feather', 'above', 'leg'), True)	(('leg', 'above', 'feather'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'head'), True)	(('head', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'feather'), True)	(('feather', 'below', 'leg'), False)
Round 3 ...
bookcase worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('top', 'connects', 'sides'), True)	(('sides', 'connects', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('top', 'connects', 'divider'), True)	(('divider', 'connects', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'shelves'), True)	(('shelves', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'shelves'), True)	(('shelves', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'divider'), True)	(('divider', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'divider'), True)	(('divider', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'back'), True)	(('back', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'back'), True)	(('back', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'sides'), True)	(('sides', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'sides'), True)	(('sides', 'below', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('shelves', 'connects', 'sides'), True)	(('sides', 'connects', 'shelves'), True)
Constraint 1: x rln y <-> y rln x	(('shelves', 'connects', 'divider'), True)	(('divider', 'connects', 'shelves'), True)
Constraint 1: x rln y <-> y rln x	(('divider', 'connects', 'base'), True)	(('base', 'connects', 'divider'), True)
Constraint 1: x rln y <-> y rln x	(('base', 'connects', 'sides'), True)	(('sides', 'connects', 'base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back', 'behind', 'top'), True)	(('top', 'behind', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'behind', 'top'), True)	(('top', 'in front of', 'back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back', 'behind', 'sides'), True)	(('sides', 'behind', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'behind', 'sides'), True)	(('sides', 'in front of', 'back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back', 'behind', 'divider'), True)	(('divider', 'behind', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'behind', 'divider'), True)	(('divider', 'in front of', 'back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back', 'behind', 'shelves'), True)	(('shelves', 'behind', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'behind', 'shelves'), True)	(('shelves', 'in front of', 'back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'base'), True)	(('base', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'base'), True)	(('base', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'behind', 'divider'), True)	(('divider', 'behind', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'behind', 'divider'), True)	(('divider', 'in front of', 'base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'behind', 'sides'), True)	(('sides', 'behind', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'behind', 'sides'), True)	(('sides', 'in front of', 'base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'behind', 'back'), True)	(('back', 'behind', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'behind', 'back'), True)	(('back', 'in front of', 'base'), True)
Constraint 1: x rln y <-> y rln x	(('back', 'connects', 'base'), True)	(('base', 'connects', 'back'), True)
Constraint 1: x rln y <-> y rln x	(('back', 'connects', 'top'), True)	(('top', 'connects', 'back'), True)
Constraint 4 (True antecedent)	('base', 'behind', 'back')('back', 'behind', 'top')	(('base', 'behind', 'top'), True)
Constraint 4 (True antecedent)	('base', 'behind', 'back')('back', 'behind', 'shelves')	(('base', 'behind', 'shelves'), True)
Constraint 4 (True antecedent)	('top', 'in front of', 'back')('back', 'in front of', 'base')	(('top', 'in front of', 'base'), True)
Constraint 4 (True antecedent)	('shelves', 'in front of', 'back')('back', 'in front of', 'base')	(('shelves', 'in front of', 'base'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('shelves', 'above', 'top'), False)	(('top', 'below', 'shelves'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('divider', 'above', 'top'), False)	(('top', 'below', 'divider'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'above', 'top'), False)	(('top', 'below', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'top'), False)	(('top', 'below', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'behind', 'back'), False)	(('back', 'in front of', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'behind', 'back'), False)	(('back', 'in front of', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('divider', 'behind', 'back'), False)	(('back', 'in front of', 'divider'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelves', 'behind', 'back'), False)	(('back', 'in front of', 'shelves'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'top'), False)	(('top', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('divider', 'behind', 'base'), False)	(('base', 'in front of', 'divider'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'behind', 'base'), False)	(('base', 'in front of', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'behind', 'base'), False)	(('base', 'in front of', 'back'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'behind', 'top'), True)	(('top', 'behind', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'behind', 'shelves'), True)	(('shelves', 'behind', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'in front of', 'base'), True)	(('base', 'in front of', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shelves', 'in front of', 'base'), True)	(('base', 'in front of', 'shelves'), False)
Round 3 ...
bookcase worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'sides'), True)	(('sides', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'sides'), True)	(('sides', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'divider'), True)	(('divider', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'divider'), True)	(('divider', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'shelf'), True)	(('shelf', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'shelf'), True)	(('shelf', 'below', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('top', 'connects', 'divider'), True)	(('divider', 'connects', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('top', 'connects', 'sides'), True)	(('sides', 'connects', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('shelf', 'connects', 'divider'), True)	(('divider', 'connects', 'shelf'), True)
Constraint 1: x rln y <-> y rln x	(('shelf', 'connects', 'bottom'), True)	(('bottom', 'connects', 'shelf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shelf', 'above', 'bottom'), True)	(('bottom', 'above', 'shelf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'above', 'bottom'), True)	(('bottom', 'below', 'shelf'), True)
Constraint 1: x rln y <-> y rln x	(('divider', 'connects', 'bottom'), True)	(('bottom', 'connects', 'divider'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('divider', 'above', 'bottom'), True)	(('bottom', 'above', 'divider'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('divider', 'above', 'bottom'), True)	(('bottom', 'below', 'divider'), True)
Constraint 1: x rln y <-> y rln x	(('sides', 'connects', 'bottom'), True)	(('bottom', 'connects', 'sides'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'above', 'bottom'), True)	(('bottom', 'above', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'bottom'), True)	(('bottom', 'below', 'sides'), True)
Constraint 4 (True antecedent)	('top', 'above', 'sides')('sides', 'above', 'bottom')	(('top', 'above', 'bottom'), True)
Constraint 4 (True antecedent)	('bottom', 'below', 'shelf')('shelf', 'below', 'top')	(('bottom', 'below', 'top'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'top'), False)	(('top', 'below', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('divider', 'above', 'top'), False)	(('top', 'below', 'divider'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'above', 'top'), False)	(('top', 'below', 'shelf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom', 'above', 'shelf'), False)	(('shelf', 'below', 'bottom'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom', 'above', 'divider'), False)	(('divider', 'below', 'bottom'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom', 'above', 'sides'), False)	(('sides', 'below', 'bottom'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'bottom'), True)	(('bottom', 'above', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottom', 'below', 'top'), True)	(('top', 'below', 'bottom'), False)
Round 3 ...
bookcase worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('dividers', 'connects', 'top'), True)	(('top', 'connects', 'dividers'), True)
Constraint 1: x rln y <-> y rln x	(('dividers', 'connects', 'bottom'), True)	(('bottom', 'connects', 'dividers'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dividers', 'above', 'bottom'), True)	(('bottom', 'above', 'dividers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dividers', 'above', 'bottom'), True)	(('bottom', 'below', 'dividers'), True)
Constraint 1: x rln y <-> y rln x	(('dividers', 'next to', 'shelf'), True)	(('shelf', 'next to', 'dividers'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'shelf'), True)	(('shelf', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'shelf'), True)	(('shelf', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shelf', 'above', 'bottome'), True)	(('bottome', 'above', 'shelf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'above', 'bottome'), True)	(('bottome', 'below', 'shelf'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dividers', 'behind', 'top'), True)	(('top', 'behind', 'dividers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dividers', 'behind', 'top'), True)	(('top', 'in front of', 'dividers'), True)
Constraint 4 (True antecedent)	('top', 'above', 'shelf')('shelf', 'above', 'bottome')	(('top', 'above', 'bottome'), True)
Constraint 4 (True antecedent)	('bottome', 'below', 'shelf')('shelf', 'below', 'top')	(('bottome', 'below', 'top'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('bottom', 'above', 'dividers'), False)	(('dividers', 'below', 'bottom'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shelf', 'above', 'top'), False)	(('top', 'below', 'shelf'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottome', 'above', 'shelf'), False)	(('shelf', 'below', 'bottome'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'behind', 'dividers'), False)	(('dividers', 'in front of', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'bottome'), True)	(('bottome', 'above', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottome', 'below', 'top'), True)	(('top', 'below', 'bottome'), False)
Round 3 ...
bus worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'windows'), True)	(('windows', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'windows'), True)	(('windows', 'below', 'roof'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('brakelights', 'behind', 'sides'), True)	(('sides', 'behind', 'brakelights'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('brakelights', 'behind', 'sides'), True)	(('sides', 'in front of', 'brakelights'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windows', 'above', 'sides'), True)	(('sides', 'above', 'windows'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windows', 'above', 'sides'), True)	(('sides', 'below', 'windows'), True)
Constraint 1: x rln y <-> y rln x	(('windows', 'next to', 'door'), True)	(('door', 'next to', 'windows'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'connects', 'sides'), True)	(('sides', 'connects', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('sides', 'connects', 'wheels'), True)	(('wheels', 'connects', 'sides'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'above', 'wheels'), True)	(('wheels', 'above', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'wheels'), True)	(('wheels', 'below', 'sides'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'behind', 'door'), True)	(('door', 'behind', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'behind', 'door'), True)	(('door', 'in front of', 'wheels'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'next to', 'sides'), True)	(('sides', 'next to', 'door'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'behind', 'door'), True)	(('door', 'behind', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'behind', 'door'), True)	(('door', 'in front of', 'windshield'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'behind', 'wipers'), True)	(('wipers', 'behind', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'behind', 'wipers'), True)	(('wipers', 'in front of', 'windshield'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('indicators', 'above', 'windshield'), True)	(('windshield', 'above', 'indicators'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('indicators', 'above', 'windshield'), True)	(('windshield', 'below', 'indicators'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'above', 'headlights'), True)	(('headlights', 'above', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'above', 'headlights'), True)	(('headlights', 'below', 'windshield'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('steering wheel', 'behind', 'windshield'), True)	(('windshield', 'behind', 'steering wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steering wheel', 'behind', 'windshield'), True)	(('windshield', 'in front of', 'steering wheel'), True)
Constraint 1: x rln y <-> y rln x	(('headlights', 'next to', 'horn'), True)	(('horn', 'next to', 'headlights'), True)
Constraint 4 (True antecedent)	('roof', 'above', 'windows')('windows', 'above', 'sides')	(('roof', 'above', 'sides'), True)
Constraint 4 (True antecedent)	('windows', 'above', 'sides')('sides', 'above', 'wheels')	(('windows', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('indicators', 'above', 'windshield')('windshield', 'above', 'headlights')	(('indicators', 'above', 'headlights'), True)
Constraint 4 (True antecedent)	('steering wheel', 'behind', 'windshield')('windshield', 'behind', 'door')	(('steering wheel', 'behind', 'door'), True)
Constraint 4 (True antecedent)	('steering wheel', 'behind', 'windshield')('windshield', 'behind', 'wipers')	(('steering wheel', 'behind', 'wipers'), True)
Constraint 4 (True antecedent)	('sides', 'below', 'windows')('windows', 'below', 'roof')	(('sides', 'below', 'roof'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'sides')('sides', 'below', 'windows')	(('wheels', 'below', 'windows'), True)
Constraint 4 (True antecedent)	('door', 'in front of', 'windshield')('windshield', 'in front of', 'steering wheel')	(('door', 'in front of', 'steering wheel'), True)
Constraint 4 (True antecedent)	('wipers', 'in front of', 'windshield')('windshield', 'in front of', 'steering wheel')	(('wipers', 'in front of', 'steering wheel'), True)
Constraint 4 (True antecedent)	('headlights', 'below', 'windshield')('windshield', 'below', 'indicators')	(('headlights', 'below', 'indicators'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('windows', 'above', 'roof'), False)	(('roof', 'below', 'windows'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'behind', 'brakelights'), False)	(('brakelights', 'in front of', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'windows'), False)	(('windows', 'below', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'sides'), False)	(('sides', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'wheels'), False)	(('wheels', 'in front of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'windshield'), False)	(('windshield', 'in front of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wipers', 'behind', 'windshield'), False)	(('windshield', 'in front of', 'wipers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'above', 'indicators'), False)	(('indicators', 'below', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('headlights', 'above', 'windshield'), False)	(('windshield', 'below', 'headlights'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'behind', 'steering wheel'), False)	(('steering wheel', 'in front of', 'windshield'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'sides'), True)	(('sides', 'above', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('windows', 'above', 'wheels'), True)	(('wheels', 'above', 'windows'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('indicators', 'above', 'headlights'), True)	(('headlights', 'above', 'indicators'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('steering wheel', 'behind', 'door'), True)	(('door', 'behind', 'steering wheel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('steering wheel', 'behind', 'wipers'), True)	(('wipers', 'behind', 'steering wheel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'below', 'roof'), True)	(('roof', 'below', 'sides'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'windows'), True)	(('windows', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'in front of', 'steering wheel'), True)	(('steering wheel', 'in front of', 'door'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wipers', 'in front of', 'steering wheel'), True)	(('steering wheel', 'in front of', 'wipers'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('headlights', 'below', 'indicators'), True)	(('indicators', 'below', 'headlights'), False)
Constraint 4 (True antecedent)	('roof', 'above', 'windows')('windows', 'above', 'wheels')	(('roof', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'sides')('sides', 'below', 'roof')	(('wheels', 'below', 'roof'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'wheels'), True)	(('wheels', 'above', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'roof'), True)	(('roof', 'below', 'wheels'), False)
Round 4 ...
bus worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'breaklights'), True)	(('breaklights', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'breaklights'), True)	(('breaklights', 'below', 'roof'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('breaklights', 'behind', 'headlights'), True)	(('headlights', 'behind', 'breaklights'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('breaklights', 'behind', 'headlights'), True)	(('headlights', 'in front of', 'breaklights'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('indicators', 'behind', 'headlights'), True)	(('headlights', 'behind', 'indicators'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('indicators', 'behind', 'headlights'), True)	(('headlights', 'in front of', 'indicators'), True)
Constraint 1: x rln y <-> y rln x	(('indicators', 'next to', 'horn'), True)	(('horn', 'next to', 'indicators'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'part of', 'steering wheel'), True)	(('steering wheel', 'part of', 'horn'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horn', 'part of', 'steering wheel'), True)	(('steering wheel', 'has part', 'horn'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('steering wheel', 'behind', 'windows'), True)	(('windows', 'behind', 'steering wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steering wheel', 'behind', 'windows'), True)	(('windows', 'in front of', 'steering wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windows', 'behind', 'wipers'), True)	(('wipers', 'behind', 'windows'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windows', 'behind', 'wipers'), True)	(('wipers', 'in front of', 'windows'), True)
Constraint 1: x rln y <-> y rln x	(('wipers', 'next to', 'door'), True)	(('door', 'next to', 'wipers'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'above', 'wheels'), True)	(('wheels', 'above', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'wheels'), True)	(('wheels', 'below', 'door'), True)
Constraint 4 (True antecedent)	('steering wheel', 'behind', 'windows')('windows', 'behind', 'wipers')	(('steering wheel', 'behind', 'wipers'), True)
Constraint 4 (True antecedent)	('wipers', 'in front of', 'windows')('windows', 'in front of', 'steering wheel')	(('wipers', 'in front of', 'steering wheel'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('breaklights', 'above', 'roof'), False)	(('roof', 'below', 'breaklights'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('headlights', 'behind', 'breaklights'), False)	(('breaklights', 'in front of', 'headlights'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('headlights', 'behind', 'indicators'), False)	(('indicators', 'in front of', 'headlights'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steering wheel', 'part of', 'horn'), False)	(('horn', 'has part', 'steering wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windows', 'behind', 'steering wheel'), False)	(('steering wheel', 'in front of', 'windows'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wipers', 'behind', 'windows'), False)	(('windows', 'in front of', 'wipers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'door'), False)	(('door', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('steering wheel', 'behind', 'wipers'), True)	(('wipers', 'behind', 'steering wheel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wipers', 'in front of', 'steering wheel'), True)	(('steering wheel', 'in front of', 'wipers'), False)
Round 3 ...
bus worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'indicators'), True)	(('indicators', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'indicators'), True)	(('indicators', 'below', 'roof'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'windows'), True)	(('windows', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'windows'), True)	(('windows', 'below', 'roof'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windows', 'above', 'wheels'), True)	(('wheels', 'above', 'windows'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windows', 'above', 'wheels'), True)	(('wheels', 'below', 'windows'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('brakelights', 'behind', 'windows'), True)	(('windows', 'behind', 'brakelights'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('brakelights', 'behind', 'windows'), True)	(('windows', 'in front of', 'brakelights'), True)
Constraint 1: x rln y <-> y rln x	(('windows', 'next to', 'door'), True)	(('door', 'next to', 'windows'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'next to', 'headlights'), True)	(('headlights', 'next to', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('steering wheel', 'next to', 'horn'), True)	(('horn', 'next to', 'steering wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('steering wheel', 'above', 'headlights'), True)	(('headlights', 'above', 'steering wheel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steering wheel', 'above', 'headlights'), True)	(('headlights', 'below', 'steering wheel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('indicators', 'above', 'wipers'), True)	(('wipers', 'above', 'indicators'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('indicators', 'above', 'wipers'), True)	(('wipers', 'below', 'indicators'), True)
Constraint 4 (True antecedent)	('roof', 'above', 'indicators')('indicators', 'above', 'wipers')	(('roof', 'above', 'wipers'), True)
Constraint 4 (True antecedent)	('roof', 'above', 'windows')('windows', 'above', 'wheels')	(('roof', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'windows')('windows', 'below', 'roof')	(('wheels', 'below', 'roof'), True)
Constraint 4 (True antecedent)	('wipers', 'below', 'indicators')('indicators', 'below', 'roof')	(('wipers', 'below', 'roof'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('indicators', 'above', 'roof'), False)	(('roof', 'below', 'indicators'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windows', 'above', 'roof'), False)	(('roof', 'below', 'windows'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'windows'), False)	(('windows', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windows', 'behind', 'brakelights'), False)	(('brakelights', 'in front of', 'windows'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('headlights', 'above', 'steering wheel'), False)	(('steering wheel', 'below', 'headlights'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wipers', 'above', 'indicators'), False)	(('indicators', 'below', 'wipers'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'wipers'), True)	(('wipers', 'above', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'wheels'), True)	(('wheels', 'above', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'roof'), True)	(('roof', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wipers', 'below', 'roof'), True)	(('roof', 'below', 'wipers'), False)
Round 3 ...
butterfly worker_110...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('antennae', 'above', 'head'), True)	(('head', 'above', 'antennae'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('antennae', 'above', 'head'), True)	(('head', 'below', 'antennae'), True)
Constraint 1: x rln y <-> y rln x	(('antennae', 'connects', 'head'), True)	(('head', 'connects', 'antennae'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'thorax'), True)	(('thorax', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'thorax'), True)	(('thorax', 'below', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'thorax'), True)	(('thorax', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('thorax', 'above', 'abdomen'), True)	(('abdomen', 'above', 'thorax'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thorax', 'above', 'abdomen'), True)	(('abdomen', 'below', 'thorax'), True)
Constraint 1: x rln y <-> y rln x	(('thorax', 'connects', 'abdomen'), True)	(('abdomen', 'connects', 'thorax'), True)
Constraint 1: x rln y <-> y rln x	(('thorax', 'next to', 'wings'), True)	(('wings', 'next to', 'thorax'), True)
Constraint 1: x rln y <-> y rln x	(('abdomen', 'next to', 'wings'), True)	(('wings', 'next to', 'abdomen'), True)
Constraint 1: x rln y <-> y rln x	(('wings', 'connects', 'thorax'), True)	(('thorax', 'connects', 'wings'), True)
Constraint 4 (True antecedent)	('antennae', 'above', 'head')('head', 'above', 'thorax')	(('antennae', 'above', 'thorax'), True)
Constraint 4 (True antecedent)	('head', 'above', 'thorax')('thorax', 'above', 'abdomen')	(('head', 'above', 'abdomen'), True)
Constraint 4 (True antecedent)	('thorax', 'below', 'head')('head', 'below', 'antennae')	(('thorax', 'below', 'antennae'), True)
Constraint 4 (True antecedent)	('abdomen', 'below', 'thorax')('thorax', 'below', 'head')	(('abdomen', 'below', 'head'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'antennae'), False)	(('antennae', 'below', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thorax', 'above', 'head'), False)	(('head', 'below', 'thorax'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('abdomen', 'above', 'thorax'), False)	(('thorax', 'below', 'abdomen'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('antennae', 'above', 'thorax'), True)	(('thorax', 'above', 'antennae'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'abdomen'), True)	(('abdomen', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('thorax', 'below', 'antennae'), True)	(('antennae', 'below', 'thorax'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('abdomen', 'below', 'head'), True)	(('head', 'below', 'abdomen'), False)
Constraint 4 (True antecedent)	('antennae', 'above', 'head')('head', 'above', 'abdomen')	(('antennae', 'above', 'abdomen'), True)
Constraint 4 (True antecedent)	('abdomen', 'below', 'thorax')('thorax', 'below', 'antennae')	(('abdomen', 'below', 'antennae'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('antennae', 'above', 'abdomen'), True)	(('abdomen', 'above', 'antennae'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('abdomen', 'below', 'antennae'), True)	(('antennae', 'below', 'abdomen'), False)
Round 4 ...
butterfly worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('thorax', 'connects', 'head'), True)	(('head', 'connects', 'thorax'), True)
Constraint 1: x rln y <-> y rln x	(('thorax', 'connects', 'abdomen'), True)	(('abdomen', 'connects', 'thorax'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('thorax', 'behind', 'head'), True)	(('head', 'behind', 'thorax'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thorax', 'behind', 'head'), True)	(('head', 'in front of', 'thorax'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('abdomen', 'behind', 'thorax'), True)	(('thorax', 'behind', 'abdomen'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('abdomen', 'behind', 'thorax'), True)	(('thorax', 'in front of', 'abdomen'), True)
Constraint 1: x rln y <-> y rln x	(('abdomen', 'connects', 'head'), True)	(('head', 'connects', 'abdomen'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'antenna'), True)	(('antenna', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('antenna', 'above', 'head'), True)	(('head', 'above', 'antenna'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('antenna', 'above', 'head'), True)	(('head', 'below', 'antenna'), True)
Constraint 4 (True antecedent)	('abdomen', 'behind', 'thorax')('thorax', 'behind', 'head')	(('abdomen', 'behind', 'head'), True)
Constraint 4 (True antecedent)	('head', 'in front of', 'thorax')('thorax', 'in front of', 'abdomen')	(('head', 'in front of', 'abdomen'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'behind', 'thorax'), False)	(('thorax', 'in front of', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thorax', 'behind', 'abdomen'), False)	(('abdomen', 'in front of', 'thorax'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'antenna'), False)	(('antenna', 'below', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('abdomen', 'behind', 'head'), True)	(('head', 'behind', 'abdomen'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'in front of', 'abdomen'), True)	(('abdomen', 'in front of', 'head'), False)
Round 3 ...
butterfly worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('antenna', 'above', 'head'), True)	(('head', 'above', 'antenna'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('antenna', 'above', 'head'), True)	(('head', 'below', 'antenna'), True)
Constraint 1: x rln y <-> y rln x	(('antenna', 'connects', 'head'), True)	(('head', 'connects', 'antenna'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'thorax'), True)	(('thorax', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'thorax'), True)	(('thorax', 'below', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'thorax'), True)	(('thorax', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('thorax', 'above', 'abdomen'), True)	(('abdomen', 'above', 'thorax'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thorax', 'above', 'abdomen'), True)	(('abdomen', 'below', 'thorax'), True)
Constraint 1: x rln y <-> y rln x	(('thorax', 'connects', 'abdomen'), True)	(('abdomen', 'connects', 'thorax'), True)
Constraint 1: x rln y <-> y rln x	(('abdomen', 'connects', 'wings'), True)	(('wings', 'connects', 'abdomen'), True)
Constraint 1: x rln y <-> y rln x	(('wings', 'connects', 'thorax'), True)	(('thorax', 'connects', 'wings'), True)
Constraint 4 (True antecedent)	('antenna', 'above', 'head')('head', 'above', 'thorax')	(('antenna', 'above', 'thorax'), True)
Constraint 4 (True antecedent)	('head', 'above', 'thorax')('thorax', 'above', 'abdomen')	(('head', 'above', 'abdomen'), True)
Constraint 4 (True antecedent)	('thorax', 'below', 'head')('head', 'below', 'antenna')	(('thorax', 'below', 'antenna'), True)
Constraint 4 (True antecedent)	('abdomen', 'below', 'thorax')('thorax', 'below', 'head')	(('abdomen', 'below', 'head'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'antenna'), False)	(('antenna', 'below', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('thorax', 'above', 'head'), False)	(('head', 'below', 'thorax'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('abdomen', 'above', 'thorax'), False)	(('thorax', 'below', 'abdomen'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('antenna', 'above', 'thorax'), True)	(('thorax', 'above', 'antenna'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'abdomen'), True)	(('abdomen', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('thorax', 'below', 'antenna'), True)	(('antenna', 'below', 'thorax'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('abdomen', 'below', 'head'), True)	(('head', 'below', 'abdomen'), False)
Constraint 4 (True antecedent)	('antenna', 'above', 'head')('head', 'above', 'abdomen')	(('antenna', 'above', 'abdomen'), True)
Constraint 4 (True antecedent)	('abdomen', 'below', 'thorax')('thorax', 'below', 'antenna')	(('abdomen', 'below', 'antenna'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('antenna', 'above', 'abdomen'), True)	(('abdomen', 'above', 'antenna'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('abdomen', 'below', 'antenna'), True)	(('antenna', 'below', 'abdomen'), False)
Round 4 ...
cable car worker_111...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('cable car grip', 'above', 'cable'), True)	(('cable', 'above', 'cable car grip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car grip', 'above', 'cable'), True)	(('cable', 'below', 'cable car grip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cable car grip', 'above', 'cabin'), True)	(('cabin', 'above', 'cable car grip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car grip', 'above', 'cabin'), True)	(('cabin', 'below', 'cable car grip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin windows', 'part of', 'cabin'), True)	(('cabin', 'part of', 'cabin windows'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin windows', 'part of', 'cabin'), True)	(('cabin', 'has part', 'cabin windows'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin seats', 'part of', 'cabin'), True)	(('cabin', 'part of', 'cabin seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin seats', 'part of', 'cabin'), True)	(('cabin', 'has part', 'cabin seats'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin doors', 'part of', 'cabin'), True)	(('cabin', 'part of', 'cabin doors'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin doors', 'part of', 'cabin'), True)	(('cabin', 'has part', 'cabin doors'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cable', 'above', 'cable car grip'), False)	(('cable car grip', 'below', 'cable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'above', 'cable car grip'), False)	(('cable car grip', 'below', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'part of', 'cabin windows'), False)	(('cabin windows', 'has part', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'part of', 'cabin seats'), False)	(('cabin seats', 'has part', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'part of', 'cabin doors'), False)	(('cabin doors', 'has part', 'cabin'), False)
Round 3 ...
cable car worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('cable', 'above', 'cable car grip'), True)	(('cable car grip', 'above', 'cable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable', 'above', 'cable car grip'), True)	(('cable car grip', 'below', 'cable'), True)
Constraint 1: x rln y <-> y rln x	(('cable', 'connects', 'cable car grip'), True)	(('cable car grip', 'connects', 'cable'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cable car grip', 'above', 'cabin'), True)	(('cabin', 'above', 'cable car grip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car grip', 'above', 'cabin'), True)	(('cabin', 'below', 'cable car grip'), True)
Constraint 1: x rln y <-> y rln x	(('cable car grip', 'connects', 'cabin'), True)	(('cabin', 'connects', 'cable car grip'), True)
Constraint 1: x rln y <-> y rln x	(('cabin', 'connects', 'cabin door'), True)	(('cabin door', 'connects', 'cabin'), True)
Constraint 1: x rln y <-> y rln x	(('cabin', 'connects', 'cabin window'), True)	(('cabin window', 'connects', 'cabin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin seats', 'inside', 'cabin'), True)	(('cabin', 'inside', 'cabin seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin seats', 'inside', 'cabin'), True)	(('cabin', 'contains', 'cabin seats'), True)
Constraint 1: x rln y <-> y rln x	(('cabin seats', 'next to', 'cabin windows'), True)	(('cabin windows', 'next to', 'cabin seats'), True)
Constraint 1: x rln y <-> y rln x	(('cabin seats', 'next to', 'cabin door'), True)	(('cabin door', 'next to', 'cabin seats'), True)
Constraint 1: x rln y <-> y rln x	(('cabin door', 'next to', 'cabin window'), True)	(('cabin window', 'next to', 'cabin door'), True)
Constraint 4 (True antecedent)	('cable', 'above', 'cable car grip')('cable car grip', 'above', 'cabin')	(('cable', 'above', 'cabin'), True)
Constraint 4 (True antecedent)	('cabin', 'below', 'cable car grip')('cable car grip', 'below', 'cable')	(('cabin', 'below', 'cable'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car grip', 'above', 'cable'), False)	(('cable', 'below', 'cable car grip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'above', 'cable car grip'), False)	(('cable car grip', 'below', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'inside', 'cabin seats'), False)	(('cabin seats', 'contains', 'cabin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cable', 'above', 'cabin'), True)	(('cabin', 'above', 'cable'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'below', 'cable'), True)	(('cable', 'below', 'cabin'), False)
Round 3 ...
cable car worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('cable', 'connects', 'cable car grip'), True)	(('cable car grip', 'connects', 'cable'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cable', 'above', 'cable car'), True)	(('cable car', 'above', 'cable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable', 'above', 'cable car'), True)	(('cable car', 'below', 'cable'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cable car grip', 'above', 'cable car'), True)	(('cable car', 'above', 'cable car grip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car grip', 'above', 'cable car'), True)	(('cable car', 'below', 'cable car grip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin door', 'part of', 'cable car'), True)	(('cable car', 'part of', 'cabin door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin door', 'part of', 'cable car'), True)	(('cable car', 'has part', 'cabin door'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin windows', 'part of', 'cable car'), True)	(('cable car', 'part of', 'cabin windows'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin windows', 'part of', 'cable car'), True)	(('cable car', 'has part', 'cabin windows'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin seats', 'inside', 'cable car'), True)	(('cable car', 'inside', 'cabin seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin seats', 'inside', 'cable car'), True)	(('cable car', 'contains', 'cabin seats'), True)
Constraint 1: x rln y <-> y rln x	(('cabin windows', 'next to', 'cabin door'), True)	(('cabin door', 'next to', 'cabin windows'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cable car', 'requires', 'cable'), True)	(('cable', 'requires', 'cable car'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car', 'requires', 'cable'), True)	(('cable', 'required by', 'cable car'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car', 'above', 'cable'), False)	(('cable', 'below', 'cable car'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car', 'above', 'cable car grip'), False)	(('cable car grip', 'below', 'cable car'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car', 'part of', 'cabin door'), False)	(('cabin door', 'has part', 'cable car'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car', 'part of', 'cabin windows'), False)	(('cabin windows', 'has part', 'cable car'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable car', 'inside', 'cabin seats'), False)	(('cabin seats', 'contains', 'cable car'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cable', 'requires', 'cable car'), False)	(('cable car', 'required by', 'cable'), False)
Round 3 ...
calculator worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('back cover', 'behind', 'processor chip'), True)	(('processor chip', 'behind', 'back cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back cover', 'behind', 'processor chip'), True)	(('processor chip', 'in front of', 'back cover'), True)
Constraint 1: x rln y <-> y rln x	(('button battery', 'connects', 'processor chip'), True)	(('processor chip', 'connects', 'button battery'), True)
Constraint 1: x rln y <-> y rln x	(('processor chip', 'connects', 'keyboard sensor'), True)	(('keyboard sensor', 'connects', 'processor chip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('processor chip', 'behind', 'keyboard sensor'), True)	(('keyboard sensor', 'behind', 'processor chip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('processor chip', 'behind', 'keyboard sensor'), True)	(('keyboard sensor', 'in front of', 'processor chip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('display', 'above', 'keyboard sensor'), True)	(('keyboard sensor', 'above', 'display'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('display', 'above', 'keyboard sensor'), True)	(('keyboard sensor', 'below', 'display'), True)
Constraint 1: x rln y <-> y rln x	(('display', 'connects', 'keyboard sensor'), True)	(('keyboard sensor', 'connects', 'display'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard sensors', 'behind', 'rubber keyboard'), True)	(('rubber keyboard', 'behind', 'keyboard sensors'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard sensors', 'behind', 'rubber keyboard'), True)	(('rubber keyboard', 'in front of', 'keyboard sensors'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rubber keyboard', 'behind', 'front cover'), True)	(('front cover', 'behind', 'rubber keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rubber keyboard', 'behind', 'front cover'), True)	(('front cover', 'in front of', 'rubber keyboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('display', 'behind', 'front cover'), True)	(('front cover', 'behind', 'display'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('display', 'behind', 'front cover'), True)	(('front cover', 'in front of', 'display'), True)
Constraint 4 (True antecedent)	('back cover', 'behind', 'processor chip')('processor chip', 'behind', 'keyboard sensor')	(('back cover', 'behind', 'keyboard sensor'), True)
Constraint 4 (True antecedent)	('keyboard sensors', 'behind', 'rubber keyboard')('rubber keyboard', 'behind', 'front cover')	(('keyboard sensors', 'behind', 'front cover'), True)
Constraint 4 (True antecedent)	('keyboard sensor', 'in front of', 'processor chip')('processor chip', 'in front of', 'back cover')	(('keyboard sensor', 'in front of', 'back cover'), True)
Constraint 4 (True antecedent)	('front cover', 'in front of', 'rubber keyboard')('rubber keyboard', 'in front of', 'keyboard sensors')	(('front cover', 'in front of', 'keyboard sensors'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('processor chip', 'behind', 'back cover'), False)	(('back cover', 'in front of', 'processor chip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard sensor', 'behind', 'processor chip'), False)	(('processor chip', 'in front of', 'keyboard sensor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard sensor', 'above', 'display'), False)	(('display', 'below', 'keyboard sensor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rubber keyboard', 'behind', 'keyboard sensors'), False)	(('keyboard sensors', 'in front of', 'rubber keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front cover', 'behind', 'rubber keyboard'), False)	(('rubber keyboard', 'in front of', 'front cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front cover', 'behind', 'display'), False)	(('display', 'in front of', 'front cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('back cover', 'behind', 'keyboard sensor'), True)	(('keyboard sensor', 'behind', 'back cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard sensors', 'behind', 'front cover'), True)	(('front cover', 'behind', 'keyboard sensors'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard sensor', 'in front of', 'back cover'), True)	(('back cover', 'in front of', 'keyboard sensor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front cover', 'in front of', 'keyboard sensors'), True)	(('keyboard sensors', 'in front of', 'front cover'), False)
Round 3 ...
calculator worker_106...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('rubber keyboard', 'behind', 'front cover'), True)	(('front cover', 'behind', 'rubber keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rubber keyboard', 'behind', 'front cover'), True)	(('front cover', 'in front of', 'rubber keyboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rubber keyboard', 'behind', 'keyboard sensor'), True)	(('keyboard sensor', 'behind', 'rubber keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rubber keyboard', 'behind', 'keyboard sensor'), True)	(('keyboard sensor', 'in front of', 'rubber keyboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('processor chip', 'behind', 'keyboard sensor'), True)	(('keyboard sensor', 'behind', 'processor chip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('processor chip', 'behind', 'keyboard sensor'), True)	(('keyboard sensor', 'in front of', 'processor chip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard sensors', 'requires', 'display'), True)	(('display', 'requires', 'keyboard sensors'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard sensors', 'requires', 'display'), True)	(('display', 'required by', 'keyboard sensors'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back cover', 'behind', 'processor chip'), True)	(('processor chip', 'behind', 'back cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back cover', 'behind', 'processor chip'), True)	(('processor chip', 'in front of', 'back cover'), True)
Constraint 4 (True antecedent)	('back cover', 'behind', 'processor chip')('processor chip', 'behind', 'keyboard sensor')	(('back cover', 'behind', 'keyboard sensor'), True)
Constraint 4 (True antecedent)	('keyboard sensor', 'in front of', 'processor chip')('processor chip', 'in front of', 'back cover')	(('keyboard sensor', 'in front of', 'back cover'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('front cover', 'behind', 'rubber keyboard'), False)	(('rubber keyboard', 'in front of', 'front cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard sensor', 'behind', 'rubber keyboard'), False)	(('rubber keyboard', 'in front of', 'keyboard sensor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard sensor', 'behind', 'processor chip'), False)	(('processor chip', 'in front of', 'keyboard sensor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('display', 'requires', 'keyboard sensors'), False)	(('keyboard sensors', 'required by', 'display'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('processor chip', 'behind', 'back cover'), False)	(('back cover', 'in front of', 'processor chip'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('back cover', 'behind', 'keyboard sensor'), True)	(('keyboard sensor', 'behind', 'back cover'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard sensor', 'in front of', 'back cover'), True)	(('back cover', 'in front of', 'keyboard sensor'), False)
Round 3 ...
calculator worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('back cover', 'behind', 'front cover'), True)	(('front cover', 'behind', 'back cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back cover', 'behind', 'front cover'), True)	(('front cover', 'in front of', 'back cover'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('display', 'requires', 'button battery'), True)	(('button battery', 'requires', 'display'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('display', 'requires', 'button battery'), True)	(('button battery', 'required by', 'display'), True)
Constraint 1: x rln y <-> y rln x	(('display', 'connects', 'button battery'), True)	(('button battery', 'connects', 'display'), True)
Constraint 1: x rln y <-> y rln x	(('back cover', 'connects', 'front cover'), True)	(('front cover', 'connects', 'back cover'), True)
Constraint 1: x rln y <-> y rln x	(('keyboard sensors', 'connects', 'display'), True)	(('display', 'connects', 'keyboard sensors'), True)
Constraint 1: x rln y <-> y rln x	(('processor chip', 'connects', 'keyboard sensor'), True)	(('keyboard sensor', 'connects', 'processor chip'), True)
Constraint 1: x rln y <-> y rln x	(('rubber keyboard', 'connects', 'keyboard sensor'), True)	(('keyboard sensor', 'connects', 'rubber keyboard'), True)
Constraint 1: x rln y <-> y rln x	(('keyboard sensors', 'connects', 'processor chip'), True)	(('processor chip', 'connects', 'keyboard sensors'), True)
Constraint 1: x rln y <-> y rln x	(('button battery', 'connects', 'processor chip'), True)	(('processor chip', 'connects', 'button battery'), True)
Constraint 1: x rln y <-> y rln x	(('button battery', 'connects', 'rubber keyboard'), True)	(('rubber keyboard', 'connects', 'button battery'), True)
Constraint 1: x rln y <-> y rln x	(('button battery', 'connects', 'keyboard sensor'), True)	(('keyboard sensor', 'connects', 'button battery'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('processor chip', 'requires', 'button battery'), True)	(('button battery', 'requires', 'processor chip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('processor chip', 'requires', 'button battery'), True)	(('button battery', 'required by', 'processor chip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rubber keyboard', 'requires', 'button battery'), True)	(('button battery', 'requires', 'rubber keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rubber keyboard', 'requires', 'button battery'), True)	(('button battery', 'required by', 'rubber keyboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard sensor', 'requires', 'button battery'), True)	(('button battery', 'requires', 'keyboard sensor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard sensor', 'requires', 'button battery'), True)	(('button battery', 'required by', 'keyboard sensor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard sensor', 'requires', 'processor chip'), True)	(('processor chip', 'requires', 'keyboard sensor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard sensor', 'requires', 'processor chip'), True)	(('processor chip', 'required by', 'keyboard sensor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('display', 'requires', 'processor chip'), True)	(('processor chip', 'requires', 'display'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('display', 'requires', 'processor chip'), True)	(('processor chip', 'required by', 'display'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard sensor', 'requires', 'rubber keyboard'), True)	(('rubber keyboard', 'requires', 'keyboard sensor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard sensor', 'requires', 'rubber keyboard'), True)	(('rubber keyboard', 'required by', 'keyboard sensor'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('front cover', 'behind', 'back cover'), False)	(('back cover', 'in front of', 'front cover'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('button battery', 'requires', 'display'), False)	(('display', 'required by', 'button battery'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('button battery', 'requires', 'processor chip'), False)	(('processor chip', 'required by', 'button battery'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('button battery', 'requires', 'rubber keyboard'), False)	(('rubber keyboard', 'required by', 'button battery'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('button battery', 'requires', 'keyboard sensor'), False)	(('keyboard sensor', 'required by', 'button battery'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('processor chip', 'requires', 'keyboard sensor'), False)	(('keyboard sensor', 'required by', 'processor chip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('processor chip', 'requires', 'display'), False)	(('display', 'required by', 'processor chip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rubber keyboard', 'requires', 'keyboard sensor'), False)	(('keyboard sensor', 'required by', 'rubber keyboard'), False)
Round 3 ...
cat worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('ear', 'next to', 'eye'), True)	(('eye', 'next to', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'nose'), True)	(('nose', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'nose'), True)	(('nose', 'below', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'mouth'), True)	(('mouth', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'mouth'), True)	(('mouth', 'below', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'connects', 'head'), True)	(('head', 'connects', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'eye'), True)	(('eye', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'eye'), True)	(('eye', 'surrounded by', 'fur'), True)
Constraint 1: x rln y <-> y rln x	(('eye', 'connects', 'head'), True)	(('head', 'connects', 'eye'), True)
Constraint 1: x rln y <-> y rln x	(('nose', 'connects', 'head'), True)	(('head', 'connects', 'nose'), True)
Constraint 1: x rln y <-> y rln x	(('mouth', 'connects', 'head'), True)	(('head', 'connects', 'mouth'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'head'), True)	(('head', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'head'), True)	(('head', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'body'), True)	(('body', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'body'), True)	(('body', 'below', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'leg'), True)	(('leg', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'leg'), True)	(('leg', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'foot'), True)	(('foot', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'foot'), True)	(('foot', 'surrounded by', 'fur'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'foot'), True)	(('foot', 'connects', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'tail'), True)	(('tail', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'tail'), True)	(('tail', 'surrounded by', 'fur'), True)
Constraint 1: x rln y <-> y rln x	(('tail', 'connects', 'body'), True)	(('body', 'connects', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'body'), True)	(('body', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'body'), True)	(('body', 'surrounded by', 'fur'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'ear'), False)	(('ear', 'below', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'ear'), False)	(('ear', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'head'), False)	(('head', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'foot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'body'), False)
Round 3 ...
cat worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'head'), True)	(('head', 'above', 'ears'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ears', 'above', 'head'), True)	(('head', 'below', 'ears'), True)
Constraint 1: x rln y <-> y rln x	(('ears', 'connects', 'head'), True)	(('head', 'connects', 'ears'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'eyes'), True)	(('eyes', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'eyes'), True)	(('eyes', 'below', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'above', 'nose'), True)	(('nose', 'above', 'eyes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyes', 'above', 'nose'), True)	(('nose', 'below', 'eyes'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'above', 'tail'), True)	(('tail', 'above', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'tail'), True)	(('tail', 'below', 'mouth'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'above', 'leg'), True)	(('leg', 'above', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'leg'), True)	(('leg', 'below', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'foot'), True)	(('foot', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'foot'), True)	(('foot', 'below', 'leg'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'foot'), True)	(('foot', 'connects', 'leg'), True)
Constraint 4 (True antecedent)	('ears', 'above', 'head')('head', 'above', 'eyes')	(('ears', 'above', 'eyes'), True)
Constraint 4 (True antecedent)	('head', 'above', 'eyes')('eyes', 'above', 'nose')	(('head', 'above', 'nose'), True)
Constraint 4 (True antecedent)	('eyes', 'above', 'nose')('nose', 'above', 'mouth')	(('eyes', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('nose', 'above', 'mouth')('mouth', 'above', 'tail')	(('nose', 'above', 'tail'), True)
Constraint 4 (True antecedent)	('mouth', 'above', 'tail')('tail', 'above', 'leg')	(('mouth', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('tail', 'above', 'leg')('leg', 'above', 'foot')	(('tail', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('eyes', 'below', 'head')('head', 'below', 'ears')	(('eyes', 'below', 'ears'), True)
Constraint 4 (True antecedent)	('nose', 'below', 'eyes')('eyes', 'below', 'head')	(('nose', 'below', 'head'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'eyes')	(('mouth', 'below', 'eyes'), True)
Constraint 4 (True antecedent)	('tail', 'below', 'mouth')('mouth', 'below', 'nose')	(('tail', 'below', 'nose'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'tail')('tail', 'below', 'mouth')	(('leg', 'below', 'mouth'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'leg')('leg', 'below', 'tail')	(('foot', 'below', 'tail'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'ears'), False)	(('ears', 'below', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyes', 'above', 'head'), False)	(('head', 'below', 'eyes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'eyes'), False)	(('eyes', 'below', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'mouth'), False)	(('mouth', 'below', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'tail'), False)	(('tail', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'above', 'leg'), False)	(('leg', 'below', 'foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'eyes'), True)	(('eyes', 'above', 'ears'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'nose'), True)	(('nose', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'above', 'mouth'), True)	(('mouth', 'above', 'eyes'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'tail'), True)	(('tail', 'above', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'above', 'leg'), True)	(('leg', 'above', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'above', 'foot'), True)	(('foot', 'above', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'below', 'ears'), True)	(('ears', 'below', 'eyes'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'below', 'head'), True)	(('head', 'below', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'eyes'), True)	(('eyes', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'below', 'nose'), True)	(('nose', 'below', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'mouth'), True)	(('mouth', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'tail'), True)	(('tail', 'below', 'foot'), False)
Constraint 4 (True antecedent)	('ears', 'above', 'head')('head', 'above', 'nose')	(('ears', 'above', 'nose'), True)
Constraint 4 (True antecedent)	('ears', 'above', 'eyes')('eyes', 'above', 'mouth')	(('ears', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('head', 'above', 'eyes')('eyes', 'above', 'mouth')	(('head', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('head', 'above', 'nose')('nose', 'above', 'tail')	(('head', 'above', 'tail'), True)
Constraint 4 (True antecedent)	('eyes', 'above', 'nose')('nose', 'above', 'tail')	(('eyes', 'above', 'tail'), True)
Constraint 4 (True antecedent)	('eyes', 'above', 'mouth')('mouth', 'above', 'leg')	(('eyes', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('nose', 'above', 'mouth')('mouth', 'above', 'leg')	(('nose', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('nose', 'above', 'tail')('tail', 'above', 'foot')	(('nose', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('mouth', 'above', 'tail')('tail', 'above', 'foot')	(('mouth', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('nose', 'below', 'eyes')('eyes', 'below', 'ears')	(('nose', 'below', 'ears'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'head')	(('mouth', 'below', 'head'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'eyes')('eyes', 'below', 'ears')	(('mouth', 'below', 'ears'), True)
Constraint 4 (True antecedent)	('tail', 'below', 'mouth')('mouth', 'below', 'eyes')	(('tail', 'below', 'eyes'), True)
Constraint 4 (True antecedent)	('tail', 'below', 'nose')('nose', 'below', 'head')	(('tail', 'below', 'head'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'tail')('tail', 'below', 'nose')	(('leg', 'below', 'nose'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'mouth')('mouth', 'below', 'eyes')	(('leg', 'below', 'eyes'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'leg')('leg', 'below', 'mouth')	(('foot', 'below', 'mouth'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'tail')('tail', 'below', 'nose')	(('foot', 'below', 'nose'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'nose'), True)	(('nose', 'above', 'ears'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'mouth'), True)	(('mouth', 'above', 'ears'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'mouth'), True)	(('mouth', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'tail'), True)	(('tail', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'above', 'tail'), True)	(('tail', 'above', 'eyes'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'above', 'leg'), True)	(('leg', 'above', 'eyes'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'leg'), True)	(('leg', 'above', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'foot'), True)	(('foot', 'above', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'above', 'foot'), True)	(('foot', 'above', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'below', 'ears'), True)	(('ears', 'below', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'head'), True)	(('head', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'ears'), True)	(('ears', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'below', 'eyes'), True)	(('eyes', 'below', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'below', 'head'), True)	(('head', 'below', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'nose'), True)	(('nose', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'eyes'), True)	(('eyes', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'mouth'), True)	(('mouth', 'below', 'foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'nose'), True)	(('nose', 'below', 'foot'), False)
Constraint 4 (True antecedent)	('ears', 'above', 'head')('head', 'above', 'tail')	(('ears', 'above', 'tail'), True)
Constraint 4 (True antecedent)	('ears', 'above', 'eyes')('eyes', 'above', 'leg')	(('ears', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('ears', 'above', 'nose')('nose', 'above', 'foot')	(('ears', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('head', 'above', 'eyes')('eyes', 'above', 'leg')	(('head', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('head', 'above', 'nose')('nose', 'above', 'foot')	(('head', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('eyes', 'above', 'nose')('nose', 'above', 'foot')	(('eyes', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('tail', 'below', 'mouth')('mouth', 'below', 'ears')	(('tail', 'below', 'ears'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'tail')('tail', 'below', 'head')	(('leg', 'below', 'head'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'mouth')('mouth', 'below', 'ears')	(('leg', 'below', 'ears'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'leg')('leg', 'below', 'eyes')	(('foot', 'below', 'eyes'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'tail')('tail', 'below', 'head')	(('foot', 'below', 'head'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'mouth')('mouth', 'below', 'ears')	(('foot', 'below', 'ears'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'tail'), True)	(('tail', 'above', 'ears'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'leg'), True)	(('leg', 'above', 'ears'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'foot'), True)	(('foot', 'above', 'ears'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'leg'), True)	(('leg', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'foot'), True)	(('foot', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'above', 'foot'), True)	(('foot', 'above', 'eyes'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'below', 'ears'), True)	(('ears', 'below', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'head'), True)	(('head', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'ears'), True)	(('ears', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'eyes'), True)	(('eyes', 'below', 'foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'head'), True)	(('head', 'below', 'foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'ears'), True)	(('ears', 'below', 'foot'), False)
Round 5 ...
cat worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'ear'), True)	(('ear', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'ear'), True)	(('ear', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'head'), True)	(('head', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'head'), True)	(('head', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'body'), True)	(('body', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'body'), True)	(('body', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'leg'), True)	(('leg', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'leg'), True)	(('leg', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'foot'), True)	(('foot', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'foot'), True)	(('foot', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'tail'), True)	(('tail', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'tail'), True)	(('tail', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'head'), True)	(('head', 'above', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'head'), True)	(('head', 'below', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'connects', 'head'), True)	(('head', 'connects', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'body'), True)	(('body', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'eyes'), True)	(('eyes', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'mouth'), True)	(('mouth', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'nose'), True)	(('nose', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'nose'), True)	(('nose', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'nose'), True)	(('nose', 'below', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'body'), True)	(('body', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'body'), True)	(('body', 'below', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'head'), True)	(('head', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'head'), True)	(('head', 'in front of', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'foot'), True)	(('foot', 'connects', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'foot'), True)	(('foot', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'foot'), True)	(('foot', 'below', 'leg'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'head')('head', 'above', 'body')	(('ear', 'above', 'body'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'nose')('nose', 'above', 'mouth')	(('eye', 'above', 'mouth'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'leg')	(('head', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('body', 'above', 'leg')('leg', 'above', 'foot')	(('body', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'body')('body', 'behind', 'head')	(('tail', 'behind', 'head'), True)
Constraint 4 (True antecedent)	('mouth', 'below', 'nose')('nose', 'below', 'eye')	(('mouth', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('body', 'below', 'head')('head', 'below', 'ear')	(('body', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('head', 'in front of', 'body')('body', 'in front of', 'tail')	(('head', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'head')	(('leg', 'below', 'head'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'leg')('leg', 'below', 'body')	(('foot', 'below', 'body'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'foot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'ear'), False)	(('ear', 'below', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'eye'), False)	(('eye', 'below', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'head'), False)	(('head', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'behind', 'body'), False)	(('body', 'in front of', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('foot', 'above', 'leg'), False)	(('leg', 'below', 'foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'body'), True)	(('body', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'mouth'), True)	(('mouth', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'leg'), True)	(('leg', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'foot'), True)	(('foot', 'above', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'head'), True)	(('head', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mouth', 'below', 'eye'), True)	(('eye', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'ear'), True)	(('ear', 'below', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'in front of', 'tail'), True)	(('tail', 'in front of', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'head'), True)	(('head', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'body'), True)	(('body', 'below', 'foot'), False)
Constraint 4 (True antecedent)	('ear', 'above', 'head')('head', 'above', 'leg')	(('ear', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('ear', 'above', 'body')('body', 'above', 'foot')	(('ear', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'foot')	(('head', 'above', 'foot'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'ear')	(('leg', 'below', 'ear'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'leg')('leg', 'below', 'head')	(('foot', 'below', 'head'), True)
Constraint 4 (True antecedent)	('foot', 'below', 'body')('body', 'below', 'ear')	(('foot', 'below', 'ear'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'leg'), True)	(('leg', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'above', 'foot'), True)	(('foot', 'above', 'ear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'foot'), True)	(('foot', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'ear'), True)	(('ear', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'head'), True)	(('head', 'below', 'foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('foot', 'below', 'ear'), True)	(('ear', 'below', 'foot'), False)
Round 4 ...
chair worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top rail', 'above', 'back'), True)	(('back', 'above', 'top rail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top rail', 'above', 'back'), True)	(('back', 'below', 'top rail'), True)
Constraint 1: x rln y <-> y rln x	(('stile', 'next to', 'back'), True)	(('back', 'next to', 'stile'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back', 'above', 'seat'), True)	(('seat', 'above', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'above', 'seat'), True)	(('seat', 'below', 'back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'legs'), True)	(('legs', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'legs'), True)	(('legs', 'below', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('apron', 'surrounds', 'seat'), True)	(('seat', 'surrounds', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'surrounds', 'seat'), True)	(('seat', 'surrounded by', 'apron'), True)
Constraint 4 (True antecedent)	('top rail', 'above', 'back')('back', 'above', 'seat')	(('top rail', 'above', 'seat'), True)
Constraint 4 (True antecedent)	('back', 'above', 'seat')('seat', 'above', 'legs')	(('back', 'above', 'legs'), True)
Constraint 4 (True antecedent)	('seat', 'below', 'back')('back', 'below', 'top rail')	(('seat', 'below', 'top rail'), True)
Constraint 4 (True antecedent)	('legs', 'below', 'seat')('seat', 'below', 'back')	(('legs', 'below', 'back'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'above', 'top rail'), False)	(('top rail', 'below', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'back'), False)	(('back', 'below', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'seat'), False)	(('seat', 'below', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'surrounds', 'apron'), False)	(('apron', 'surrounded by', 'seat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top rail', 'above', 'seat'), True)	(('seat', 'above', 'top rail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('back', 'above', 'legs'), True)	(('legs', 'above', 'back'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'below', 'top rail'), True)	(('top rail', 'below', 'seat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'below', 'back'), True)	(('back', 'below', 'legs'), False)
Constraint 4 (True antecedent)	('top rail', 'above', 'back')('back', 'above', 'legs')	(('top rail', 'above', 'legs'), True)
Constraint 4 (True antecedent)	('legs', 'below', 'seat')('seat', 'below', 'top rail')	(('legs', 'below', 'top rail'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top rail', 'above', 'legs'), True)	(('legs', 'above', 'top rail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'below', 'top rail'), True)	(('top rail', 'below', 'legs'), False)
Round 4 ...
chair worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('top rail', 'connects', 'back'), True)	(('back', 'connects', 'top rail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top rail', 'above', 'back'), True)	(('back', 'above', 'top rail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top rail', 'above', 'back'), True)	(('back', 'below', 'top rail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stile', 'part of', 'back'), True)	(('back', 'part of', 'stile'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stile', 'part of', 'back'), True)	(('back', 'has part', 'stile'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stile', 'above', 'seat'), True)	(('seat', 'above', 'stile'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stile', 'above', 'seat'), True)	(('seat', 'below', 'stile'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'apron'), True)	(('apron', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'apron'), True)	(('apron', 'below', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'connects', 'apron'), True)	(('apron', 'connects', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('apron', 'connects', 'legs'), True)	(('legs', 'connects', 'apron'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('apron', 'above', 'legs'), True)	(('legs', 'above', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'legs'), True)	(('legs', 'below', 'apron'), True)
Constraint 4 (True antecedent)	('stile', 'above', 'seat')('seat', 'above', 'apron')	(('stile', 'above', 'apron'), True)
Constraint 4 (True antecedent)	('seat', 'above', 'apron')('apron', 'above', 'legs')	(('seat', 'above', 'legs'), True)
Constraint 4 (True antecedent)	('apron', 'below', 'seat')('seat', 'below', 'stile')	(('apron', 'below', 'stile'), True)
Constraint 4 (True antecedent)	('legs', 'below', 'apron')('apron', 'below', 'seat')	(('legs', 'below', 'seat'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'above', 'top rail'), False)	(('top rail', 'below', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'part of', 'stile'), False)	(('stile', 'has part', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'stile'), False)	(('stile', 'below', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'seat'), False)	(('seat', 'below', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'apron'), False)	(('apron', 'below', 'legs'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stile', 'above', 'apron'), True)	(('apron', 'above', 'stile'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'legs'), True)	(('legs', 'above', 'seat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('apron', 'below', 'stile'), True)	(('stile', 'below', 'apron'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'below', 'seat'), True)	(('seat', 'below', 'legs'), False)
Constraint 4 (True antecedent)	('stile', 'above', 'seat')('seat', 'above', 'legs')	(('stile', 'above', 'legs'), True)
Constraint 4 (True antecedent)	('legs', 'below', 'apron')('apron', 'below', 'stile')	(('legs', 'below', 'stile'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('stile', 'above', 'legs'), True)	(('legs', 'above', 'stile'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'below', 'stile'), True)	(('stile', 'below', 'legs'), False)
Round 4 ...
chair worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('top rail', 'connects', 'stile'), True)	(('stile', 'connects', 'top rail'), True)
Constraint 1: x rln y <-> y rln x	(('stile', 'connects', 'cross rail'), True)	(('cross rail', 'connects', 'stile'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cross rail', 'part of', 'back'), True)	(('back', 'part of', 'cross rail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cross rail', 'part of', 'back'), True)	(('back', 'has part', 'cross rail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top rail', 'part of', 'back'), True)	(('back', 'part of', 'top rail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top rail', 'part of', 'back'), True)	(('back', 'has part', 'top rail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stile', 'part of', 'back'), True)	(('back', 'part of', 'stile'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stile', 'part of', 'back'), True)	(('back', 'has part', 'stile'), True)
Constraint 1: x rln y <-> y rln x	(('back', 'connects', 'seat'), True)	(('seat', 'connects', 'back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'legs'), True)	(('legs', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'legs'), True)	(('legs', 'below', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'connects', 'legs'), True)	(('legs', 'connects', 'seat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('seat', 'above', 'apron'), True)	(('apron', 'above', 'seat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('seat', 'above', 'apron'), True)	(('apron', 'below', 'seat'), True)
Constraint 1: x rln y <-> y rln x	(('seat', 'connects', 'apron'), True)	(('apron', 'connects', 'seat'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'part of', 'cross rail'), False)	(('cross rail', 'has part', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'part of', 'top rail'), False)	(('top rail', 'has part', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'part of', 'stile'), False)	(('stile', 'has part', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'seat'), False)	(('seat', 'below', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'seat'), False)	(('seat', 'below', 'apron'), False)
Round 3 ...
computer worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('monitor', 'requires', 'cpu'), True)	(('cpu', 'requires', 'monitor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('monitor', 'requires', 'cpu'), True)	(('cpu', 'required by', 'monitor'), True)
Constraint 1: x rln y <-> y rln x	(('monitor', 'connects', 'cpu'), True)	(('cpu', 'connects', 'monitor'), True)
Constraint 1: x rln y <-> y rln x	(('cpu', 'connects', 'mouse'), True)	(('mouse', 'connects', 'cpu'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mouse', 'requires', 'cpu'), True)	(('cpu', 'requires', 'mouse'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouse', 'requires', 'cpu'), True)	(('cpu', 'required by', 'mouse'), True)
Constraint 1: x rln y <-> y rln x	(('mouse', 'next to', 'keyboard'), True)	(('keyboard', 'next to', 'mouse'), True)
Constraint 1: x rln y <-> y rln x	(('keyboard', 'connects', 'cpu'), True)	(('cpu', 'connects', 'keyboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'requires', 'cpu'), True)	(('cpu', 'requires', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'requires', 'cpu'), True)	(('cpu', 'required by', 'keyboard'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cpu', 'requires', 'monitor'), False)	(('monitor', 'required by', 'cpu'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cpu', 'requires', 'mouse'), False)	(('mouse', 'required by', 'cpu'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cpu', 'requires', 'keyboard'), False)	(('keyboard', 'required by', 'cpu'), False)
Round 3 ...
computer worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('monitor', 'behind', 'mouse'), True)	(('mouse', 'behind', 'monitor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('monitor', 'behind', 'mouse'), True)	(('mouse', 'in front of', 'monitor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('monitor', 'behind', 'keyboard'), True)	(('keyboard', 'behind', 'monitor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('monitor', 'behind', 'keyboard'), True)	(('keyboard', 'in front of', 'monitor'), True)
Constraint 1: x rln y <-> y rln x	(('monitor', 'connects', 'cpu'), True)	(('cpu', 'connects', 'monitor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('monitor', 'requires', 'cpu'), True)	(('cpu', 'requires', 'monitor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('monitor', 'requires', 'cpu'), True)	(('cpu', 'required by', 'monitor'), True)
Constraint 1: x rln y <-> y rln x	(('cpu', 'connects', 'mouse'), True)	(('mouse', 'connects', 'cpu'), True)
Constraint 1: x rln y <-> y rln x	(('mouse', 'next to', 'keyboard'), True)	(('keyboard', 'next to', 'mouse'), True)
Constraint 1: x rln y <-> y rln x	(('cpu', 'connects', 'keyboard'), True)	(('keyboard', 'connects', 'cpu'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('mouse', 'behind', 'monitor'), False)	(('monitor', 'in front of', 'mouse'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'behind', 'monitor'), False)	(('monitor', 'in front of', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cpu', 'requires', 'monitor'), False)	(('monitor', 'required by', 'cpu'), False)
Round 3 ...
computer worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('keyboard', 'connects', 'cpu'), True)	(('cpu', 'connects', 'keyboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('monitor', 'behind', 'keyboard'), True)	(('keyboard', 'behind', 'monitor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('monitor', 'behind', 'keyboard'), True)	(('keyboard', 'in front of', 'monitor'), True)
Constraint 1: x rln y <-> y rln x	(('cpu', 'connects', 'mouse'), True)	(('mouse', 'connects', 'cpu'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('monitor', 'behind', 'mouse'), True)	(('mouse', 'behind', 'monitor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('monitor', 'behind', 'mouse'), True)	(('mouse', 'in front of', 'monitor'), True)
Constraint 1: x rln y <-> y rln x	(('cpu', 'connects', 'monitor'), True)	(('monitor', 'connects', 'cpu'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'behind', 'monitor'), False)	(('monitor', 'in front of', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouse', 'behind', 'monitor'), False)	(('monitor', 'in front of', 'mouse'), False)
Round 3 ...
duck worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('eye', 'connects', 'head'), True)	(('head', 'connects', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'behind', 'nostril'), True)	(('nostril', 'behind', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'nostril'), True)	(('nostril', 'in front of', 'eye'), True)
Constraint 1: x rln y <-> y rln x	(('nostril', 'connects', 'head'), True)	(('head', 'connects', 'nostril'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'bill'), True)	(('bill', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'neck'), True)	(('neck', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'neck'), True)	(('neck', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'neck'), True)	(('neck', 'below', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('neck', 'connects', 'body'), True)	(('body', 'connects', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'body'), True)	(('body', 'above', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'above', 'body'), True)	(('body', 'below', 'neck'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'wing'), True)	(('wing', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('wing', 'next to', 'body'), True)	(('body', 'next to', 'wing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'webbed foot'), True)	(('webbed foot', 'below', 'leg'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'webbed foot'), True)	(('webbed foot', 'connects', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'part of', 'bill'), True)	(('bill', 'part of', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'part of', 'bill'), True)	(('bill', 'has part', 'nostril'), True)
Constraint 4 (True antecedent)	('head', 'above', 'neck')('neck', 'above', 'body')	(('head', 'above', 'body'), True)
Constraint 4 (True antecedent)	('neck', 'above', 'body')('body', 'above', 'leg')	(('neck', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('body', 'above', 'leg')('leg', 'above', 'webbed foot')	(('body', 'above', 'webbed foot'), True)
Constraint 4 (True antecedent)	('body', 'below', 'neck')('neck', 'below', 'head')	(('body', 'below', 'head'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'neck')	(('leg', 'below', 'neck'), True)
Constraint 4 (True antecedent)	('webbed foot', 'below', 'leg')('leg', 'below', 'body')	(('webbed foot', 'below', 'body'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'behind', 'eye'), False)	(('eye', 'in front of', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'above', 'head'), False)	(('head', 'below', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'neck'), False)	(('neck', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('webbed foot', 'above', 'leg'), False)	(('leg', 'below', 'webbed foot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bill', 'part of', 'nostril'), False)	(('nostril', 'has part', 'bill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'body'), True)	(('body', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'leg'), True)	(('leg', 'above', 'neck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'head'), True)	(('head', 'below', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'neck'), True)	(('neck', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('webbed foot', 'below', 'body'), True)	(('body', 'below', 'webbed foot'), False)
Constraint 4 (True antecedent)	('head', 'above', 'neck')('neck', 'above', 'leg')	(('head', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('head', 'above', 'body')('body', 'above', 'webbed foot')	(('head', 'above', 'webbed foot'), True)
Constraint 4 (True antecedent)	('neck', 'above', 'body')('body', 'above', 'webbed foot')	(('neck', 'above', 'webbed foot'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'body')('body', 'below', 'head')	(('leg', 'below', 'head'), True)
Constraint 4 (True antecedent)	('webbed foot', 'below', 'leg')('leg', 'below', 'neck')	(('webbed foot', 'below', 'neck'), True)
Constraint 4 (True antecedent)	('webbed foot', 'below', 'body')('body', 'below', 'head')	(('webbed foot', 'below', 'head'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'leg'), True)	(('leg', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'neck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'head'), True)	(('head', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('webbed foot', 'below', 'neck'), True)	(('neck', 'below', 'webbed foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('webbed foot', 'below', 'head'), True)	(('head', 'below', 'webbed foot'), False)
Round 4 ...
duck worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'nostril'), True)	(('nostril', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'nostril'), True)	(('nostril', 'below', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'behind', 'nostril'), True)	(('nostril', 'behind', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'behind', 'nostril'), True)	(('nostril', 'in front of', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'part of', 'bill'), True)	(('bill', 'part of', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'part of', 'bill'), True)	(('bill', 'has part', 'nostril'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bill', 'above', 'neck'), True)	(('neck', 'above', 'bill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bill', 'above', 'neck'), True)	(('neck', 'below', 'bill'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'wing'), True)	(('wing', 'above', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'above', 'wing'), True)	(('wing', 'below', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'wing'), True)	(('wing', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'wing'), True)	(('wing', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wing', 'above', 'leg'), True)	(('leg', 'above', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'above', 'leg'), True)	(('leg', 'below', 'wing'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'webbed foot'), True)	(('webbed foot', 'connects', 'leg'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'webbed foot'), True)	(('webbed foot', 'below', 'leg'), True)
Constraint 4 (True antecedent)	('bill', 'above', 'neck')('neck', 'above', 'wing')	(('bill', 'above', 'wing'), True)
Constraint 4 (True antecedent)	('neck', 'above', 'wing')('wing', 'above', 'leg')	(('neck', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('wing', 'above', 'leg')('leg', 'above', 'webbed foot')	(('wing', 'above', 'webbed foot'), True)
Constraint 4 (True antecedent)	('wing', 'below', 'neck')('neck', 'below', 'bill')	(('wing', 'below', 'bill'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'wing')('wing', 'below', 'neck')	(('leg', 'below', 'neck'), True)
Constraint 4 (True antecedent)	('webbed foot', 'below', 'leg')('leg', 'below', 'wing')	(('webbed foot', 'below', 'wing'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'above', 'eye'), False)	(('eye', 'below', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'behind', 'eye'), False)	(('eye', 'in front of', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bill', 'part of', 'nostril'), False)	(('nostril', 'has part', 'bill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'above', 'bill'), False)	(('bill', 'below', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'above', 'neck'), False)	(('neck', 'below', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'behind', 'tail'), False)	(('tail', 'in front of', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'wing'), False)	(('wing', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('webbed foot', 'above', 'leg'), False)	(('leg', 'below', 'webbed foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bill', 'above', 'wing'), True)	(('wing', 'above', 'bill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'leg'), True)	(('leg', 'above', 'neck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wing', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'wing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wing', 'below', 'bill'), True)	(('bill', 'below', 'wing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'neck'), True)	(('neck', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('webbed foot', 'below', 'wing'), True)	(('wing', 'below', 'webbed foot'), False)
Constraint 4 (True antecedent)	('bill', 'above', 'neck')('neck', 'above', 'leg')	(('bill', 'above', 'leg'), True)
Constraint 4 (True antecedent)	('bill', 'above', 'wing')('wing', 'above', 'webbed foot')	(('bill', 'above', 'webbed foot'), True)
Constraint 4 (True antecedent)	('neck', 'above', 'wing')('wing', 'above', 'webbed foot')	(('neck', 'above', 'webbed foot'), True)
Constraint 4 (True antecedent)	('leg', 'below', 'wing')('wing', 'below', 'bill')	(('leg', 'below', 'bill'), True)
Constraint 4 (True antecedent)	('webbed foot', 'below', 'leg')('leg', 'below', 'neck')	(('webbed foot', 'below', 'neck'), True)
Constraint 4 (True antecedent)	('webbed foot', 'below', 'wing')('wing', 'below', 'bill')	(('webbed foot', 'below', 'bill'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('bill', 'above', 'leg'), True)	(('leg', 'above', 'bill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bill', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'bill'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'neck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'below', 'bill'), True)	(('bill', 'below', 'leg'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('webbed foot', 'below', 'neck'), True)	(('neck', 'below', 'webbed foot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('webbed foot', 'below', 'bill'), True)	(('bill', 'below', 'webbed foot'), False)
Round 4 ...
duck worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('bill', 'connects', 'nostril'), True)	(('nostril', 'connects', 'bill'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'part of', 'head'), True)	(('head', 'part of', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'part of', 'head'), True)	(('head', 'has part', 'nostril'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bill', 'part of', 'head'), True)	(('head', 'part of', 'bill'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bill', 'part of', 'head'), True)	(('head', 'has part', 'bill'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'part of', 'head'), True)	(('head', 'part of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'part of', 'head'), True)	(('head', 'has part', 'eye'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'neck'), True)	(('neck', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('neck', 'connects', 'body'), True)	(('body', 'connects', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('wing', 'part of', 'body'), True)	(('body', 'part of', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'part of', 'body'), True)	(('body', 'has part', 'wing'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'leg'), True)	(('leg', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'leg'), True)	(('leg', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'leg'), True)	(('leg', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leg', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'webbed foot'), True)	(('webbed foot', 'below', 'leg'), True)
Constraint 1: x rln y <-> y rln x	(('leg', 'connects', 'webbed foot'), True)	(('webbed foot', 'connects', 'leg'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('body', 'above', 'leg')('leg', 'above', 'webbed foot')	(('body', 'above', 'webbed foot'), True)
Constraint 4 (True antecedent)	('webbed foot', 'below', 'leg')('leg', 'below', 'body')	(('webbed foot', 'below', 'body'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'nostril'), False)	(('nostril', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'bill'), False)	(('bill', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'eye'), False)	(('eye', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'wing'), False)	(('wing', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leg', 'above', 'body'), False)	(('body', 'below', 'leg'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('webbed foot', 'above', 'leg'), False)	(('leg', 'below', 'webbed foot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'webbed foot'), True)	(('webbed foot', 'above', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('webbed foot', 'below', 'body'), True)	(('body', 'below', 'webbed foot'), False)
Round 3 ...
egg worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('egg white', 'surrounds', 'yolk'), True)	(('yolk', 'surrounds', 'egg white'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('egg white', 'surrounds', 'yolk'), True)	(('yolk', 'surrounded by', 'egg white'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('yolk', 'inside', 'egg white'), True)	(('egg white', 'inside', 'yolk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yolk', 'inside', 'egg white'), True)	(('egg white', 'contains', 'yolk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('egg white', 'inside', 'shell membrane'), True)	(('shell membrane', 'inside', 'egg white'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('egg white', 'inside', 'shell membrane'), True)	(('shell membrane', 'contains', 'egg white'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shell membrane', 'surrounds', 'egg white'), True)	(('egg white', 'surrounds', 'shell membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell membrane', 'surrounds', 'egg white'), True)	(('egg white', 'surrounded by', 'shell membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('air cell', 'above', 'egg white'), True)	(('egg white', 'above', 'air cell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('air cell', 'above', 'egg white'), True)	(('egg white', 'below', 'air cell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('air cell', 'inside', 'shell'), True)	(('shell', 'inside', 'air cell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('air cell', 'inside', 'shell'), True)	(('shell', 'contains', 'air cell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'surrounds', 'shell membrane'), True)	(('shell membrane', 'surrounds', 'shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell', 'surrounds', 'shell membrane'), True)	(('shell membrane', 'surrounded by', 'shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shell membrane', 'inside', 'shell'), True)	(('shell', 'inside', 'shell membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell membrane', 'inside', 'shell'), True)	(('shell', 'contains', 'shell membrane'), True)
Constraint 4 (True antecedent)	('yolk', 'inside', 'egg white')('egg white', 'inside', 'shell membrane')	(('yolk', 'inside', 'shell membrane'), True)
Constraint 4 (True antecedent)	('egg white', 'inside', 'shell membrane')('shell membrane', 'inside', 'shell')	(('egg white', 'inside', 'shell'), True)
Constraint 4 (True antecedent)	('shell membrane', 'surrounds', 'egg white')('egg white', 'surrounds', 'yolk')	(('shell membrane', 'surrounds', 'yolk'), True)
Constraint 4 (True antecedent)	('shell', 'surrounds', 'shell membrane')('shell membrane', 'surrounds', 'egg white')	(('shell', 'surrounds', 'egg white'), True)
Constraint 4 (True antecedent)	('yolk', 'surrounded by', 'egg white')('egg white', 'surrounded by', 'shell membrane')	(('yolk', 'surrounded by', 'shell membrane'), True)
Constraint 4 (True antecedent)	('shell membrane', 'contains', 'egg white')('egg white', 'contains', 'yolk')	(('shell membrane', 'contains', 'yolk'), True)
Constraint 4 (True antecedent)	('egg white', 'surrounded by', 'shell membrane')('shell membrane', 'surrounded by', 'shell')	(('egg white', 'surrounded by', 'shell'), True)
Constraint 4 (True antecedent)	('shell', 'contains', 'shell membrane')('shell membrane', 'contains', 'egg white')	(('shell', 'contains', 'egg white'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('yolk', 'surrounds', 'egg white'), False)	(('egg white', 'surrounded by', 'yolk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('egg white', 'inside', 'yolk'), False)	(('yolk', 'contains', 'egg white'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell membrane', 'inside', 'egg white'), False)	(('egg white', 'contains', 'shell membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('egg white', 'surrounds', 'shell membrane'), False)	(('shell membrane', 'surrounded by', 'egg white'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('egg white', 'above', 'air cell'), False)	(('air cell', 'below', 'egg white'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell', 'inside', 'air cell'), False)	(('air cell', 'contains', 'shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell membrane', 'surrounds', 'shell'), False)	(('shell', 'surrounded by', 'shell membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell', 'inside', 'shell membrane'), False)	(('shell membrane', 'contains', 'shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('yolk', 'inside', 'shell membrane'), True)	(('shell membrane', 'inside', 'yolk'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('egg white', 'inside', 'shell'), True)	(('shell', 'inside', 'egg white'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shell membrane', 'surrounds', 'yolk'), True)	(('yolk', 'surrounds', 'shell membrane'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'surrounds', 'egg white'), True)	(('egg white', 'surrounds', 'shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('yolk', 'surrounded by', 'shell membrane'), True)	(('shell membrane', 'surrounded by', 'yolk'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shell membrane', 'contains', 'yolk'), True)	(('yolk', 'contains', 'shell membrane'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('egg white', 'surrounded by', 'shell'), True)	(('shell', 'surrounded by', 'egg white'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'contains', 'egg white'), True)	(('egg white', 'contains', 'shell'), False)
Constraint 4 (True antecedent)	('yolk', 'inside', 'egg white')('egg white', 'inside', 'shell')	(('yolk', 'inside', 'shell'), True)
Constraint 4 (True antecedent)	('shell', 'surrounds', 'shell membrane')('shell membrane', 'surrounds', 'yolk')	(('shell', 'surrounds', 'yolk'), True)
Constraint 4 (True antecedent)	('yolk', 'surrounded by', 'egg white')('egg white', 'surrounded by', 'shell')	(('yolk', 'surrounded by', 'shell'), True)
Constraint 4 (True antecedent)	('shell', 'contains', 'shell membrane')('shell membrane', 'contains', 'yolk')	(('shell', 'contains', 'yolk'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('yolk', 'inside', 'shell'), True)	(('shell', 'inside', 'yolk'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'surrounds', 'yolk'), True)	(('yolk', 'surrounds', 'shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('yolk', 'surrounded by', 'shell'), True)	(('shell', 'surrounded by', 'yolk'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'contains', 'yolk'), True)	(('yolk', 'contains', 'shell'), False)
Round 4 ...
egg worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('egg white', 'surrounds', 'yolk'), True)	(('yolk', 'surrounds', 'egg white'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('egg white', 'surrounds', 'yolk'), True)	(('yolk', 'surrounded by', 'egg white'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shell membrane', 'surrounds', 'yolk'), True)	(('yolk', 'surrounds', 'shell membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell membrane', 'surrounds', 'yolk'), True)	(('yolk', 'surrounded by', 'shell membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'surrounds', 'shell membrane'), True)	(('shell membrane', 'surrounds', 'shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell', 'surrounds', 'shell membrane'), True)	(('shell membrane', 'surrounded by', 'shell'), True)
Constraint 4 (True antecedent)	('shell', 'surrounds', 'shell membrane')('shell membrane', 'surrounds', 'yolk')	(('shell', 'surrounds', 'yolk'), True)
Constraint 4 (True antecedent)	('yolk', 'surrounded by', 'shell membrane')('shell membrane', 'surrounded by', 'shell')	(('yolk', 'surrounded by', 'shell'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('yolk', 'surrounds', 'egg white'), False)	(('egg white', 'surrounded by', 'yolk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yolk', 'surrounds', 'shell membrane'), False)	(('shell membrane', 'surrounded by', 'yolk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell membrane', 'surrounds', 'shell'), False)	(('shell', 'surrounded by', 'shell membrane'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'surrounds', 'yolk'), True)	(('yolk', 'surrounds', 'shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('yolk', 'surrounded by', 'shell'), True)	(('shell', 'surrounded by', 'yolk'), False)
Round 3 ...
egg worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'surrounds', 'shell membrane'), True)	(('shell membrane', 'surrounds', 'shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell', 'surrounds', 'shell membrane'), True)	(('shell membrane', 'surrounded by', 'shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shell membrane', 'surrounds', 'yolk'), True)	(('yolk', 'surrounds', 'shell membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell membrane', 'surrounds', 'yolk'), True)	(('yolk', 'surrounded by', 'shell membrane'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('egg white', 'surrounds', 'yolk'), True)	(('yolk', 'surrounds', 'egg white'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('egg white', 'surrounds', 'yolk'), True)	(('yolk', 'surrounded by', 'egg white'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shell membrane', 'surrounds', 'egg white'), True)	(('egg white', 'surrounds', 'shell membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shell membrane', 'surrounds', 'egg white'), True)	(('egg white', 'surrounded by', 'shell membrane'), True)
Constraint 4 (True antecedent)	('shell', 'surrounds', 'shell membrane')('shell membrane', 'surrounds', 'yolk')	(('shell', 'surrounds', 'yolk'), True)
Constraint 4 (True antecedent)	('shell', 'surrounds', 'shell membrane')('shell membrane', 'surrounds', 'egg white')	(('shell', 'surrounds', 'egg white'), True)
Constraint 4 (True antecedent)	('yolk', 'surrounded by', 'shell membrane')('shell membrane', 'surrounded by', 'shell')	(('yolk', 'surrounded by', 'shell'), True)
Constraint 4 (True antecedent)	('egg white', 'surrounded by', 'shell membrane')('shell membrane', 'surrounded by', 'shell')	(('egg white', 'surrounded by', 'shell'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('shell membrane', 'surrounds', 'shell'), False)	(('shell', 'surrounded by', 'shell membrane'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yolk', 'surrounds', 'shell membrane'), False)	(('shell membrane', 'surrounded by', 'yolk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('yolk', 'surrounds', 'egg white'), False)	(('egg white', 'surrounded by', 'yolk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('egg white', 'surrounds', 'shell membrane'), False)	(('shell membrane', 'surrounded by', 'egg white'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'surrounds', 'yolk'), True)	(('yolk', 'surrounds', 'shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shell', 'surrounds', 'egg white'), True)	(('egg white', 'surrounds', 'shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('yolk', 'surrounded by', 'shell'), True)	(('shell', 'surrounded by', 'yolk'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('egg white', 'surrounded by', 'shell'), True)	(('shell', 'surrounded by', 'egg white'), False)
Round 3 ...
helicopter worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'inside', 'engine bay'), True)	(('engine bay', 'inside', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'inside', 'engine bay'), True)	(('engine bay', 'contains', 'engine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine bay', 'behind', 'passenger seats'), True)	(('passenger seats', 'behind', 'engine bay'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine bay', 'behind', 'passenger seats'), True)	(('passenger seats', 'in front of', 'engine bay'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine bay', 'inside', 'frame'), True)	(('frame', 'inside', 'engine bay'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine bay', 'inside', 'frame'), True)	(('frame', 'contains', 'engine bay'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('passenger seats', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'passenger seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('passenger seats', 'behind', 'cockpit'), True)	(('cockpit', 'in front of', 'passenger seats'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'inside', 'frame'), True)	(('frame', 'inside', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'inside', 'frame'), True)	(('frame', 'contains', 'cockpit'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'landing skid'), True)	(('landing skid', 'connects', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'above', 'landing skid'), True)	(('landing skid', 'above', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'landing skid'), True)	(('landing skid', 'below', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'tail rotor'), True)	(('tail rotor', 'connects', 'frame'), True)
Constraint 1: x rln y <-> y rln x	(('frame', 'connects', 'main rotor'), True)	(('main rotor', 'connects', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'above', 'frame'), True)	(('frame', 'above', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'above', 'frame'), True)	(('frame', 'below', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main rotor', 'above', 'frame'), True)	(('frame', 'above', 'main rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main rotor', 'above', 'frame'), True)	(('frame', 'below', 'main rotor'), True)
Constraint 1: x rln y <-> y rln x	(('blade', 'connects', 'main rotor'), True)	(('main rotor', 'connects', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('passenger seats', 'inside', 'frame'), True)	(('frame', 'inside', 'passenger seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('passenger seats', 'inside', 'frame'), True)	(('frame', 'contains', 'passenger seats'), True)
Constraint 4 (True antecedent)	('engine', 'inside', 'engine bay')('engine bay', 'inside', 'frame')	(('engine', 'inside', 'frame'), True)
Constraint 4 (True antecedent)	('engine bay', 'behind', 'passenger seats')('passenger seats', 'behind', 'cockpit')	(('engine bay', 'behind', 'cockpit'), True)
Constraint 4 (True antecedent)	('blade', 'above', 'frame')('frame', 'above', 'landing skid')	(('blade', 'above', 'landing skid'), True)
Constraint 4 (True antecedent)	('main rotor', 'above', 'frame')('frame', 'above', 'landing skid')	(('main rotor', 'above', 'landing skid'), True)
Constraint 4 (True antecedent)	('frame', 'contains', 'engine bay')('engine bay', 'contains', 'engine')	(('frame', 'contains', 'engine'), True)
Constraint 4 (True antecedent)	('cockpit', 'in front of', 'passenger seats')('passenger seats', 'in front of', 'engine bay')	(('cockpit', 'in front of', 'engine bay'), True)
Constraint 4 (True antecedent)	('landing skid', 'below', 'frame')('frame', 'below', 'blade')	(('landing skid', 'below', 'blade'), True)
Constraint 4 (True antecedent)	('landing skid', 'below', 'frame')('frame', 'below', 'main rotor')	(('landing skid', 'below', 'main rotor'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('engine bay', 'inside', 'engine'), False)	(('engine', 'contains', 'engine bay'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('passenger seats', 'behind', 'engine bay'), False)	(('engine bay', 'in front of', 'passenger seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'inside', 'engine bay'), False)	(('engine bay', 'contains', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'behind', 'passenger seats'), False)	(('passenger seats', 'in front of', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'inside', 'cockpit'), False)	(('cockpit', 'contains', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('landing skid', 'above', 'frame'), False)	(('frame', 'below', 'landing skid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'blade'), False)	(('blade', 'below', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'above', 'main rotor'), False)	(('main rotor', 'below', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'inside', 'passenger seats'), False)	(('passenger seats', 'contains', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'inside', 'frame'), True)	(('frame', 'inside', 'engine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('engine bay', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'engine bay'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('blade', 'above', 'landing skid'), True)	(('landing skid', 'above', 'blade'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('main rotor', 'above', 'landing skid'), True)	(('landing skid', 'above', 'main rotor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'contains', 'engine'), True)	(('engine', 'contains', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'in front of', 'engine bay'), True)	(('engine bay', 'in front of', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('landing skid', 'below', 'blade'), True)	(('blade', 'below', 'landing skid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('landing skid', 'below', 'main rotor'), True)	(('main rotor', 'below', 'landing skid'), False)
Round 3 ...
helicopter worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('main rotor', 'connects', 'blade'), True)	(('blade', 'connects', 'main rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main rotor', 'above', 'passenger seats'), True)	(('passenger seats', 'above', 'main rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main rotor', 'above', 'passenger seats'), True)	(('passenger seats', 'below', 'main rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main rotor', 'requires', 'engine'), True)	(('engine', 'requires', 'main rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main rotor', 'requires', 'engine'), True)	(('engine', 'required by', 'main rotor'), True)
Constraint 1: x rln y <-> y rln x	(('main rotor', 'connects', 'engine'), True)	(('engine', 'connects', 'main rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail rotor', 'behind', 'engine'), True)	(('engine', 'behind', 'tail rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail rotor', 'behind', 'engine'), True)	(('engine', 'in front of', 'tail rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail rotor', 'requires', 'engine'), True)	(('engine', 'requires', 'tail rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail rotor', 'requires', 'engine'), True)	(('engine', 'required by', 'tail rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'behind', 'passenger seats'), True)	(('passenger seats', 'behind', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'passenger seats'), True)	(('passenger seats', 'in front of', 'engine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('passenger seats', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'passenger seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('passenger seats', 'behind', 'cockpit'), True)	(('cockpit', 'in front of', 'passenger seats'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('passenger seats', 'above', 'landing skid'), True)	(('landing skid', 'above', 'passenger seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('passenger seats', 'above', 'landing skid'), True)	(('landing skid', 'below', 'passenger seats'), True)
Constraint 4 (True antecedent)	('main rotor', 'above', 'passenger seats')('passenger seats', 'above', 'landing skid')	(('main rotor', 'above', 'landing skid'), True)
Constraint 4 (True antecedent)	('tail rotor', 'behind', 'engine')('engine', 'behind', 'passenger seats')	(('tail rotor', 'behind', 'passenger seats'), True)
Constraint 4 (True antecedent)	('engine', 'behind', 'passenger seats')('passenger seats', 'behind', 'cockpit')	(('engine', 'behind', 'cockpit'), True)
Constraint 4 (True antecedent)	('passenger seats', 'in front of', 'engine')('engine', 'in front of', 'tail rotor')	(('passenger seats', 'in front of', 'tail rotor'), True)
Constraint 4 (True antecedent)	('cockpit', 'in front of', 'passenger seats')('passenger seats', 'in front of', 'engine')	(('cockpit', 'in front of', 'engine'), True)
Constraint 4 (True antecedent)	('landing skid', 'below', 'passenger seats')('passenger seats', 'below', 'main rotor')	(('landing skid', 'below', 'main rotor'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('passenger seats', 'above', 'main rotor'), False)	(('main rotor', 'below', 'passenger seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'requires', 'main rotor'), False)	(('main rotor', 'required by', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'tail rotor'), False)	(('tail rotor', 'in front of', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'requires', 'tail rotor'), False)	(('tail rotor', 'required by', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('passenger seats', 'behind', 'engine'), False)	(('engine', 'in front of', 'passenger seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'behind', 'passenger seats'), False)	(('passenger seats', 'in front of', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('landing skid', 'above', 'passenger seats'), False)	(('passenger seats', 'below', 'landing skid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('main rotor', 'above', 'landing skid'), True)	(('landing skid', 'above', 'main rotor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail rotor', 'behind', 'passenger seats'), True)	(('passenger seats', 'behind', 'tail rotor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'engine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('passenger seats', 'in front of', 'tail rotor'), True)	(('tail rotor', 'in front of', 'passenger seats'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'in front of', 'engine'), True)	(('engine', 'in front of', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('landing skid', 'below', 'main rotor'), True)	(('main rotor', 'below', 'landing skid'), False)
Constraint 4 (True antecedent)	('tail rotor', 'behind', 'engine')('engine', 'behind', 'cockpit')	(('tail rotor', 'behind', 'cockpit'), True)
Constraint 4 (True antecedent)	('cockpit', 'in front of', 'passenger seats')('passenger seats', 'in front of', 'tail rotor')	(('cockpit', 'in front of', 'tail rotor'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tail rotor', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'tail rotor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'in front of', 'tail rotor'), True)	(('tail rotor', 'in front of', 'cockpit'), False)
Round 4 ...
helicopter worker_106...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('blade', 'connects', 'main rotor'), True)	(('main rotor', 'connects', 'blade'), True)
Constraint 1: x rln y <-> y rln x	(('main rotor', 'connects', 'engine'), True)	(('engine', 'connects', 'main rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail rotor', 'behind', 'engine'), True)	(('engine', 'behind', 'tail rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail rotor', 'behind', 'engine'), True)	(('engine', 'in front of', 'tail rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('main rotor', 'above', 'cockpit'), True)	(('cockpit', 'above', 'main rotor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('main rotor', 'above', 'cockpit'), True)	(('cockpit', 'below', 'main rotor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('passenger seats', 'inside', 'cockpit'), True)	(('cockpit', 'inside', 'passenger seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('passenger seats', 'inside', 'cockpit'), True)	(('cockpit', 'contains', 'passenger seats'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'above', 'landing skid'), True)	(('landing skid', 'above', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'above', 'landing skid'), True)	(('landing skid', 'below', 'cockpit'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('passenger seats', 'above', 'landing skid'), True)	(('landing skid', 'above', 'passenger seats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('passenger seats', 'above', 'landing skid'), True)	(('landing skid', 'below', 'passenger seats'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'cockpit'), True)	(('cockpit', 'in front of', 'engine'), True)
Constraint 4 (True antecedent)	('tail rotor', 'behind', 'engine')('engine', 'behind', 'cockpit')	(('tail rotor', 'behind', 'cockpit'), True)
Constraint 4 (True antecedent)	('main rotor', 'above', 'cockpit')('cockpit', 'above', 'landing skid')	(('main rotor', 'above', 'landing skid'), True)
Constraint 4 (True antecedent)	('landing skid', 'below', 'cockpit')('cockpit', 'below', 'main rotor')	(('landing skid', 'below', 'main rotor'), True)
Constraint 4 (True antecedent)	('cockpit', 'in front of', 'engine')('engine', 'in front of', 'tail rotor')	(('cockpit', 'in front of', 'tail rotor'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'tail rotor'), False)	(('tail rotor', 'in front of', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'above', 'main rotor'), False)	(('main rotor', 'below', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'inside', 'passenger seats'), False)	(('passenger seats', 'contains', 'cockpit'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('landing skid', 'above', 'cockpit'), False)	(('cockpit', 'below', 'landing skid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('landing skid', 'above', 'passenger seats'), False)	(('passenger seats', 'below', 'landing skid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cockpit', 'behind', 'engine'), False)	(('engine', 'in front of', 'cockpit'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail rotor', 'behind', 'cockpit'), True)	(('cockpit', 'behind', 'tail rotor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('main rotor', 'above', 'landing skid'), True)	(('landing skid', 'above', 'main rotor'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('landing skid', 'below', 'main rotor'), True)	(('main rotor', 'below', 'landing skid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cockpit', 'in front of', 'tail rotor'), True)	(('tail rotor', 'in front of', 'cockpit'), False)
Round 3 ...
knife worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('belly', 'behind', 'tip'), True)	(('tip', 'behind', 'belly'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('belly', 'behind', 'tip'), True)	(('tip', 'in front of', 'belly'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('belly', 'part of', 'blade'), True)	(('blade', 'part of', 'belly'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('belly', 'part of', 'blade'), True)	(('blade', 'has part', 'belly'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('point', 'part of', 'tip'), True)	(('tip', 'part of', 'point'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('point', 'part of', 'tip'), True)	(('tip', 'has part', 'point'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tip', 'part of', 'blade'), True)	(('blade', 'part of', 'tip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tip', 'part of', 'blade'), True)	(('blade', 'has part', 'tip'), True)
Constraint 1: x rln y <-> y rln x	(('point', 'connects', 'blade'), True)	(('blade', 'connects', 'point'), True)
Constraint 1: x rln y <-> y rln x	(('blade', 'connects', 'spine'), True)	(('spine', 'connects', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'above', 'blade'), True)	(('blade', 'above', 'spine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spine', 'above', 'blade'), True)	(('blade', 'below', 'spine'), True)
Constraint 1: x rln y <-> y rln x	(('blade', 'connects', 'heel'), True)	(('heel', 'connects', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cutting edge', 'part of', 'blade'), True)	(('blade', 'part of', 'cutting edge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cutting edge', 'part of', 'blade'), True)	(('blade', 'has part', 'cutting edge'), True)
Constraint 1: x rln y <-> y rln x	(('blade', 'connects', 'bolster'), True)	(('bolster', 'connects', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heel', 'behind', 'cutting edge'), True)	(('cutting edge', 'behind', 'heel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heel', 'behind', 'cutting edge'), True)	(('cutting edge', 'in front of', 'heel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bolster', 'behind', 'cutting edge'), True)	(('cutting edge', 'behind', 'bolster'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bolster', 'behind', 'cutting edge'), True)	(('cutting edge', 'in front of', 'bolster'), True)
Constraint 1: x rln y <-> y rln x	(('heel', 'connects', 'bolster'), True)	(('bolster', 'connects', 'heel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tang', 'behind', 'bolster'), True)	(('bolster', 'behind', 'tang'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tang', 'behind', 'bolster'), True)	(('bolster', 'in front of', 'tang'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'behind', 'bolster'), True)	(('bolster', 'behind', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'behind', 'bolster'), True)	(('bolster', 'in front of', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('tang', 'connects', 'handle'), True)	(('handle', 'connects', 'tang'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'behind', 'spine'), True)	(('spine', 'behind', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'behind', 'spine'), True)	(('spine', 'in front of', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'butt'), True)	(('butt', 'connects', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('butt', 'behind', 'handle'), True)	(('handle', 'behind', 'butt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('butt', 'behind', 'handle'), True)	(('handle', 'in front of', 'butt'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'rivet'), True)	(('rivet', 'connects', 'handle'), True)
Constraint 4 (True antecedent)	('tang', 'behind', 'bolster')('bolster', 'behind', 'cutting edge')	(('tang', 'behind', 'cutting edge'), True)
Constraint 4 (True antecedent)	('handle', 'behind', 'bolster')('bolster', 'behind', 'cutting edge')	(('handle', 'behind', 'cutting edge'), True)
Constraint 4 (True antecedent)	('butt', 'behind', 'handle')('handle', 'behind', 'bolster')	(('butt', 'behind', 'bolster'), True)
Constraint 4 (True antecedent)	('butt', 'behind', 'handle')('handle', 'behind', 'spine')	(('butt', 'behind', 'spine'), True)
Constraint 4 (True antecedent)	('cutting edge', 'in front of', 'bolster')('bolster', 'in front of', 'tang')	(('cutting edge', 'in front of', 'tang'), True)
Constraint 4 (True antecedent)	('cutting edge', 'in front of', 'bolster')('bolster', 'in front of', 'handle')	(('cutting edge', 'in front of', 'handle'), True)
Constraint 4 (True antecedent)	('bolster', 'in front of', 'handle')('handle', 'in front of', 'butt')	(('bolster', 'in front of', 'butt'), True)
Constraint 4 (True antecedent)	('spine', 'in front of', 'handle')('handle', 'in front of', 'butt')	(('spine', 'in front of', 'butt'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('tip', 'behind', 'belly'), False)	(('belly', 'in front of', 'tip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'belly'), False)	(('belly', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tip', 'part of', 'point'), False)	(('point', 'has part', 'tip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'tip'), False)	(('tip', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'above', 'spine'), False)	(('spine', 'below', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'cutting edge'), False)	(('cutting edge', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cutting edge', 'behind', 'heel'), False)	(('heel', 'in front of', 'cutting edge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cutting edge', 'behind', 'bolster'), False)	(('bolster', 'in front of', 'cutting edge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bolster', 'behind', 'tang'), False)	(('tang', 'in front of', 'bolster'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bolster', 'behind', 'handle'), False)	(('handle', 'in front of', 'bolster'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spine', 'behind', 'handle'), False)	(('handle', 'in front of', 'spine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'behind', 'butt'), False)	(('butt', 'in front of', 'handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tang', 'behind', 'cutting edge'), True)	(('cutting edge', 'behind', 'tang'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'behind', 'cutting edge'), True)	(('cutting edge', 'behind', 'handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('butt', 'behind', 'bolster'), True)	(('bolster', 'behind', 'butt'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('butt', 'behind', 'spine'), True)	(('spine', 'behind', 'butt'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cutting edge', 'in front of', 'tang'), True)	(('tang', 'in front of', 'cutting edge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cutting edge', 'in front of', 'handle'), True)	(('handle', 'in front of', 'cutting edge'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bolster', 'in front of', 'butt'), True)	(('butt', 'in front of', 'bolster'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'in front of', 'butt'), True)	(('butt', 'in front of', 'spine'), False)
Constraint 4 (True antecedent)	('butt', 'behind', 'handle')('handle', 'behind', 'cutting edge')	(('butt', 'behind', 'cutting edge'), True)
Constraint 4 (True antecedent)	('cutting edge', 'in front of', 'bolster')('bolster', 'in front of', 'butt')	(('cutting edge', 'in front of', 'butt'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('butt', 'behind', 'cutting edge'), True)	(('cutting edge', 'behind', 'butt'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cutting edge', 'in front of', 'butt'), True)	(('butt', 'in front of', 'cutting edge'), False)
Round 4 ...
knife worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tip', 'part of', 'blade'), True)	(('blade', 'part of', 'tip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tip', 'part of', 'blade'), True)	(('blade', 'has part', 'tip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cutting edge', 'part of', 'blade'), True)	(('blade', 'part of', 'cutting edge'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cutting edge', 'part of', 'blade'), True)	(('blade', 'has part', 'cutting edge'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heel', 'part of', 'blade'), True)	(('blade', 'part of', 'heel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heel', 'part of', 'blade'), True)	(('blade', 'has part', 'heel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spine', 'part of', 'blade'), True)	(('blade', 'part of', 'spine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spine', 'part of', 'blade'), True)	(('blade', 'has part', 'spine'), True)
Constraint 1: x rln y <-> y rln x	(('cutting edge', 'connects', 'heel'), True)	(('heel', 'connects', 'cutting edge'), True)
Constraint 1: x rln y <-> y rln x	(('tip', 'connects', 'spine'), True)	(('spine', 'connects', 'tip'), True)
Constraint 1: x rln y <-> y rln x	(('blade', 'connects', 'handle'), True)	(('handle', 'connects', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'behind', 'blade'), True)	(('blade', 'behind', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'behind', 'blade'), True)	(('blade', 'in front of', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tang', 'part of', 'handle'), True)	(('handle', 'part of', 'tang'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tang', 'part of', 'handle'), True)	(('handle', 'has part', 'tang'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rivet', 'part of', 'handle'), True)	(('handle', 'part of', 'rivet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rivet', 'part of', 'handle'), True)	(('handle', 'has part', 'rivet'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('butt', 'part of', 'handle'), True)	(('handle', 'part of', 'butt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('butt', 'part of', 'handle'), True)	(('handle', 'has part', 'butt'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('butt', 'behind', 'rivet'), True)	(('rivet', 'behind', 'butt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('butt', 'behind', 'rivet'), True)	(('rivet', 'in front of', 'butt'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rivet', 'behind', 'tang'), True)	(('tang', 'behind', 'rivet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rivet', 'behind', 'tang'), True)	(('tang', 'in front of', 'rivet'), True)
Constraint 4 (True antecedent)	('butt', 'behind', 'rivet')('rivet', 'behind', 'tang')	(('butt', 'behind', 'tang'), True)
Constraint 4 (True antecedent)	('tang', 'in front of', 'rivet')('rivet', 'in front of', 'butt')	(('tang', 'in front of', 'butt'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'tip'), False)	(('tip', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'cutting edge'), False)	(('cutting edge', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'heel'), False)	(('heel', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'spine'), False)	(('spine', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'behind', 'handle'), False)	(('handle', 'in front of', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'tang'), False)	(('tang', 'has part', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'rivet'), False)	(('rivet', 'has part', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'butt'), False)	(('butt', 'has part', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rivet', 'behind', 'butt'), False)	(('butt', 'in front of', 'rivet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tang', 'behind', 'rivet'), False)	(('rivet', 'in front of', 'tang'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('butt', 'behind', 'tang'), True)	(('tang', 'behind', 'butt'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tang', 'in front of', 'butt'), True)	(('butt', 'in front of', 'tang'), False)
Round 3 ...
knife worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('point', 'part of', 'blade'), True)	(('blade', 'part of', 'point'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('point', 'part of', 'blade'), True)	(('blade', 'has part', 'point'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tip', 'part of', 'blade'), True)	(('blade', 'part of', 'tip'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tip', 'part of', 'blade'), True)	(('blade', 'has part', 'tip'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('belly', 'part of', 'blade'), True)	(('blade', 'part of', 'belly'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('belly', 'part of', 'blade'), True)	(('blade', 'has part', 'belly'), True)
Constraint 1: x rln y <-> y rln x	(('blade', 'connects', 'handle'), True)	(('handle', 'connects', 'blade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('butt', 'part of', 'handle'), True)	(('handle', 'part of', 'butt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('butt', 'part of', 'handle'), True)	(('handle', 'has part', 'butt'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'point'), False)	(('point', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'tip'), False)	(('tip', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('blade', 'part of', 'belly'), False)	(('belly', 'has part', 'blade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'butt'), False)	(('butt', 'has part', 'handle'), False)
Round 3 ...
photo frame worker_106...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('back board', 'behind', 'mat board'), True)	(('mat board', 'behind', 'back board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back board', 'behind', 'mat board'), True)	(('mat board', 'in front of', 'back board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mat board', 'behind', 'glass'), True)	(('glass', 'behind', 'mat board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mat board', 'behind', 'glass'), True)	(('glass', 'in front of', 'mat board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('glass', 'inside', 'frame'), True)	(('frame', 'inside', 'glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass', 'inside', 'frame'), True)	(('frame', 'contains', 'glass'), True)
Constraint 4 (True antecedent)	('back board', 'behind', 'mat board')('mat board', 'behind', 'glass')	(('back board', 'behind', 'glass'), True)
Constraint 4 (True antecedent)	('glass', 'in front of', 'mat board')('mat board', 'in front of', 'back board')	(('glass', 'in front of', 'back board'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('mat board', 'behind', 'back board'), False)	(('back board', 'in front of', 'mat board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass', 'behind', 'mat board'), False)	(('mat board', 'in front of', 'glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'inside', 'glass'), False)	(('glass', 'contains', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('back board', 'behind', 'glass'), True)	(('glass', 'behind', 'back board'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('glass', 'in front of', 'back board'), True)	(('back board', 'in front of', 'glass'), False)
Round 3 ...
photo frame worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'surrounds', 'glass'), True)	(('glass', 'surrounds', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'surrounds', 'glass'), True)	(('glass', 'surrounded by', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('matboard', 'behind', 'glass'), True)	(('glass', 'behind', 'matboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('matboard', 'behind', 'glass'), True)	(('glass', 'in front of', 'matboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'surrounds', 'mat board'), True)	(('mat board', 'surrounds', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'surrounds', 'mat board'), True)	(('mat board', 'surrounded by', 'frame'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back board', 'behind', 'mat board'), True)	(('mat board', 'behind', 'back board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back board', 'behind', 'mat board'), True)	(('mat board', 'in front of', 'back board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'surrounds', 'back board'), True)	(('back board', 'surrounds', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'surrounds', 'back board'), True)	(('back board', 'surrounded by', 'frame'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('glass', 'surrounds', 'frame'), False)	(('frame', 'surrounded by', 'glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass', 'behind', 'matboard'), False)	(('matboard', 'in front of', 'glass'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mat board', 'surrounds', 'frame'), False)	(('frame', 'surrounded by', 'mat board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mat board', 'behind', 'back board'), False)	(('back board', 'in front of', 'mat board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back board', 'surrounds', 'frame'), False)	(('frame', 'surrounded by', 'back board'), False)
Round 3 ...
photo frame worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('back board', 'behind', 'mat board'), True)	(('mat board', 'behind', 'back board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back board', 'behind', 'mat board'), True)	(('mat board', 'in front of', 'back board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mat board', 'behind', 'frame'), True)	(('frame', 'behind', 'mat board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mat board', 'behind', 'frame'), True)	(('frame', 'in front of', 'mat board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'behind', 'glass'), True)	(('glass', 'behind', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'behind', 'glass'), True)	(('glass', 'in front of', 'frame'), True)
Constraint 4 (True antecedent)	('back board', 'behind', 'mat board')('mat board', 'behind', 'frame')	(('back board', 'behind', 'frame'), True)
Constraint 4 (True antecedent)	('mat board', 'behind', 'frame')('frame', 'behind', 'glass')	(('mat board', 'behind', 'glass'), True)
Constraint 4 (True antecedent)	('frame', 'in front of', 'mat board')('mat board', 'in front of', 'back board')	(('frame', 'in front of', 'back board'), True)
Constraint 4 (True antecedent)	('glass', 'in front of', 'frame')('frame', 'in front of', 'mat board')	(('glass', 'in front of', 'mat board'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('mat board', 'behind', 'back board'), False)	(('back board', 'in front of', 'mat board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('frame', 'behind', 'mat board'), False)	(('mat board', 'in front of', 'frame'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('glass', 'behind', 'frame'), False)	(('frame', 'in front of', 'glass'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('back board', 'behind', 'frame'), True)	(('frame', 'behind', 'back board'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('mat board', 'behind', 'glass'), True)	(('glass', 'behind', 'mat board'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('frame', 'in front of', 'back board'), True)	(('back board', 'in front of', 'frame'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('glass', 'in front of', 'mat board'), True)	(('mat board', 'in front of', 'glass'), False)
Constraint 4 (True antecedent)	('back board', 'behind', 'mat board')('mat board', 'behind', 'glass')	(('back board', 'behind', 'glass'), True)
Constraint 4 (True antecedent)	('glass', 'in front of', 'frame')('frame', 'in front of', 'back board')	(('glass', 'in front of', 'back board'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('back board', 'behind', 'glass'), True)	(('glass', 'behind', 'back board'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('glass', 'in front of', 'back board'), True)	(('back board', 'in front of', 'glass'), False)
Round 4 ...
rice cooker worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('knob', 'part of', 'lid'), True)	(('lid', 'part of', 'knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('knob', 'part of', 'lid'), True)	(('lid', 'has part', 'knob'), True)
Constraint 1: x rln y <-> y rln x	(('lid', 'connects', 'inner pot'), True)	(('inner pot', 'connects', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'steam rack'), True)	(('steam rack', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'steam rack'), True)	(('steam rack', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('steam rack', 'above', 'inner pot'), True)	(('inner pot', 'above', 'steam rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steam rack', 'above', 'inner pot'), True)	(('inner pot', 'below', 'steam rack'), True)
Constraint 1: x rln y <-> y rln x	(('steam rack', 'connects', 'inner pot'), True)	(('inner pot', 'connects', 'steam rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('inner pot', 'inside', 'outer pot'), True)	(('outer pot', 'inside', 'inner pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('inner pot', 'inside', 'outer pot'), True)	(('outer pot', 'contains', 'inner pot'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('inner pot', 'above', 'heating plate'), True)	(('heating plate', 'above', 'inner pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('inner pot', 'above', 'heating plate'), True)	(('heating plate', 'below', 'inner pot'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heating plate', 'inside', 'outer pot'), True)	(('outer pot', 'inside', 'heating plate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating plate', 'inside', 'outer pot'), True)	(('outer pot', 'contains', 'heating plate'), True)
Constraint 1: x rln y <-> y rln x	(('power cord', 'connects', 'outer pot'), True)	(('outer pot', 'connects', 'power cord'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power switch', 'part of', 'outer pot'), True)	(('outer pot', 'part of', 'power switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power switch', 'part of', 'outer pot'), True)	(('outer pot', 'has part', 'power switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('warm light', 'part of', 'outer pot'), True)	(('outer pot', 'part of', 'warm light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warm light', 'part of', 'outer pot'), True)	(('outer pot', 'has part', 'warm light'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cook light', 'part of', 'outer pot'), True)	(('outer pot', 'part of', 'cook light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cook light', 'part of', 'outer pot'), True)	(('outer pot', 'has part', 'cook light'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'steam rack')('steam rack', 'above', 'inner pot')	(('lid', 'above', 'inner pot'), True)
Constraint 4 (True antecedent)	('steam rack', 'above', 'inner pot')('inner pot', 'above', 'heating plate')	(('steam rack', 'above', 'heating plate'), True)
Constraint 4 (True antecedent)	('inner pot', 'below', 'steam rack')('steam rack', 'below', 'lid')	(('inner pot', 'below', 'lid'), True)
Constraint 4 (True antecedent)	('heating plate', 'below', 'inner pot')('inner pot', 'below', 'steam rack')	(('heating plate', 'below', 'steam rack'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'part of', 'knob'), False)	(('knob', 'has part', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steam rack', 'above', 'lid'), False)	(('lid', 'below', 'steam rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('inner pot', 'above', 'steam rack'), False)	(('steam rack', 'below', 'inner pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'inside', 'inner pot'), False)	(('inner pot', 'contains', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating plate', 'above', 'inner pot'), False)	(('inner pot', 'below', 'heating plate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'inside', 'heating plate'), False)	(('heating plate', 'contains', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'part of', 'power switch'), False)	(('power switch', 'has part', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'part of', 'warm light'), False)	(('warm light', 'has part', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'part of', 'cook light'), False)	(('cook light', 'has part', 'outer pot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'inner pot'), True)	(('inner pot', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('steam rack', 'above', 'heating plate'), True)	(('heating plate', 'above', 'steam rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('inner pot', 'below', 'lid'), True)	(('lid', 'below', 'inner pot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heating plate', 'below', 'steam rack'), True)	(('steam rack', 'below', 'heating plate'), False)
Constraint 4 (True antecedent)	('lid', 'above', 'steam rack')('steam rack', 'above', 'heating plate')	(('lid', 'above', 'heating plate'), True)
Constraint 4 (True antecedent)	('heating plate', 'below', 'inner pot')('inner pot', 'below', 'lid')	(('heating plate', 'below', 'lid'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'heating plate'), True)	(('heating plate', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heating plate', 'below', 'lid'), True)	(('lid', 'below', 'heating plate'), False)
Round 4 ...
rice cooker worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'outer pot'), True)	(('outer pot', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'outer pot'), True)	(('outer pot', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power switch', 'part of', 'outer pot'), True)	(('outer pot', 'part of', 'power switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power switch', 'part of', 'outer pot'), True)	(('outer pot', 'has part', 'power switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cook light', 'part of', 'outer pot'), True)	(('outer pot', 'part of', 'cook light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cook light', 'part of', 'outer pot'), True)	(('outer pot', 'has part', 'cook light'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('warm light', 'part of', 'outer pot'), True)	(('outer pot', 'part of', 'warm light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warm light', 'part of', 'outer pot'), True)	(('outer pot', 'has part', 'warm light'), True)
Constraint 1: x rln y <-> y rln x	(('warm light', 'next to', 'cook light'), True)	(('cook light', 'next to', 'warm light'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cook light', 'above', 'power switch'), True)	(('power switch', 'above', 'cook light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cook light', 'above', 'power switch'), True)	(('power switch', 'below', 'cook light'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('warm light', 'above', 'power switch'), True)	(('power switch', 'above', 'warm light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warm light', 'above', 'power switch'), True)	(('power switch', 'below', 'warm light'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power cord', 'behind', 'outer pot'), True)	(('outer pot', 'behind', 'power cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power cord', 'behind', 'outer pot'), True)	(('outer pot', 'in front of', 'power cord'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heating plate', 'inside', 'outer pot'), True)	(('outer pot', 'inside', 'heating plate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating plate', 'inside', 'outer pot'), True)	(('outer pot', 'contains', 'heating plate'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heating plate', 'requires', 'power cord'), True)	(('power cord', 'requires', 'heating plate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating plate', 'requires', 'power cord'), True)	(('power cord', 'required by', 'heating plate'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'above', 'lid'), False)	(('lid', 'below', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'part of', 'power switch'), False)	(('power switch', 'has part', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'part of', 'cook light'), False)	(('cook light', 'has part', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'part of', 'warm light'), False)	(('warm light', 'has part', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power switch', 'above', 'cook light'), False)	(('cook light', 'below', 'power switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power switch', 'above', 'warm light'), False)	(('warm light', 'below', 'power switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'behind', 'power cord'), False)	(('power cord', 'in front of', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'inside', 'heating plate'), False)	(('heating plate', 'contains', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power cord', 'requires', 'heating plate'), False)	(('heating plate', 'required by', 'power cord'), False)
Round 3 ...
rice cooker worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('knob', 'part of', 'lid'), True)	(('lid', 'part of', 'knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('knob', 'part of', 'lid'), True)	(('lid', 'has part', 'knob'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'inner pot'), True)	(('inner pot', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'inner pot'), True)	(('inner pot', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heating plate', 'inside', 'inner pot'), True)	(('inner pot', 'inside', 'heating plate'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heating plate', 'inside', 'inner pot'), True)	(('inner pot', 'contains', 'heating plate'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('inner pot', 'inside', 'outside pot'), True)	(('outside pot', 'inside', 'inner pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('inner pot', 'inside', 'outside pot'), True)	(('outside pot', 'contains', 'inner pot'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cook light', 'part of', 'outer pot'), True)	(('outer pot', 'part of', 'cook light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cook light', 'part of', 'outer pot'), True)	(('outer pot', 'has part', 'cook light'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('warm light', 'part of', 'outer pot'), True)	(('outer pot', 'part of', 'warm light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('warm light', 'part of', 'outer pot'), True)	(('outer pot', 'has part', 'warm light'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power switch', 'part of', 'outer pot'), True)	(('outer pot', 'part of', 'power switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power switch', 'part of', 'outer pot'), True)	(('outer pot', 'has part', 'power switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power cord', 'behind', 'outer pot'), True)	(('outer pot', 'behind', 'power cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power cord', 'behind', 'outer pot'), True)	(('outer pot', 'in front of', 'power cord'), True)
Constraint 4 (True antecedent)	('heating plate', 'inside', 'inner pot')('inner pot', 'inside', 'outside pot')	(('heating plate', 'inside', 'outside pot'), True)
Constraint 4 (True antecedent)	('outside pot', 'contains', 'inner pot')('inner pot', 'contains', 'heating plate')	(('outside pot', 'contains', 'heating plate'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'part of', 'knob'), False)	(('knob', 'has part', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('inner pot', 'above', 'lid'), False)	(('lid', 'below', 'inner pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('inner pot', 'inside', 'heating plate'), False)	(('heating plate', 'contains', 'inner pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outside pot', 'inside', 'inner pot'), False)	(('inner pot', 'contains', 'outside pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'part of', 'cook light'), False)	(('cook light', 'has part', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'part of', 'warm light'), False)	(('warm light', 'has part', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'part of', 'power switch'), False)	(('power switch', 'has part', 'outer pot'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outer pot', 'behind', 'power cord'), False)	(('power cord', 'in front of', 'outer pot'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heating plate', 'inside', 'outside pot'), True)	(('outside pot', 'inside', 'heating plate'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('outside pot', 'contains', 'heating plate'), True)	(('heating plate', 'contains', 'outside pot'), False)
Round 3 ...
saucepan worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('rim', 'surrounds', 'cooking surface'), True)	(('cooking surface', 'surrounds', 'rim'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rim', 'surrounds', 'cooking surface'), True)	(('cooking surface', 'surrounded by', 'rim'), True)
Constraint 1: x rln y <-> y rln x	(('rim', 'connects', 'sides'), True)	(('sides', 'connects', 'rim'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'surrounds', 'cooking surface'), True)	(('cooking surface', 'surrounds', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'surrounds', 'cooking surface'), True)	(('cooking surface', 'surrounded by', 'sides'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking surface', 'above', 'base'), True)	(('base', 'above', 'cooking surface'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking surface', 'above', 'base'), True)	(('base', 'below', 'cooking surface'), True)
Constraint 1: x rln y <-> y rln x	(('cooking surface', 'connects', 'base'), True)	(('base', 'connects', 'cooking surface'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'sides'), True)	(('sides', 'connects', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'rivets'), True)	(('rivets', 'connects', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('rivets', 'connects', 'sides'), True)	(('sides', 'connects', 'rivets'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking surface', 'surrounds', 'rim'), False)	(('rim', 'surrounded by', 'cooking surface'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking surface', 'surrounds', 'sides'), False)	(('sides', 'surrounded by', 'cooking surface'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'cooking surface'), False)	(('cooking surface', 'below', 'base'), False)
Round 3 ...
saucepan worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'rivets'), True)	(('rivets', 'connects', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('rivets', 'connects', 'body'), True)	(('body', 'connects', 'rivets'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('core', 'inside', 'body'), True)	(('body', 'inside', 'core'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('core', 'inside', 'body'), True)	(('body', 'contains', 'core'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'part of', 'body'), True)	(('body', 'part of', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'part of', 'body'), True)	(('body', 'has part', 'sides'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking surface', 'part of', 'body'), True)	(('body', 'part of', 'cooking surface'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking surface', 'part of', 'body'), True)	(('body', 'has part', 'cooking surface'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rim', 'above', 'sides'), True)	(('sides', 'above', 'rim'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rim', 'above', 'sides'), True)	(('sides', 'below', 'rim'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('core', 'inside', 'sides'), True)	(('sides', 'inside', 'core'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('core', 'inside', 'sides'), True)	(('sides', 'contains', 'core'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'inside', 'core'), False)	(('core', 'contains', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'sides'), False)	(('sides', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'cooking surface'), False)	(('cooking surface', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'rim'), False)	(('rim', 'below', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'inside', 'core'), False)	(('core', 'contains', 'sides'), False)
Round 3 ...
saucepan worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('rim', 'above', 'handle'), True)	(('handle', 'above', 'rim'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rim', 'above', 'handle'), True)	(('handle', 'below', 'rim'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'next to', 'sides'), True)	(('sides', 'next to', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'above', 'cooking surface'), True)	(('cooking surface', 'above', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'cooking surface'), True)	(('cooking surface', 'below', 'sides'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking surface', 'above', 'base'), True)	(('base', 'above', 'cooking surface'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking surface', 'above', 'base'), True)	(('base', 'below', 'cooking surface'), True)
Constraint 4 (True antecedent)	('sides', 'above', 'cooking surface')('cooking surface', 'above', 'base')	(('sides', 'above', 'base'), True)
Constraint 4 (True antecedent)	('base', 'below', 'cooking surface')('cooking surface', 'below', 'sides')	(('base', 'below', 'sides'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'rim'), False)	(('rim', 'below', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking surface', 'above', 'sides'), False)	(('sides', 'below', 'cooking surface'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'cooking surface'), False)	(('cooking surface', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'above', 'base'), True)	(('base', 'above', 'sides'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'sides'), True)	(('sides', 'below', 'base'), False)
Round 3 ...
shoe worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('heel', 'behind', 'outsole'), True)	(('outsole', 'behind', 'heel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heel', 'behind', 'outsole'), True)	(('outsole', 'in front of', 'heel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('midsole', 'above', 'outsole'), True)	(('outsole', 'above', 'midsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('midsole', 'above', 'outsole'), True)	(('outsole', 'below', 'midsole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('welt', 'above', 'outsole'), True)	(('outsole', 'above', 'welt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('welt', 'above', 'outsole'), True)	(('outsole', 'below', 'welt'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('insole', 'above', 'midsole'), True)	(('midsole', 'above', 'insole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insole', 'above', 'midsole'), True)	(('midsole', 'below', 'insole'), True)
Constraint 1: x rln y <-> y rln x	(('welt', 'next to', 'vamp/ upper'), True)	(('vamp/ upper', 'next to', 'welt'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lining', 'above', 'midsole'), True)	(('midsole', 'above', 'lining'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lining', 'above', 'midsole'), True)	(('midsole', 'below', 'lining'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('insole', 'inside', 'lining'), True)	(('lining', 'inside', 'insole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insole', 'inside', 'lining'), True)	(('lining', 'contains', 'insole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lining', 'inside', 'vamp/upper'), True)	(('vamp/upper', 'inside', 'lining'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lining', 'inside', 'vamp/upper'), True)	(('vamp/upper', 'contains', 'lining'), True)
Constraint 1: x rln y <-> y rln x	(('vamp/upper', 'next to', 'tongue'), True)	(('tongue', 'next to', 'vamp/upper'), True)
Constraint 1: x rln y <-> y rln x	(('tongue', 'connects', 'lacing'), True)	(('lacing', 'connects', 'tongue'), True)
Constraint 1: x rln y <-> y rln x	(('lacing', 'next to', 'vamp/upper'), True)	(('vamp/upper', 'next to', 'lacing'), True)
Constraint 4 (True antecedent)	('insole', 'above', 'midsole')('midsole', 'above', 'outsole')	(('insole', 'above', 'outsole'), True)
Constraint 4 (True antecedent)	('lining', 'above', 'midsole')('midsole', 'above', 'outsole')	(('lining', 'above', 'outsole'), True)
Constraint 4 (True antecedent)	('insole', 'inside', 'lining')('lining', 'inside', 'vamp/upper')	(('insole', 'inside', 'vamp/upper'), True)
Constraint 4 (True antecedent)	('outsole', 'below', 'midsole')('midsole', 'below', 'insole')	(('outsole', 'below', 'insole'), True)
Constraint 4 (True antecedent)	('outsole', 'below', 'midsole')('midsole', 'below', 'lining')	(('outsole', 'below', 'lining'), True)
Constraint 4 (True antecedent)	('vamp/upper', 'contains', 'lining')('lining', 'contains', 'insole')	(('vamp/upper', 'contains', 'insole'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('outsole', 'behind', 'heel'), False)	(('heel', 'in front of', 'outsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outsole', 'above', 'midsole'), False)	(('midsole', 'below', 'outsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outsole', 'above', 'welt'), False)	(('welt', 'below', 'outsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('midsole', 'above', 'insole'), False)	(('insole', 'below', 'midsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('midsole', 'above', 'lining'), False)	(('lining', 'below', 'midsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lining', 'inside', 'insole'), False)	(('insole', 'contains', 'lining'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vamp/upper', 'inside', 'lining'), False)	(('lining', 'contains', 'vamp/upper'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('insole', 'above', 'outsole'), True)	(('outsole', 'above', 'insole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lining', 'above', 'outsole'), True)	(('outsole', 'above', 'lining'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('insole', 'inside', 'vamp/upper'), True)	(('vamp/upper', 'inside', 'insole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('outsole', 'below', 'insole'), True)	(('insole', 'below', 'outsole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('outsole', 'below', 'lining'), True)	(('lining', 'below', 'outsole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('vamp/upper', 'contains', 'insole'), True)	(('insole', 'contains', 'vamp/upper'), False)
Round 3 ...
shoe worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('vamp/upper', 'connects', 'lacing'), True)	(('lacing', 'connects', 'vamp/upper'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lacing', 'above', 'tongue'), True)	(('tongue', 'above', 'lacing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lacing', 'above', 'tongue'), True)	(('tongue', 'below', 'lacing'), True)
Constraint 1: x rln y <-> y rln x	(('vamp/upper', 'connects', 'heel'), True)	(('heel', 'connects', 'vamp/upper'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lining', 'inside', 'vamp/upper'), True)	(('vamp/upper', 'inside', 'lining'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lining', 'inside', 'vamp/upper'), True)	(('vamp/upper', 'contains', 'lining'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lining', 'above', 'insole'), True)	(('insole', 'above', 'lining'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lining', 'above', 'insole'), True)	(('insole', 'below', 'lining'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lining', 'above', 'midsole'), True)	(('midsole', 'above', 'lining'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lining', 'above', 'midsole'), True)	(('midsole', 'below', 'lining'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lining', 'above', 'outsole'), True)	(('outsole', 'above', 'lining'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lining', 'above', 'outsole'), True)	(('outsole', 'below', 'lining'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('insole', 'above', 'midsole'), True)	(('midsole', 'above', 'insole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insole', 'above', 'midsole'), True)	(('midsole', 'below', 'insole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('midsole', 'above', 'outsole'), True)	(('outsole', 'above', 'midsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('midsole', 'above', 'outsole'), True)	(('outsole', 'below', 'midsole'), True)
Constraint 1: x rln y <-> y rln x	(('insole', 'connects', 'midsole'), True)	(('midsole', 'connects', 'insole'), True)
Constraint 1: x rln y <-> y rln x	(('midsole', 'connects', 'outsole'), True)	(('outsole', 'connects', 'midsole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('welt', 'above', 'outsole'), True)	(('outsole', 'above', 'welt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('welt', 'above', 'outsole'), True)	(('outsole', 'below', 'welt'), True)
Constraint 1: x rln y <-> y rln x	(('welt', 'next to', 'vamp/upper'), True)	(('vamp/upper', 'next to', 'welt'), True)
Constraint 4 (True antecedent)	('insole', 'above', 'midsole')('midsole', 'above', 'outsole')	(('insole', 'above', 'outsole'), True)
Constraint 4 (True antecedent)	('outsole', 'below', 'midsole')('midsole', 'below', 'insole')	(('outsole', 'below', 'insole'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('tongue', 'above', 'lacing'), False)	(('lacing', 'below', 'tongue'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('vamp/upper', 'inside', 'lining'), False)	(('lining', 'contains', 'vamp/upper'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insole', 'above', 'lining'), False)	(('lining', 'below', 'insole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('midsole', 'above', 'lining'), False)	(('lining', 'below', 'midsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outsole', 'above', 'lining'), False)	(('lining', 'below', 'outsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('midsole', 'above', 'insole'), False)	(('insole', 'below', 'midsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outsole', 'above', 'midsole'), False)	(('midsole', 'below', 'outsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outsole', 'above', 'welt'), False)	(('welt', 'below', 'outsole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('insole', 'above', 'outsole'), True)	(('outsole', 'above', 'insole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('outsole', 'below', 'insole'), True)	(('insole', 'below', 'outsole'), False)
Round 3 ...
shoe worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lacing', 'above', 'tongue'), True)	(('tongue', 'above', 'lacing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lacing', 'above', 'tongue'), True)	(('tongue', 'below', 'lacing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tongue', 'above', 'insole'), True)	(('insole', 'above', 'tongue'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tongue', 'above', 'insole'), True)	(('insole', 'below', 'tongue'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('insole', 'above', 'midsole'), True)	(('midsole', 'above', 'insole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insole', 'above', 'midsole'), True)	(('midsole', 'below', 'insole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('midsole', 'above', 'heel'), True)	(('heel', 'above', 'midsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('midsole', 'above', 'heel'), True)	(('heel', 'below', 'midsole'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('heel', 'part of', 'outsole'), True)	(('outsole', 'part of', 'heel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heel', 'part of', 'outsole'), True)	(('outsole', 'has part', 'heel'), True)
Constraint 4 (True antecedent)	('lacing', 'above', 'tongue')('tongue', 'above', 'insole')	(('lacing', 'above', 'insole'), True)
Constraint 4 (True antecedent)	('tongue', 'above', 'insole')('insole', 'above', 'midsole')	(('tongue', 'above', 'midsole'), True)
Constraint 4 (True antecedent)	('insole', 'above', 'midsole')('midsole', 'above', 'heel')	(('insole', 'above', 'heel'), True)
Constraint 4 (True antecedent)	('insole', 'below', 'tongue')('tongue', 'below', 'lacing')	(('insole', 'below', 'lacing'), True)
Constraint 4 (True antecedent)	('midsole', 'below', 'insole')('insole', 'below', 'tongue')	(('midsole', 'below', 'tongue'), True)
Constraint 4 (True antecedent)	('heel', 'below', 'midsole')('midsole', 'below', 'insole')	(('heel', 'below', 'insole'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('tongue', 'above', 'lacing'), False)	(('lacing', 'below', 'tongue'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insole', 'above', 'tongue'), False)	(('tongue', 'below', 'insole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('midsole', 'above', 'insole'), False)	(('insole', 'below', 'midsole'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('heel', 'above', 'midsole'), False)	(('midsole', 'below', 'heel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('outsole', 'part of', 'heel'), False)	(('heel', 'has part', 'outsole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lacing', 'above', 'insole'), True)	(('insole', 'above', 'lacing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tongue', 'above', 'midsole'), True)	(('midsole', 'above', 'tongue'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('insole', 'above', 'heel'), True)	(('heel', 'above', 'insole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('insole', 'below', 'lacing'), True)	(('lacing', 'below', 'insole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('midsole', 'below', 'tongue'), True)	(('tongue', 'below', 'midsole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heel', 'below', 'insole'), True)	(('insole', 'below', 'heel'), False)
Constraint 4 (True antecedent)	('lacing', 'above', 'tongue')('tongue', 'above', 'midsole')	(('lacing', 'above', 'midsole'), True)
Constraint 4 (True antecedent)	('lacing', 'above', 'insole')('insole', 'above', 'heel')	(('lacing', 'above', 'heel'), True)
Constraint 4 (True antecedent)	('tongue', 'above', 'insole')('insole', 'above', 'heel')	(('tongue', 'above', 'heel'), True)
Constraint 4 (True antecedent)	('midsole', 'below', 'insole')('insole', 'below', 'lacing')	(('midsole', 'below', 'lacing'), True)
Constraint 4 (True antecedent)	('heel', 'below', 'midsole')('midsole', 'below', 'tongue')	(('heel', 'below', 'tongue'), True)
Constraint 4 (True antecedent)	('heel', 'below', 'insole')('insole', 'below', 'lacing')	(('heel', 'below', 'lacing'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lacing', 'above', 'midsole'), True)	(('midsole', 'above', 'lacing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lacing', 'above', 'heel'), True)	(('heel', 'above', 'lacing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tongue', 'above', 'heel'), True)	(('heel', 'above', 'tongue'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('midsole', 'below', 'lacing'), True)	(('lacing', 'below', 'midsole'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heel', 'below', 'tongue'), True)	(('tongue', 'below', 'heel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('heel', 'below', 'lacing'), True)	(('lacing', 'below', 'heel'), False)
Round 4 ...
train worker_106...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tender', 'requires', 'firebox'), True)	(('firebox', 'requires', 'tender'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tender', 'requires', 'firebox'), True)	(('firebox', 'required by', 'tender'), True)
Constraint 1: x rln y <-> y rln x	(('firebox', 'connects', 'smokebox'), True)	(('smokebox', 'connects', 'firebox'), True)
Constraint 1: x rln y <-> y rln x	(('throttle', 'connects', 'steamdome'), True)	(('steamdome', 'connects', 'throttle'), True)
Constraint 1: x rln y <-> y rln x	(('steamdome', 'connects', 'drypipe'), True)	(('drypipe', 'connects', 'steamdome'), True)
Constraint 1: x rln y <-> y rln x	(('drypipe', 'connects', 'valve'), True)	(('valve', 'connects', 'drypipe'), True)
Constraint 1: x rln y <-> y rln x	(('valve', 'connects', 'piston'), True)	(('piston', 'connects', 'valve'), True)
Constraint 1: x rln y <-> y rln x	(('piston', 'connects', 'driving wheels'), True)	(('driving wheels', 'connects', 'piston'), True)
Constraint 1: x rln y <-> y rln x	(('driving wheels', 'connects', 'boiler'), True)	(('boiler', 'connects', 'driving wheels'), True)
Constraint 1: x rln y <-> y rln x	(('valve', 'connects', 'valve gear'), True)	(('valve gear', 'connects', 'valve'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('firebox', 'requires', 'tender'), False)	(('tender', 'required by', 'firebox'), False)
Round 3 ...
train worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tender', 'behind', 'firebox'), True)	(('firebox', 'behind', 'tender'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tender', 'behind', 'firebox'), True)	(('firebox', 'in front of', 'tender'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('firebox', 'above', 'boiler'), True)	(('boiler', 'above', 'firebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('firebox', 'above', 'boiler'), True)	(('boiler', 'below', 'firebox'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('driving wheels', 'above', 'boiler'), True)	(('boiler', 'above', 'driving wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('driving wheels', 'above', 'boiler'), True)	(('boiler', 'below', 'driving wheels'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'above', 'firebox'), True)	(('firebox', 'above', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'above', 'firebox'), True)	(('firebox', 'below', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'steamdome'), True)	(('steamdome', 'behind', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'behind', 'steamdome'), True)	(('steamdome', 'in front of', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('steamdome', 'above', 'dry pile'), True)	(('dry pile', 'above', 'steamdome'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steamdome', 'above', 'dry pile'), True)	(('dry pile', 'below', 'steamdome'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('steamdome', 'behind', 'driving wheels'), True)	(('driving wheels', 'behind', 'steamdome'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steamdome', 'behind', 'driving wheels'), True)	(('driving wheels', 'in front of', 'steamdome'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dry pile', 'above', 'valve gear'), True)	(('valve gear', 'above', 'dry pile'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dry pile', 'above', 'valve gear'), True)	(('valve gear', 'below', 'dry pile'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('valve gear', 'above', 'driving wheels'), True)	(('driving wheels', 'above', 'valve gear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve gear', 'above', 'driving wheels'), True)	(('driving wheels', 'below', 'valve gear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('driving wheels', 'behind', 'piston'), True)	(('piston', 'behind', 'driving wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('driving wheels', 'behind', 'piston'), True)	(('piston', 'in front of', 'driving wheels'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('valve gear', 'behind', 'valve'), True)	(('valve', 'behind', 'valve gear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve gear', 'behind', 'valve'), True)	(('valve', 'in front of', 'valve gear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dry pile', 'behind', 'smokebox'), True)	(('smokebox', 'behind', 'dry pile'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dry pile', 'behind', 'smokebox'), True)	(('smokebox', 'in front of', 'dry pile'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('smokebox', 'above', 'valve'), True)	(('valve', 'above', 'smokebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('smokebox', 'above', 'valve'), True)	(('valve', 'below', 'smokebox'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('valve', 'above', 'piston'), True)	(('piston', 'above', 'valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve', 'above', 'piston'), True)	(('piston', 'below', 'valve'), True)
Constraint 4 (True antecedent)	('throttle', 'above', 'firebox')('firebox', 'above', 'boiler')	(('throttle', 'above', 'boiler'), True)
Constraint 4 (True antecedent)	('throttle', 'behind', 'steamdome')('steamdome', 'behind', 'driving wheels')	(('throttle', 'behind', 'driving wheels'), True)
Constraint 4 (True antecedent)	('steamdome', 'above', 'dry pile')('dry pile', 'above', 'valve gear')	(('steamdome', 'above', 'valve gear'), True)
Constraint 4 (True antecedent)	('steamdome', 'behind', 'driving wheels')('driving wheels', 'behind', 'piston')	(('steamdome', 'behind', 'piston'), True)
Constraint 4 (True antecedent)	('dry pile', 'above', 'valve gear')('valve gear', 'above', 'driving wheels')	(('dry pile', 'above', 'driving wheels'), True)
Constraint 4 (True antecedent)	('valve gear', 'above', 'driving wheels')('driving wheels', 'above', 'boiler')	(('valve gear', 'above', 'boiler'), True)
Constraint 4 (True antecedent)	('smokebox', 'above', 'valve')('valve', 'above', 'piston')	(('smokebox', 'above', 'piston'), True)
Constraint 4 (True antecedent)	('boiler', 'below', 'firebox')('firebox', 'below', 'throttle')	(('boiler', 'below', 'throttle'), True)
Constraint 4 (True antecedent)	('boiler', 'below', 'driving wheels')('driving wheels', 'below', 'valve gear')	(('boiler', 'below', 'valve gear'), True)
Constraint 4 (True antecedent)	('driving wheels', 'in front of', 'steamdome')('steamdome', 'in front of', 'throttle')	(('driving wheels', 'in front of', 'throttle'), True)
Constraint 4 (True antecedent)	('valve gear', 'below', 'dry pile')('dry pile', 'below', 'steamdome')	(('valve gear', 'below', 'steamdome'), True)
Constraint 4 (True antecedent)	('driving wheels', 'below', 'valve gear')('valve gear', 'below', 'dry pile')	(('driving wheels', 'below', 'dry pile'), True)
Constraint 4 (True antecedent)	('piston', 'in front of', 'driving wheels')('driving wheels', 'in front of', 'steamdome')	(('piston', 'in front of', 'steamdome'), True)
Constraint 4 (True antecedent)	('piston', 'below', 'valve')('valve', 'below', 'smokebox')	(('piston', 'below', 'smokebox'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('firebox', 'behind', 'tender'), False)	(('tender', 'in front of', 'firebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('boiler', 'above', 'firebox'), False)	(('firebox', 'below', 'boiler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('boiler', 'above', 'driving wheels'), False)	(('driving wheels', 'below', 'boiler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('firebox', 'above', 'throttle'), False)	(('throttle', 'below', 'firebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steamdome', 'behind', 'throttle'), False)	(('throttle', 'in front of', 'steamdome'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dry pile', 'above', 'steamdome'), False)	(('steamdome', 'below', 'dry pile'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('driving wheels', 'behind', 'steamdome'), False)	(('steamdome', 'in front of', 'driving wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve gear', 'above', 'dry pile'), False)	(('dry pile', 'below', 'valve gear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('driving wheels', 'above', 'valve gear'), False)	(('valve gear', 'below', 'driving wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('piston', 'behind', 'driving wheels'), False)	(('driving wheels', 'in front of', 'piston'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve', 'behind', 'valve gear'), False)	(('valve gear', 'in front of', 'valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('smokebox', 'behind', 'dry pile'), False)	(('dry pile', 'in front of', 'smokebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve', 'above', 'smokebox'), False)	(('smokebox', 'below', 'valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('piston', 'above', 'valve'), False)	(('valve', 'below', 'piston'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'above', 'boiler'), True)	(('boiler', 'above', 'throttle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'driving wheels'), True)	(('driving wheels', 'behind', 'throttle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('steamdome', 'above', 'valve gear'), True)	(('valve gear', 'above', 'steamdome'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('steamdome', 'behind', 'piston'), True)	(('piston', 'behind', 'steamdome'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('dry pile', 'above', 'driving wheels'), True)	(('driving wheels', 'above', 'dry pile'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('valve gear', 'above', 'boiler'), True)	(('boiler', 'above', 'valve gear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('smokebox', 'above', 'piston'), True)	(('piston', 'above', 'smokebox'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('boiler', 'below', 'throttle'), True)	(('throttle', 'below', 'boiler'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('boiler', 'below', 'valve gear'), True)	(('valve gear', 'below', 'boiler'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('driving wheels', 'in front of', 'throttle'), True)	(('throttle', 'in front of', 'driving wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('valve gear', 'below', 'steamdome'), True)	(('steamdome', 'below', 'valve gear'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('driving wheels', 'below', 'dry pile'), True)	(('dry pile', 'below', 'driving wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('piston', 'in front of', 'steamdome'), True)	(('steamdome', 'in front of', 'piston'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('piston', 'below', 'smokebox'), True)	(('smokebox', 'below', 'piston'), False)
Constraint 4 (True antecedent)	('throttle', 'behind', 'steamdome')('steamdome', 'behind', 'piston')	(('throttle', 'behind', 'piston'), True)
Constraint 4 (True antecedent)	('steamdome', 'above', 'dry pile')('dry pile', 'above', 'driving wheels')	(('steamdome', 'above', 'driving wheels'), True)
Constraint 4 (True antecedent)	('steamdome', 'above', 'valve gear')('valve gear', 'above', 'boiler')	(('steamdome', 'above', 'boiler'), True)
Constraint 4 (True antecedent)	('dry pile', 'above', 'valve gear')('valve gear', 'above', 'boiler')	(('dry pile', 'above', 'boiler'), True)
Constraint 4 (True antecedent)	('boiler', 'below', 'driving wheels')('driving wheels', 'below', 'dry pile')	(('boiler', 'below', 'dry pile'), True)
Constraint 4 (True antecedent)	('boiler', 'below', 'valve gear')('valve gear', 'below', 'steamdome')	(('boiler', 'below', 'steamdome'), True)
Constraint 4 (True antecedent)	('driving wheels', 'below', 'valve gear')('valve gear', 'below', 'steamdome')	(('driving wheels', 'below', 'steamdome'), True)
Constraint 4 (True antecedent)	('piston', 'in front of', 'driving wheels')('driving wheels', 'in front of', 'throttle')	(('piston', 'in front of', 'throttle'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'piston'), True)	(('piston', 'behind', 'throttle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('steamdome', 'above', 'driving wheels'), True)	(('driving wheels', 'above', 'steamdome'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('steamdome', 'above', 'boiler'), True)	(('boiler', 'above', 'steamdome'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('dry pile', 'above', 'boiler'), True)	(('boiler', 'above', 'dry pile'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('boiler', 'below', 'dry pile'), True)	(('dry pile', 'below', 'boiler'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('boiler', 'below', 'steamdome'), True)	(('steamdome', 'below', 'boiler'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('driving wheels', 'below', 'steamdome'), True)	(('steamdome', 'below', 'driving wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('piston', 'in front of', 'throttle'), True)	(('throttle', 'in front of', 'piston'), False)
Round 4 ...
train worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tender', 'behind', 'firebox'), True)	(('firebox', 'behind', 'tender'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tender', 'behind', 'firebox'), True)	(('firebox', 'in front of', 'tender'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('firebox', 'behind', 'throttle'), True)	(('throttle', 'behind', 'firebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('firebox', 'behind', 'throttle'), True)	(('throttle', 'in front of', 'firebox'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('firebox', 'part of', 'boiler'), True)	(('boiler', 'part of', 'firebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('firebox', 'part of', 'boiler'), True)	(('boiler', 'has part', 'firebox'), True)
Constraint 1: x rln y <-> y rln x	(('throttle', 'next to', 'steamdome'), True)	(('steamdome', 'next to', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('steam dome', 'above', 'boiler'), True)	(('boiler', 'above', 'steam dome'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('steam dome', 'above', 'boiler'), True)	(('boiler', 'below', 'steam dome'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('dry pipe', 'above', 'boiler'), True)	(('boiler', 'above', 'dry pipe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dry pipe', 'above', 'boiler'), True)	(('boiler', 'below', 'dry pipe'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('valve bear', 'part of', 'boiler'), True)	(('boiler', 'part of', 'valve bear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve bear', 'part of', 'boiler'), True)	(('boiler', 'has part', 'valve bear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('driving wheels', 'part of', 'boiler'), True)	(('boiler', 'part of', 'driving wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('driving wheels', 'part of', 'boiler'), True)	(('boiler', 'has part', 'driving wheels'), True)
Constraint 1: x rln y <-> y rln x	(('steam dome', 'next to', 'dry pipe'), True)	(('dry pipe', 'next to', 'steam dome'), True)
Constraint 1: x rln y <-> y rln x	(('dry pipe', 'next to', 'smokebox'), True)	(('smokebox', 'next to', 'dry pipe'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('smokebox', 'above', 'dry pipe'), True)	(('dry pipe', 'above', 'smokebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('smokebox', 'above', 'dry pipe'), True)	(('dry pipe', 'below', 'smokebox'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('smokebox', 'above', 'valve'), True)	(('valve', 'above', 'smokebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('smokebox', 'above', 'valve'), True)	(('valve', 'below', 'smokebox'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('valve', 'above', 'piston'), True)	(('piston', 'above', 'valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve', 'above', 'piston'), True)	(('piston', 'below', 'valve'), True)
Constraint 4 (True antecedent)	('tender', 'behind', 'firebox')('firebox', 'behind', 'throttle')	(('tender', 'behind', 'throttle'), True)
Constraint 4 (True antecedent)	('smokebox', 'above', 'dry pipe')('dry pipe', 'above', 'boiler')	(('smokebox', 'above', 'boiler'), True)
Constraint 4 (True antecedent)	('smokebox', 'above', 'valve')('valve', 'above', 'piston')	(('smokebox', 'above', 'piston'), True)
Constraint 4 (True antecedent)	('throttle', 'in front of', 'firebox')('firebox', 'in front of', 'tender')	(('throttle', 'in front of', 'tender'), True)
Constraint 4 (True antecedent)	('boiler', 'below', 'dry pipe')('dry pipe', 'below', 'smokebox')	(('boiler', 'below', 'smokebox'), True)
Constraint 4 (True antecedent)	('piston', 'below', 'valve')('valve', 'below', 'smokebox')	(('piston', 'below', 'smokebox'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('firebox', 'behind', 'tender'), False)	(('tender', 'in front of', 'firebox'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'behind', 'firebox'), False)	(('firebox', 'in front of', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('boiler', 'part of', 'firebox'), False)	(('firebox', 'has part', 'boiler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('boiler', 'above', 'steam dome'), False)	(('steam dome', 'below', 'boiler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('boiler', 'above', 'dry pipe'), False)	(('dry pipe', 'below', 'boiler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('boiler', 'part of', 'valve bear'), False)	(('valve bear', 'has part', 'boiler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('boiler', 'part of', 'driving wheels'), False)	(('driving wheels', 'has part', 'boiler'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('dry pipe', 'above', 'smokebox'), False)	(('smokebox', 'below', 'dry pipe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('valve', 'above', 'smokebox'), False)	(('smokebox', 'below', 'valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('piston', 'above', 'valve'), False)	(('valve', 'below', 'piston'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tender', 'behind', 'throttle'), True)	(('throttle', 'behind', 'tender'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('smokebox', 'above', 'boiler'), True)	(('boiler', 'above', 'smokebox'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('smokebox', 'above', 'piston'), True)	(('piston', 'above', 'smokebox'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'in front of', 'tender'), True)	(('tender', 'in front of', 'throttle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('boiler', 'below', 'smokebox'), True)	(('smokebox', 'below', 'boiler'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('piston', 'below', 'smokebox'), True)	(('smokebox', 'below', 'piston'), False)
Round 3 ...
umbrella worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('ribs', 'part of', 'canopy'), True)	(('canopy', 'part of', 'ribs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ribs', 'part of', 'canopy'), True)	(('canopy', 'has part', 'ribs'), True)
Constraint 1: x rln y <-> y rln x	(('ribs', 'connects', 'stretchers'), True)	(('stretchers', 'connects', 'ribs'), True)
Constraint 1: x rln y <-> y rln x	(('stretchers', 'connects', 'shaft'), True)	(('shaft', 'connects', 'stretchers'), True)
Constraint 1: x rln y <-> y rln x	(('canopy', 'connects', 'shaft'), True)	(('shaft', 'connects', 'canopy'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'part of', 'shaft'), True)	(('shaft', 'part of', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'shaft'), True)	(('shaft', 'has part', 'handle'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('canopy', 'part of', 'ribs'), False)	(('ribs', 'has part', 'canopy'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shaft', 'part of', 'handle'), False)	(('handle', 'has part', 'shaft'), False)
Round 3 ...
umbrella worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'ribs'), True)	(('ribs', 'above', 'canopy'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('canopy', 'above', 'ribs'), True)	(('ribs', 'below', 'canopy'), True)
Constraint 1: x rln y <-> y rln x	(('ribs', 'connects', 'canopy'), True)	(('canopy', 'connects', 'ribs'), True)
Constraint 1: x rln y <-> y rln x	(('ribs', 'connects', 'stretchers'), True)	(('stretchers', 'connects', 'ribs'), True)
Constraint 1: x rln y <-> y rln x	(('stretchers', 'connects', 'shaft'), True)	(('shaft', 'connects', 'stretchers'), True)
Constraint 1: x rln y <-> y rln x	(('shaft', 'connects', 'handle'), True)	(('handle', 'connects', 'shaft'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shaft', 'above', 'handle'), True)	(('handle', 'above', 'shaft'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shaft', 'above', 'handle'), True)	(('handle', 'below', 'shaft'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('ribs', 'above', 'canopy'), False)	(('canopy', 'below', 'ribs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'shaft'), False)	(('shaft', 'below', 'handle'), False)
Round 3 ...
umbrella worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('canopy', 'above', 'stretchers'), True)	(('stretchers', 'above', 'canopy'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('canopy', 'above', 'stretchers'), True)	(('stretchers', 'below', 'canopy'), True)
Constraint 1: x rln y <-> y rln x	(('stretchers', 'connects', 'ribs'), True)	(('ribs', 'connects', 'stretchers'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ribs', 'above', 'shaft'), True)	(('shaft', 'above', 'ribs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ribs', 'above', 'shaft'), True)	(('shaft', 'below', 'ribs'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shaft', 'above', 'handle'), True)	(('handle', 'above', 'shaft'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shaft', 'above', 'handle'), True)	(('handle', 'below', 'shaft'), True)
Constraint 4 (True antecedent)	('ribs', 'above', 'shaft')('shaft', 'above', 'handle')	(('ribs', 'above', 'handle'), True)
Constraint 4 (True antecedent)	('handle', 'below', 'shaft')('shaft', 'below', 'ribs')	(('handle', 'below', 'ribs'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('stretchers', 'above', 'canopy'), False)	(('canopy', 'below', 'stretchers'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shaft', 'above', 'ribs'), False)	(('ribs', 'below', 'shaft'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'shaft'), False)	(('shaft', 'below', 'handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ribs', 'above', 'handle'), True)	(('handle', 'above', 'ribs'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'below', 'ribs'), True)	(('ribs', 'below', 'handle'), False)
Round 3 ...
airplane worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('flight deck', 'behind', 'nose'), True)	(('nose', 'behind', 'flight deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flight deck', 'behind', 'nose'), True)	(('nose', 'in front of', 'flight deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'behind', 'flight deck'), True)	(('flight deck', 'behind', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'behind', 'flight deck'), True)	(('flight deck', 'in front of', 'fuselage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'behind', 'flight deck'), True)	(('flight deck', 'behind', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'behind', 'flight deck'), True)	(('flight deck', 'in front of', 'cabin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'above', 'cabin'), True)	(('cabin', 'above', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'above', 'cabin'), True)	(('cabin', 'below', 'fuselage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flight deck', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'flight deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flight deck', 'above', 'undercarriage'), True)	(('undercarriage', 'below', 'flight deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('jet engine', 'behind', 'undercarriage'), True)	(('undercarriage', 'behind', 'jet engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('jet engine', 'behind', 'undercarriage'), True)	(('undercarriage', 'in front of', 'jet engine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'above', 'jet engine'), True)	(('jet engine', 'above', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'above', 'jet engine'), True)	(('jet engine', 'below', 'cabin'), True)
Constraint 1: x rln y <-> y rln x	(('cabin', 'connects', 'wing'), True)	(('wing', 'connects', 'cabin'), True)
Constraint 1: x rln y <-> y rln x	(('cabin', 'next to', 'wing'), True)	(('wing', 'next to', 'cabin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hold', 'behind', 'cabin'), True)	(('cabin', 'behind', 'hold'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hold', 'behind', 'cabin'), True)	(('cabin', 'in front of', 'hold'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'above', 'hold'), True)	(('hold', 'above', 'fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fin', 'above', 'hold'), True)	(('hold', 'below', 'fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'above', 'tail'), True)	(('tail', 'above', 'fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fin', 'above', 'tail'), True)	(('tail', 'below', 'fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'hold'), True)	(('hold', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'hold'), True)	(('hold', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'tailplane'), True)	(('tailplane', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'tailplane'), True)	(('tailplane', 'in front of', 'tail'), True)
Constraint 1: x rln y <-> y rln x	(('hold', 'next to', 'tailplane'), True)	(('tailplane', 'next to', 'hold'), True)
Constraint 4 (True antecedent)	('fuselage', 'behind', 'flight deck')('flight deck', 'behind', 'nose')	(('fuselage', 'behind', 'nose'), True)
Constraint 4 (True antecedent)	('cabin', 'behind', 'flight deck')('flight deck', 'behind', 'nose')	(('cabin', 'behind', 'nose'), True)
Constraint 4 (True antecedent)	('fuselage', 'above', 'cabin')('cabin', 'above', 'jet engine')	(('fuselage', 'above', 'jet engine'), True)
Constraint 4 (True antecedent)	('hold', 'behind', 'cabin')('cabin', 'behind', 'flight deck')	(('hold', 'behind', 'flight deck'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'hold')('hold', 'behind', 'cabin')	(('tail', 'behind', 'cabin'), True)
Constraint 4 (True antecedent)	('nose', 'in front of', 'flight deck')('flight deck', 'in front of', 'fuselage')	(('nose', 'in front of', 'fuselage'), True)
Constraint 4 (True antecedent)	('nose', 'in front of', 'flight deck')('flight deck', 'in front of', 'cabin')	(('nose', 'in front of', 'cabin'), True)
Constraint 4 (True antecedent)	('flight deck', 'in front of', 'cabin')('cabin', 'in front of', 'hold')	(('flight deck', 'in front of', 'hold'), True)
Constraint 4 (True antecedent)	('jet engine', 'below', 'cabin')('cabin', 'below', 'fuselage')	(('jet engine', 'below', 'fuselage'), True)
Constraint 4 (True antecedent)	('cabin', 'in front of', 'hold')('hold', 'in front of', 'tail')	(('cabin', 'in front of', 'tail'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'behind', 'flight deck'), False)	(('flight deck', 'in front of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flight deck', 'behind', 'fuselage'), False)	(('fuselage', 'in front of', 'flight deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flight deck', 'behind', 'cabin'), False)	(('cabin', 'in front of', 'flight deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'above', 'fuselage'), False)	(('fuselage', 'below', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('undercarriage', 'above', 'flight deck'), False)	(('flight deck', 'below', 'undercarriage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('undercarriage', 'behind', 'jet engine'), False)	(('jet engine', 'in front of', 'undercarriage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('jet engine', 'above', 'cabin'), False)	(('cabin', 'below', 'jet engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'behind', 'hold'), False)	(('hold', 'in front of', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hold', 'above', 'fin'), False)	(('fin', 'below', 'hold'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'fin'), False)	(('fin', 'below', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hold', 'behind', 'tail'), False)	(('tail', 'in front of', 'hold'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tailplane', 'behind', 'tail'), False)	(('tail', 'in front of', 'tailplane'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'behind', 'nose'), True)	(('nose', 'behind', 'fuselage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'behind', 'nose'), True)	(('nose', 'behind', 'cabin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'above', 'jet engine'), True)	(('jet engine', 'above', 'fuselage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hold', 'behind', 'flight deck'), True)	(('flight deck', 'behind', 'hold'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'cabin'), True)	(('cabin', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'in front of', 'fuselage'), True)	(('fuselage', 'in front of', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'in front of', 'cabin'), True)	(('cabin', 'in front of', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flight deck', 'in front of', 'hold'), True)	(('hold', 'in front of', 'flight deck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('jet engine', 'below', 'fuselage'), True)	(('fuselage', 'below', 'jet engine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'in front of', 'tail'), True)	(('tail', 'in front of', 'cabin'), False)
Constraint 4 (True antecedent)	('hold', 'behind', 'cabin')('cabin', 'behind', 'nose')	(('hold', 'behind', 'nose'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'hold')('hold', 'behind', 'flight deck')	(('tail', 'behind', 'flight deck'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'cabin')('cabin', 'behind', 'nose')	(('tail', 'behind', 'nose'), True)
Constraint 4 (True antecedent)	('nose', 'in front of', 'flight deck')('flight deck', 'in front of', 'hold')	(('nose', 'in front of', 'hold'), True)
Constraint 4 (True antecedent)	('nose', 'in front of', 'cabin')('cabin', 'in front of', 'tail')	(('nose', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('flight deck', 'in front of', 'cabin')('cabin', 'in front of', 'tail')	(('flight deck', 'in front of', 'tail'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('hold', 'behind', 'nose'), True)	(('nose', 'behind', 'hold'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'flight deck'), True)	(('flight deck', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'nose'), True)	(('nose', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'in front of', 'hold'), True)	(('hold', 'in front of', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'in front of', 'tail'), True)	(('tail', 'in front of', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('flight deck', 'in front of', 'tail'), True)	(('tail', 'in front of', 'flight deck'), False)
Round 4 ...
airplane worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('flight deck', 'behind', 'nose'), True)	(('nose', 'behind', 'flight deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flight deck', 'behind', 'nose'), True)	(('nose', 'in front of', 'flight deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'undercarriage'), True)	(('undercarriage', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('flight deck', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'flight deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flight deck', 'above', 'undercarriage'), True)	(('undercarriage', 'below', 'flight deck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'behind', 'flight deck'), True)	(('flight deck', 'behind', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'behind', 'flight deck'), True)	(('flight deck', 'in front of', 'fuselage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'above', 'jet engine'), True)	(('jet engine', 'above', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'above', 'jet engine'), True)	(('jet engine', 'below', 'fuselage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'above', 'cabin'), True)	(('cabin', 'above', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'above', 'cabin'), True)	(('cabin', 'below', 'fuselage'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'above', 'jet engine'), True)	(('jet engine', 'above', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'above', 'jet engine'), True)	(('jet engine', 'below', 'cabin'), True)
Constraint 1: x rln y <-> y rln x	(('cabin', 'connects', 'tail'), True)	(('tail', 'connects', 'cabin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'above', 'wing'), True)	(('wing', 'above', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'above', 'wing'), True)	(('wing', 'below', 'cabin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'behind', 'cabin'), True)	(('cabin', 'behind', 'fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fin', 'behind', 'cabin'), True)	(('cabin', 'in front of', 'fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'above', 'tail'), True)	(('tail', 'above', 'fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fin', 'above', 'tail'), True)	(('tail', 'below', 'fin'), True)
Constraint 1: x rln y <-> y rln x	(('tail', 'next to', 'tailplane'), True)	(('tailplane', 'next to', 'tail'), True)
Constraint 4 (True antecedent)	('fuselage', 'behind', 'flight deck')('flight deck', 'behind', 'nose')	(('fuselage', 'behind', 'nose'), True)
Constraint 4 (True antecedent)	('fuselage', 'above', 'cabin')('cabin', 'above', 'wing')	(('fuselage', 'above', 'wing'), True)
Constraint 4 (True antecedent)	('nose', 'in front of', 'flight deck')('flight deck', 'in front of', 'fuselage')	(('nose', 'in front of', 'fuselage'), True)
Constraint 4 (True antecedent)	('wing', 'below', 'cabin')('cabin', 'below', 'fuselage')	(('wing', 'below', 'fuselage'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'behind', 'flight deck'), False)	(('flight deck', 'in front of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('undercarriage', 'above', 'nose'), False)	(('nose', 'below', 'undercarriage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('undercarriage', 'above', 'flight deck'), False)	(('flight deck', 'below', 'undercarriage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('flight deck', 'behind', 'fuselage'), False)	(('fuselage', 'in front of', 'flight deck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('jet engine', 'above', 'fuselage'), False)	(('fuselage', 'below', 'jet engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'above', 'fuselage'), False)	(('fuselage', 'below', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('jet engine', 'above', 'cabin'), False)	(('cabin', 'below', 'jet engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wing', 'above', 'cabin'), False)	(('cabin', 'below', 'wing'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'behind', 'fin'), False)	(('fin', 'in front of', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'fin'), False)	(('fin', 'below', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'behind', 'nose'), True)	(('nose', 'behind', 'fuselage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'above', 'wing'), True)	(('wing', 'above', 'fuselage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'in front of', 'fuselage'), True)	(('fuselage', 'in front of', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wing', 'below', 'fuselage'), True)	(('fuselage', 'below', 'wing'), False)
Round 3 ...
airplane worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'above', 'fuselage'), True)	(('fuselage', 'above', 'fin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fin', 'above', 'fuselage'), True)	(('fuselage', 'below', 'fin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'body'), True)	(('body', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'body'), True)	(('body', 'below', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'above', 'body'), True)	(('body', 'above', 'cabin'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'above', 'body'), True)	(('body', 'below', 'cabin'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hold', 'above', 'jet engine'), True)	(('jet engine', 'above', 'hold'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hold', 'above', 'jet engine'), True)	(('jet engine', 'below', 'hold'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'jet engine'), True)	(('jet engine', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'jet engine'), True)	(('jet engine', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('jet engine', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'jet engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('jet engine', 'above', 'undercarriage'), True)	(('undercarriage', 'below', 'jet engine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'above', 'cabin'), True)	(('cabin', 'above', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'above', 'cabin'), True)	(('cabin', 'below', 'fuselage'), True)
Constraint 4 (True antecedent)	('fin', 'above', 'fuselage')('fuselage', 'above', 'cabin')	(('fin', 'above', 'cabin'), True)
Constraint 4 (True antecedent)	('nose', 'above', 'body')('body', 'above', 'jet engine')	(('nose', 'above', 'jet engine'), True)
Constraint 4 (True antecedent)	('cabin', 'above', 'body')('body', 'above', 'jet engine')	(('cabin', 'above', 'jet engine'), True)
Constraint 4 (True antecedent)	('hold', 'above', 'jet engine')('jet engine', 'above', 'undercarriage')	(('hold', 'above', 'undercarriage'), True)
Constraint 4 (True antecedent)	('body', 'above', 'jet engine')('jet engine', 'above', 'undercarriage')	(('body', 'above', 'undercarriage'), True)
Constraint 4 (True antecedent)	('fuselage', 'above', 'cabin')('cabin', 'above', 'body')	(('fuselage', 'above', 'body'), True)
Constraint 4 (True antecedent)	('body', 'below', 'cabin')('cabin', 'below', 'fuselage')	(('body', 'below', 'fuselage'), True)
Constraint 4 (True antecedent)	('jet engine', 'below', 'body')('body', 'below', 'nose')	(('jet engine', 'below', 'nose'), True)
Constraint 4 (True antecedent)	('jet engine', 'below', 'body')('body', 'below', 'cabin')	(('jet engine', 'below', 'cabin'), True)
Constraint 4 (True antecedent)	('undercarriage', 'below', 'jet engine')('jet engine', 'below', 'hold')	(('undercarriage', 'below', 'hold'), True)
Constraint 4 (True antecedent)	('undercarriage', 'below', 'jet engine')('jet engine', 'below', 'body')	(('undercarriage', 'below', 'body'), True)
Constraint 4 (True antecedent)	('cabin', 'below', 'fuselage')('fuselage', 'below', 'fin')	(('cabin', 'below', 'fin'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('fuselage', 'above', 'fin'), False)	(('fin', 'below', 'fuselage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'nose'), False)	(('nose', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'cabin'), False)	(('cabin', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('jet engine', 'above', 'hold'), False)	(('hold', 'below', 'jet engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('jet engine', 'above', 'body'), False)	(('body', 'below', 'jet engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('undercarriage', 'above', 'jet engine'), False)	(('jet engine', 'below', 'undercarriage'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cabin', 'above', 'fuselage'), False)	(('fuselage', 'below', 'cabin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'above', 'cabin'), True)	(('cabin', 'above', 'fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'jet engine'), True)	(('jet engine', 'above', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'above', 'jet engine'), True)	(('jet engine', 'above', 'cabin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hold', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'hold'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'above', 'body'), True)	(('body', 'above', 'fuselage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'fuselage'), True)	(('fuselage', 'below', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('jet engine', 'below', 'nose'), True)	(('nose', 'below', 'jet engine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('jet engine', 'below', 'cabin'), True)	(('cabin', 'below', 'jet engine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('undercarriage', 'below', 'hold'), True)	(('hold', 'below', 'undercarriage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('undercarriage', 'below', 'body'), True)	(('body', 'below', 'undercarriage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'below', 'fin'), True)	(('fin', 'below', 'cabin'), False)
Constraint 4 (True antecedent)	('fin', 'above', 'fuselage')('fuselage', 'above', 'body')	(('fin', 'above', 'body'), True)
Constraint 4 (True antecedent)	('fin', 'above', 'cabin')('cabin', 'above', 'jet engine')	(('fin', 'above', 'jet engine'), True)
Constraint 4 (True antecedent)	('nose', 'above', 'body')('body', 'above', 'undercarriage')	(('nose', 'above', 'undercarriage'), True)
Constraint 4 (True antecedent)	('cabin', 'above', 'body')('body', 'above', 'undercarriage')	(('cabin', 'above', 'undercarriage'), True)
Constraint 4 (True antecedent)	('fuselage', 'above', 'cabin')('cabin', 'above', 'jet engine')	(('fuselage', 'above', 'jet engine'), True)
Constraint 4 (True antecedent)	('fuselage', 'above', 'body')('body', 'above', 'undercarriage')	(('fuselage', 'above', 'undercarriage'), True)
Constraint 4 (True antecedent)	('body', 'below', 'cabin')('cabin', 'below', 'fin')	(('body', 'below', 'fin'), True)
Constraint 4 (True antecedent)	('jet engine', 'below', 'body')('body', 'below', 'fuselage')	(('jet engine', 'below', 'fuselage'), True)
Constraint 4 (True antecedent)	('jet engine', 'below', 'cabin')('cabin', 'below', 'fin')	(('jet engine', 'below', 'fin'), True)
Constraint 4 (True antecedent)	('undercarriage', 'below', 'jet engine')('jet engine', 'below', 'nose')	(('undercarriage', 'below', 'nose'), True)
Constraint 4 (True antecedent)	('undercarriage', 'below', 'jet engine')('jet engine', 'below', 'cabin')	(('undercarriage', 'below', 'cabin'), True)
Constraint 4 (True antecedent)	('undercarriage', 'below', 'body')('body', 'below', 'fuselage')	(('undercarriage', 'below', 'fuselage'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'above', 'body'), True)	(('body', 'above', 'fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'above', 'jet engine'), True)	(('jet engine', 'above', 'fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'nose'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cabin', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'cabin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'above', 'jet engine'), True)	(('jet engine', 'above', 'fuselage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fuselage', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'fuselage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'fin'), True)	(('fin', 'below', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('jet engine', 'below', 'fuselage'), True)	(('fuselage', 'below', 'jet engine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('jet engine', 'below', 'fin'), True)	(('fin', 'below', 'jet engine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('undercarriage', 'below', 'nose'), True)	(('nose', 'below', 'undercarriage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('undercarriage', 'below', 'cabin'), True)	(('cabin', 'below', 'undercarriage'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('undercarriage', 'below', 'fuselage'), True)	(('fuselage', 'below', 'undercarriage'), False)
Constraint 4 (True antecedent)	('fin', 'above', 'fuselage')('fuselage', 'above', 'undercarriage')	(('fin', 'above', 'undercarriage'), True)
Constraint 4 (True antecedent)	('undercarriage', 'below', 'jet engine')('jet engine', 'below', 'fin')	(('undercarriage', 'below', 'fin'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('fin', 'above', 'undercarriage'), True)	(('undercarriage', 'above', 'fin'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('undercarriage', 'below', 'fin'), True)	(('fin', 'below', 'undercarriage'), False)
Round 5 ...
baby bottle worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nipple', 'inside', 'cap'), True)	(('cap', 'inside', 'nipple'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nipple', 'inside', 'cap'), True)	(('cap', 'contains', 'nipple'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nipple', 'above', 'sealing disk'), True)	(('sealing disk', 'above', 'nipple'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nipple', 'above', 'sealing disk'), True)	(('sealing disk', 'below', 'nipple'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nipple', 'above', 'bottle'), True)	(('bottle', 'above', 'nipple'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nipple', 'above', 'bottle'), True)	(('bottle', 'below', 'nipple'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'surrounds', 'nipple'), True)	(('nipple', 'surrounds', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'surrounds', 'nipple'), True)	(('nipple', 'surrounded by', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'above', 'screw ring'), True)	(('screw ring', 'above', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'above', 'screw ring'), True)	(('screw ring', 'below', 'cap'), True)
Constraint 1: x rln y <-> y rln x	(('screw ring', 'connects', 'cap'), True)	(('cap', 'connects', 'screw ring'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('screw ring', 'surrounds', 'sealing disk'), True)	(('sealing disk', 'surrounds', 'screw ring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screw ring', 'surrounds', 'sealing disk'), True)	(('sealing disk', 'surrounded by', 'screw ring'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('screw ring', 'surrounds', 'bottle'), True)	(('bottle', 'surrounds', 'screw ring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screw ring', 'surrounds', 'bottle'), True)	(('bottle', 'surrounded by', 'screw ring'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('screw ring', 'above', 'bottle'), True)	(('bottle', 'above', 'screw ring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screw ring', 'above', 'bottle'), True)	(('bottle', 'below', 'screw ring'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sealing disk', 'above', 'bottle'), True)	(('bottle', 'above', 'sealing disk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sealing disk', 'above', 'bottle'), True)	(('bottle', 'below', 'sealing disk'), True)
Constraint 1: x rln y <-> y rln x	(('bottle', 'connects', 'sealing disk'), True)	(('sealing disk', 'connects', 'bottle'), True)
Constraint 4 (True antecedent)	('cap', 'above', 'screw ring')('screw ring', 'above', 'bottle')	(('cap', 'above', 'bottle'), True)
Constraint 4 (True antecedent)	('bottle', 'below', 'screw ring')('screw ring', 'below', 'cap')	(('bottle', 'below', 'cap'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'inside', 'nipple'), False)	(('nipple', 'contains', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sealing disk', 'above', 'nipple'), False)	(('nipple', 'below', 'sealing disk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottle', 'above', 'nipple'), False)	(('nipple', 'below', 'bottle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nipple', 'surrounds', 'cap'), False)	(('cap', 'surrounded by', 'nipple'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screw ring', 'above', 'cap'), False)	(('cap', 'below', 'screw ring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sealing disk', 'surrounds', 'screw ring'), False)	(('screw ring', 'surrounded by', 'sealing disk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottle', 'surrounds', 'screw ring'), False)	(('screw ring', 'surrounded by', 'bottle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottle', 'above', 'screw ring'), False)	(('screw ring', 'below', 'bottle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottle', 'above', 'sealing disk'), False)	(('sealing disk', 'below', 'bottle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'above', 'bottle'), True)	(('bottle', 'above', 'cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottle', 'below', 'cap'), True)	(('cap', 'below', 'bottle'), False)
Round 3 ...
baby bottle worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'above', 'nipple'), True)	(('nipple', 'above', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'above', 'nipple'), True)	(('nipple', 'below', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'surrounds', 'nipple'), True)	(('nipple', 'surrounds', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'surrounds', 'nipple'), True)	(('nipple', 'surrounded by', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nipple', 'above', 'screw ring'), True)	(('screw ring', 'above', 'nipple'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nipple', 'above', 'screw ring'), True)	(('screw ring', 'below', 'nipple'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('screw ring', 'above', 'bottle'), True)	(('bottle', 'above', 'screw ring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screw ring', 'above', 'bottle'), True)	(('bottle', 'below', 'screw ring'), True)
Constraint 1: x rln y <-> y rln x	(('bottle', 'connects', 'screw ring'), True)	(('screw ring', 'connects', 'bottle'), True)
Constraint 1: x rln y <-> y rln x	(('screw ring', 'connects', 'nipple'), True)	(('nipple', 'connects', 'screw ring'), True)
Constraint 4 (True antecedent)	('cap', 'above', 'nipple')('nipple', 'above', 'screw ring')	(('cap', 'above', 'screw ring'), True)
Constraint 4 (True antecedent)	('nipple', 'above', 'screw ring')('screw ring', 'above', 'bottle')	(('nipple', 'above', 'bottle'), True)
Constraint 4 (True antecedent)	('screw ring', 'below', 'nipple')('nipple', 'below', 'cap')	(('screw ring', 'below', 'cap'), True)
Constraint 4 (True antecedent)	('bottle', 'below', 'screw ring')('screw ring', 'below', 'nipple')	(('bottle', 'below', 'nipple'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('nipple', 'above', 'cap'), False)	(('cap', 'below', 'nipple'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nipple', 'surrounds', 'cap'), False)	(('cap', 'surrounded by', 'nipple'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('screw ring', 'above', 'nipple'), False)	(('nipple', 'below', 'screw ring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottle', 'above', 'screw ring'), False)	(('screw ring', 'below', 'bottle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'above', 'screw ring'), True)	(('screw ring', 'above', 'cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nipple', 'above', 'bottle'), True)	(('bottle', 'above', 'nipple'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('screw ring', 'below', 'cap'), True)	(('cap', 'below', 'screw ring'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottle', 'below', 'nipple'), True)	(('nipple', 'below', 'bottle'), False)
Constraint 4 (True antecedent)	('cap', 'above', 'nipple')('nipple', 'above', 'bottle')	(('cap', 'above', 'bottle'), True)
Constraint 4 (True antecedent)	('bottle', 'below', 'screw ring')('screw ring', 'below', 'cap')	(('bottle', 'below', 'cap'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'above', 'bottle'), True)	(('bottle', 'above', 'cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bottle', 'below', 'cap'), True)	(('cap', 'below', 'bottle'), False)
Round 4 ...
baby bottle worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'above', 'bottle'), True)	(('bottle', 'above', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'above', 'bottle'), True)	(('bottle', 'below', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cap', 'surrounds', 'sealing disk'), True)	(('sealing disk', 'surrounds', 'cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cap', 'surrounds', 'sealing disk'), True)	(('sealing disk', 'surrounded by', 'cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sealing disk', 'above', 'nipple'), True)	(('nipple', 'above', 'sealing disk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sealing disk', 'above', 'nipple'), True)	(('nipple', 'below', 'sealing disk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sealing disk', 'above', 'bottle'), True)	(('bottle', 'above', 'sealing disk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sealing disk', 'above', 'bottle'), True)	(('bottle', 'below', 'sealing disk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nipple', 'inside', 'sealing disk'), True)	(('sealing disk', 'inside', 'nipple'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nipple', 'inside', 'sealing disk'), True)	(('sealing disk', 'contains', 'nipple'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('bottle', 'above', 'cap'), False)	(('cap', 'below', 'bottle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sealing disk', 'surrounds', 'cap'), False)	(('cap', 'surrounded by', 'sealing disk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nipple', 'above', 'sealing disk'), False)	(('sealing disk', 'below', 'nipple'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bottle', 'above', 'sealing disk'), False)	(('sealing disk', 'below', 'bottle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sealing disk', 'inside', 'nipple'), False)	(('nipple', 'contains', 'sealing disk'), False)
Round 3 ...
bed worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('slats', 'behind', 'footboard'), True)	(('footboard', 'behind', 'slats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('slats', 'behind', 'footboard'), True)	(('footboard', 'in front of', 'slats'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('headboard', 'behind', 'slats'), True)	(('slats', 'behind', 'headboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('headboard', 'behind', 'slats'), True)	(('slats', 'in front of', 'headboard'), True)
Constraint 1: x rln y <-> y rln x	(('headboard', 'next to', 'side rails'), True)	(('side rails', 'next to', 'headboard'), True)
Constraint 1: x rln y <-> y rln x	(('headboard', 'connects', 'side rails'), True)	(('side rails', 'connects', 'headboard'), True)
Constraint 1: x rln y <-> y rln x	(('side rails', 'connects', 'slats'), True)	(('slats', 'connects', 'side rails'), True)
Constraint 1: x rln y <-> y rln x	(('side rails', 'next to', 'footboard'), True)	(('footboard', 'next to', 'side rails'), True)
Constraint 1: x rln y <-> y rln x	(('side rails', 'connects', 'footboard'), True)	(('footboard', 'connects', 'side rails'), True)
Constraint 4 (True antecedent)	('headboard', 'behind', 'slats')('slats', 'behind', 'footboard')	(('headboard', 'behind', 'footboard'), True)
Constraint 4 (True antecedent)	('footboard', 'in front of', 'slats')('slats', 'in front of', 'headboard')	(('footboard', 'in front of', 'headboard'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('footboard', 'behind', 'slats'), False)	(('slats', 'in front of', 'footboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('slats', 'behind', 'headboard'), False)	(('headboard', 'in front of', 'slats'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('headboard', 'behind', 'footboard'), True)	(('footboard', 'behind', 'headboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('footboard', 'in front of', 'headboard'), True)	(('headboard', 'in front of', 'footboard'), False)
Round 3 ...
bed worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('slats', 'behind', 'footboard'), True)	(('footboard', 'behind', 'slats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('slats', 'behind', 'footboard'), True)	(('footboard', 'in front of', 'slats'), True)
Constraint 1: x rln y <-> y rln x	(('slats', 'next to', 'side rails'), True)	(('side rails', 'next to', 'slats'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('mattress', 'above', 'slats'), True)	(('slats', 'above', 'mattress'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mattress', 'above', 'slats'), True)	(('slats', 'below', 'mattress'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('headboard', 'behind', 'slats'), True)	(('slats', 'behind', 'headboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('headboard', 'behind', 'slats'), True)	(('slats', 'in front of', 'headboard'), True)
Constraint 1: x rln y <-> y rln x	(('headboard', 'connects', 'side rails'), True)	(('side rails', 'connects', 'headboard'), True)
Constraint 1: x rln y <-> y rln x	(('side rails', 'connects', 'footboard'), True)	(('footboard', 'connects', 'side rails'), True)
Constraint 4 (True antecedent)	('headboard', 'behind', 'slats')('slats', 'behind', 'footboard')	(('headboard', 'behind', 'footboard'), True)
Constraint 4 (True antecedent)	('footboard', 'in front of', 'slats')('slats', 'in front of', 'headboard')	(('footboard', 'in front of', 'headboard'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('footboard', 'behind', 'slats'), False)	(('slats', 'in front of', 'footboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('slats', 'above', 'mattress'), False)	(('mattress', 'below', 'slats'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('slats', 'behind', 'headboard'), False)	(('headboard', 'in front of', 'slats'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('headboard', 'behind', 'footboard'), True)	(('footboard', 'behind', 'headboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('footboard', 'in front of', 'headboard'), True)	(('headboard', 'in front of', 'footboard'), False)
Round 3 ...
bed worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('footboard', 'connects', 'side rails'), True)	(('side rails', 'connects', 'footboard'), True)
Constraint 1: x rln y <-> y rln x	(('slats', 'connects', 'side rails'), True)	(('side rails', 'connects', 'slats'), True)
Constraint 1: x rln y <-> y rln x	(('mattress', 'connects', 'side rails'), True)	(('side rails', 'connects', 'mattress'), True)
Constraint 1: x rln y <-> y rln x	(('headboard', 'connects', 'side rails'), True)	(('side rails', 'connects', 'headboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('headboard', 'behind', 'mattress'), True)	(('mattress', 'behind', 'headboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('headboard', 'behind', 'mattress'), True)	(('mattress', 'in front of', 'headboard'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('mattress', 'behind', 'headboard'), False)	(('headboard', 'in front of', 'mattress'), False)
Round 3 ...
bird cage worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'carry handles'), True)	(('carry handles', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'carry handles'), True)	(('carry handles', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('carry handles', 'above', 'base'), True)	(('base', 'above', 'carry handles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('carry handles', 'above', 'base'), True)	(('base', 'below', 'carry handles'), True)
Constraint 1: x rln y <-> y rln x	(('carry handles', 'next to', 'rod'), True)	(('rod', 'next to', 'carry handles'), True)
Constraint 1: x rln y <-> y rln x	(('sides', 'connects', 'base'), True)	(('base', 'connects', 'sides'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'rods'), True)	(('rods', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'rods'), True)	(('rods', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'trays'), True)	(('trays', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'trays'), True)	(('trays', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'sides'), True)	(('sides', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'sides'), True)	(('sides', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'metal base'), True)	(('metal base', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'metal base'), True)	(('metal base', 'below', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('rods', 'connects', 'sides'), True)	(('sides', 'connects', 'rods'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rods', 'above', 'base'), True)	(('base', 'above', 'rods'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rods', 'above', 'base'), True)	(('base', 'below', 'rods'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'food tray'), True)	(('food tray', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'food tray'), True)	(('food tray', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rods', 'above', 'food tray'), True)	(('food tray', 'above', 'rods'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rods', 'above', 'food tray'), True)	(('food tray', 'below', 'rods'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('food tray', 'above', 'base'), True)	(('base', 'above', 'food tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('food tray', 'above', 'base'), True)	(('base', 'below', 'food tray'), True)
Constraint 1: x rln y <-> y rln x	(('food tray', 'next to', 'carry handles'), True)	(('carry handles', 'next to', 'food tray'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'door'), True)	(('door', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'door'), True)	(('door', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rods', 'above', 'door'), True)	(('door', 'above', 'rods'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rods', 'above', 'door'), True)	(('door', 'below', 'rods'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'above', 'metal base'), True)	(('metal base', 'above', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'metal base'), True)	(('metal base', 'below', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'next to', 'carry handles'), True)	(('carry handles', 'next to', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('door', 'next to', 'food tray'), True)	(('food tray', 'next to', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('metal base', 'connects', 'sides'), True)	(('sides', 'connects', 'metal base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'above', 'metal base'), True)	(('metal base', 'above', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'metal base'), True)	(('metal base', 'below', 'sides'), True)
Constraint 4 (True antecedent)	('top', 'above', 'carry handles')('carry handles', 'above', 'base')	(('top', 'above', 'base'), True)
Constraint 4 (True antecedent)	('rods', 'above', 'door')('door', 'above', 'metal base')	(('rods', 'above', 'metal base'), True)
Constraint 4 (True antecedent)	('base', 'below', 'carry handles')('carry handles', 'below', 'top')	(('base', 'below', 'top'), True)
Constraint 4 (True antecedent)	('metal base', 'below', 'door')('door', 'below', 'rods')	(('metal base', 'below', 'rods'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('carry handles', 'above', 'top'), False)	(('top', 'below', 'carry handles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'carry handles'), False)	(('carry handles', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rods', 'above', 'top'), False)	(('top', 'below', 'rods'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trays', 'above', 'top'), False)	(('top', 'below', 'trays'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'top'), False)	(('top', 'below', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'above', 'top'), False)	(('top', 'below', 'metal base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'rods'), False)	(('rods', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('food tray', 'above', 'top'), False)	(('top', 'below', 'food tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('food tray', 'above', 'rods'), False)	(('rods', 'below', 'food tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'food tray'), False)	(('food tray', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'top'), False)	(('top', 'below', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'rods'), False)	(('rods', 'below', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'above', 'door'), False)	(('door', 'below', 'metal base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'above', 'sides'), False)	(('sides', 'below', 'metal base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'base'), True)	(('base', 'above', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rods', 'above', 'metal base'), True)	(('metal base', 'above', 'rods'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'top'), True)	(('top', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal base', 'below', 'rods'), True)	(('rods', 'below', 'metal base'), False)
Round 3 ...
bird cage worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'part of', 'sides'), True)	(('sides', 'part of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'sides'), True)	(('sides', 'has part', 'door'), True)
Constraint 1: x rln y <-> y rln x	(('carry handles', 'connects', 'sides'), True)	(('sides', 'connects', 'carry handles'), True)
Constraint 1: x rln y <-> y rln x	(('metal base', 'connects', 'sides'), True)	(('sides', 'connects', 'metal base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'above', 'metal tray'), True)	(('metal tray', 'above', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'metal tray'), True)	(('metal tray', 'below', 'sides'), True)
Constraint 1: x rln y <-> y rln x	(('sides', 'connects', 'food tray'), True)	(('food tray', 'connects', 'sides'), True)
Constraint 1: x rln y <-> y rln x	(('sides', 'next to', 'food tray'), True)	(('food tray', 'next to', 'sides'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rods', 'above', 'food tray'), True)	(('food tray', 'above', 'rods'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rods', 'above', 'food tray'), True)	(('food tray', 'below', 'rods'), True)
Constraint 1: x rln y <-> y rln x	(('rods', 'connects', 'sides'), True)	(('sides', 'connects', 'rods'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'sides'), True)	(('sides', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'sides'), True)	(('sides', 'below', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('top', 'connects', 'sides'), True)	(('sides', 'connects', 'top'), True)
Constraint 4 (True antecedent)	('top', 'above', 'sides')('sides', 'above', 'metal tray')	(('top', 'above', 'metal tray'), True)
Constraint 4 (True antecedent)	('metal tray', 'below', 'sides')('sides', 'below', 'top')	(('metal tray', 'below', 'top'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'part of', 'door'), False)	(('door', 'has part', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal tray', 'above', 'sides'), False)	(('sides', 'below', 'metal tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('food tray', 'above', 'rods'), False)	(('rods', 'below', 'food tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'top'), False)	(('top', 'below', 'sides'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'metal tray'), True)	(('metal tray', 'above', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal tray', 'below', 'top'), True)	(('top', 'below', 'metal tray'), False)
Round 3 ...
bird cage worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'sides'), True)	(('sides', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'sides'), True)	(('sides', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'door'), True)	(('door', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'door'), True)	(('door', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'above', 'food tray'), True)	(('food tray', 'above', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'food tray'), True)	(('food tray', 'below', 'sides'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'part of', 'sides'), True)	(('sides', 'part of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'sides'), True)	(('sides', 'has part', 'door'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'above', 'food tray'), True)	(('food tray', 'above', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'food tray'), True)	(('food tray', 'below', 'door'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('food tray', 'above', 'metal base'), True)	(('metal base', 'above', 'food tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('food tray', 'above', 'metal base'), True)	(('metal base', 'below', 'food tray'), True)
Constraint 4 (True antecedent)	('top', 'above', 'sides')('sides', 'above', 'food tray')	(('top', 'above', 'food tray'), True)
Constraint 4 (True antecedent)	('sides', 'above', 'food tray')('food tray', 'above', 'metal base')	(('sides', 'above', 'metal base'), True)
Constraint 4 (True antecedent)	('door', 'above', 'food tray')('food tray', 'above', 'metal base')	(('door', 'above', 'metal base'), True)
Constraint 4 (True antecedent)	('food tray', 'below', 'sides')('sides', 'below', 'top')	(('food tray', 'below', 'top'), True)
Constraint 4 (True antecedent)	('metal base', 'below', 'food tray')('food tray', 'below', 'sides')	(('metal base', 'below', 'sides'), True)
Constraint 4 (True antecedent)	('metal base', 'below', 'food tray')('food tray', 'below', 'door')	(('metal base', 'below', 'door'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'above', 'top'), False)	(('top', 'below', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'top'), False)	(('top', 'below', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('food tray', 'above', 'sides'), False)	(('sides', 'below', 'food tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sides', 'part of', 'door'), False)	(('door', 'has part', 'sides'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('food tray', 'above', 'door'), False)	(('door', 'below', 'food tray'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('metal base', 'above', 'food tray'), False)	(('food tray', 'below', 'metal base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'food tray'), True)	(('food tray', 'above', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('sides', 'above', 'metal base'), True)	(('metal base', 'above', 'sides'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'above', 'metal base'), True)	(('metal base', 'above', 'door'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('food tray', 'below', 'top'), True)	(('top', 'below', 'food tray'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal base', 'below', 'sides'), True)	(('sides', 'below', 'metal base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal base', 'below', 'door'), True)	(('door', 'below', 'metal base'), False)
Constraint 4 (True antecedent)	('top', 'above', 'sides')('sides', 'above', 'metal base')	(('top', 'above', 'metal base'), True)
Constraint 4 (True antecedent)	('metal base', 'below', 'food tray')('food tray', 'below', 'top')	(('metal base', 'below', 'top'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'metal base'), True)	(('metal base', 'above', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('metal base', 'below', 'top'), True)	(('top', 'below', 'metal base'), False)
Round 4 ...
car worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('brake light', 'behind', 'trunk'), True)	(('trunk', 'behind', 'brake light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('brake light', 'behind', 'trunk'), True)	(('trunk', 'in front of', 'brake light'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('brake light', 'above', 'tires'), True)	(('tires', 'above', 'brake light'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('brake light', 'above', 'tires'), True)	(('tires', 'below', 'brake light'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'behind', 'rear window'), True)	(('rear window', 'behind', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'behind', 'rear window'), True)	(('rear window', 'in front of', 'trunk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rear window', 'behind', 'roof'), True)	(('roof', 'behind', 'rear window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rear window', 'behind', 'roof'), True)	(('roof', 'in front of', 'rear window'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'windshield'), True)	(('windshield', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'windshield'), True)	(('windshield', 'below', 'roof'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'behind', 'windshield'), True)	(('windshield', 'behind', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'behind', 'windshield'), True)	(('windshield', 'in front of', 'roof'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'door'), True)	(('door', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'door'), True)	(('door', 'below', 'roof'), True)
Constraint 1: x rln y <-> y rln x	(('antenna', 'connects', 'roof'), True)	(('roof', 'connects', 'antenna'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('antenna', 'above', 'roof'), True)	(('roof', 'above', 'antenna'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('antenna', 'above', 'roof'), True)	(('roof', 'below', 'antenna'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'above', 'hood'), True)	(('hood', 'above', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'above', 'hood'), True)	(('hood', 'below', 'windshield'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'behind', 'hood'), True)	(('hood', 'behind', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'behind', 'hood'), True)	(('hood', 'in front of', 'windshield'), True)
Constraint 1: x rln y <-> y rln x	(('hood', 'next to', 'headlight'), True)	(('headlight', 'next to', 'hood'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('headlight', 'above', 'tires'), True)	(('tires', 'above', 'headlight'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('headlight', 'above', 'tires'), True)	(('tires', 'below', 'headlight'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tires', 'surrounds', 'hubcap'), True)	(('hubcap', 'surrounds', 'tires'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tires', 'surrounds', 'hubcap'), True)	(('hubcap', 'surrounded by', 'tires'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sidewindow', 'part of', 'door'), True)	(('door', 'part of', 'sidewindow'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sidewindow', 'part of', 'door'), True)	(('door', 'has part', 'sidewindow'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'part of', 'door'), True)	(('door', 'part of', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'door'), True)	(('door', 'has part', 'handle'), True)
Constraint 4 (True antecedent)	('brake light', 'behind', 'trunk')('trunk', 'behind', 'rear window')	(('brake light', 'behind', 'rear window'), True)
Constraint 4 (True antecedent)	('trunk', 'behind', 'rear window')('rear window', 'behind', 'roof')	(('trunk', 'behind', 'roof'), True)
Constraint 4 (True antecedent)	('rear window', 'behind', 'roof')('roof', 'behind', 'windshield')	(('rear window', 'behind', 'windshield'), True)
Constraint 4 (True antecedent)	('roof', 'above', 'windshield')('windshield', 'above', 'hood')	(('roof', 'above', 'hood'), True)
Constraint 4 (True antecedent)	('roof', 'behind', 'windshield')('windshield', 'behind', 'hood')	(('roof', 'behind', 'hood'), True)
Constraint 4 (True antecedent)	('antenna', 'above', 'roof')('roof', 'above', 'windshield')	(('antenna', 'above', 'windshield'), True)
Constraint 4 (True antecedent)	('antenna', 'above', 'roof')('roof', 'above', 'door')	(('antenna', 'above', 'door'), True)
Constraint 4 (True antecedent)	('rear window', 'in front of', 'trunk')('trunk', 'in front of', 'brake light')	(('rear window', 'in front of', 'brake light'), True)
Constraint 4 (True antecedent)	('roof', 'in front of', 'rear window')('rear window', 'in front of', 'trunk')	(('roof', 'in front of', 'trunk'), True)
Constraint 4 (True antecedent)	('windshield', 'below', 'roof')('roof', 'below', 'antenna')	(('windshield', 'below', 'antenna'), True)
Constraint 4 (True antecedent)	('windshield', 'in front of', 'roof')('roof', 'in front of', 'rear window')	(('windshield', 'in front of', 'rear window'), True)
Constraint 4 (True antecedent)	('door', 'below', 'roof')('roof', 'below', 'antenna')	(('door', 'below', 'antenna'), True)
Constraint 4 (True antecedent)	('hood', 'below', 'windshield')('windshield', 'below', 'roof')	(('hood', 'below', 'roof'), True)
Constraint 4 (True antecedent)	('hood', 'in front of', 'windshield')('windshield', 'in front of', 'roof')	(('hood', 'in front of', 'roof'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'behind', 'brake light'), False)	(('brake light', 'in front of', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tires', 'above', 'brake light'), False)	(('brake light', 'below', 'tires'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rear window', 'behind', 'trunk'), False)	(('trunk', 'in front of', 'rear window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'behind', 'rear window'), False)	(('rear window', 'in front of', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'above', 'roof'), False)	(('roof', 'below', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'behind', 'roof'), False)	(('roof', 'in front of', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'roof'), False)	(('roof', 'below', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'antenna'), False)	(('antenna', 'below', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hood', 'above', 'windshield'), False)	(('windshield', 'below', 'hood'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hood', 'behind', 'windshield'), False)	(('windshield', 'in front of', 'hood'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tires', 'above', 'headlight'), False)	(('headlight', 'below', 'tires'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hubcap', 'surrounds', 'tires'), False)	(('tires', 'surrounded by', 'hubcap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'sidewindow'), False)	(('sidewindow', 'has part', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'handle'), False)	(('handle', 'has part', 'door'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('brake light', 'behind', 'rear window'), True)	(('rear window', 'behind', 'brake light'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'behind', 'roof'), True)	(('roof', 'behind', 'trunk'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear window', 'behind', 'windshield'), True)	(('windshield', 'behind', 'rear window'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'hood'), True)	(('hood', 'above', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'behind', 'hood'), True)	(('hood', 'behind', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('antenna', 'above', 'windshield'), True)	(('windshield', 'above', 'antenna'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('antenna', 'above', 'door'), True)	(('door', 'above', 'antenna'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear window', 'in front of', 'brake light'), True)	(('brake light', 'in front of', 'rear window'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'in front of', 'trunk'), True)	(('trunk', 'in front of', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'below', 'antenna'), True)	(('antenna', 'below', 'windshield'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'in front of', 'rear window'), True)	(('rear window', 'in front of', 'windshield'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'below', 'antenna'), True)	(('antenna', 'below', 'door'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hood', 'below', 'roof'), True)	(('roof', 'below', 'hood'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hood', 'in front of', 'roof'), True)	(('roof', 'in front of', 'hood'), False)
Constraint 4 (True antecedent)	('brake light', 'behind', 'trunk')('trunk', 'behind', 'roof')	(('brake light', 'behind', 'roof'), True)
Constraint 4 (True antecedent)	('brake light', 'behind', 'rear window')('rear window', 'behind', 'windshield')	(('brake light', 'behind', 'windshield'), True)
Constraint 4 (True antecedent)	('trunk', 'behind', 'rear window')('rear window', 'behind', 'windshield')	(('trunk', 'behind', 'windshield'), True)
Constraint 4 (True antecedent)	('trunk', 'behind', 'roof')('roof', 'behind', 'hood')	(('trunk', 'behind', 'hood'), True)
Constraint 4 (True antecedent)	('rear window', 'behind', 'roof')('roof', 'behind', 'hood')	(('rear window', 'behind', 'hood'), True)
Constraint 4 (True antecedent)	('antenna', 'above', 'roof')('roof', 'above', 'hood')	(('antenna', 'above', 'hood'), True)
Constraint 4 (True antecedent)	('roof', 'in front of', 'rear window')('rear window', 'in front of', 'brake light')	(('roof', 'in front of', 'brake light'), True)
Constraint 4 (True antecedent)	('windshield', 'in front of', 'roof')('roof', 'in front of', 'trunk')	(('windshield', 'in front of', 'trunk'), True)
Constraint 4 (True antecedent)	('windshield', 'in front of', 'rear window')('rear window', 'in front of', 'brake light')	(('windshield', 'in front of', 'brake light'), True)
Constraint 4 (True antecedent)	('hood', 'below', 'windshield')('windshield', 'below', 'antenna')	(('hood', 'below', 'antenna'), True)
Constraint 4 (True antecedent)	('hood', 'in front of', 'windshield')('windshield', 'in front of', 'rear window')	(('hood', 'in front of', 'rear window'), True)
Constraint 4 (True antecedent)	('hood', 'in front of', 'roof')('roof', 'in front of', 'trunk')	(('hood', 'in front of', 'trunk'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('brake light', 'behind', 'roof'), True)	(('roof', 'behind', 'brake light'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('brake light', 'behind', 'windshield'), True)	(('windshield', 'behind', 'brake light'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'behind', 'windshield'), True)	(('windshield', 'behind', 'trunk'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'behind', 'hood'), True)	(('hood', 'behind', 'trunk'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('rear window', 'behind', 'hood'), True)	(('hood', 'behind', 'rear window'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('antenna', 'above', 'hood'), True)	(('hood', 'above', 'antenna'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'in front of', 'brake light'), True)	(('brake light', 'in front of', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'in front of', 'trunk'), True)	(('trunk', 'in front of', 'windshield'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'in front of', 'brake light'), True)	(('brake light', 'in front of', 'windshield'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hood', 'below', 'antenna'), True)	(('antenna', 'below', 'hood'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hood', 'in front of', 'rear window'), True)	(('rear window', 'in front of', 'hood'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hood', 'in front of', 'trunk'), True)	(('trunk', 'in front of', 'hood'), False)
Constraint 4 (True antecedent)	('brake light', 'behind', 'trunk')('trunk', 'behind', 'hood')	(('brake light', 'behind', 'hood'), True)
Constraint 4 (True antecedent)	('hood', 'in front of', 'windshield')('windshield', 'in front of', 'brake light')	(('hood', 'in front of', 'brake light'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('brake light', 'behind', 'hood'), True)	(('hood', 'behind', 'brake light'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hood', 'in front of', 'brake light'), True)	(('brake light', 'in front of', 'hood'), False)
Round 5 ...
car worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'windshield'), True)	(('windshield', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'windshield'), True)	(('windshield', 'below', 'roof'), True)
Constraint 1: x rln y <-> y rln x	(('windshield', 'next to', 'window'), True)	(('window', 'next to', 'windshield'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'above', 'hood'), True)	(('hood', 'above', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'above', 'hood'), True)	(('hood', 'below', 'windshield'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('window', 'above', 'door'), True)	(('door', 'above', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'above', 'door'), True)	(('door', 'below', 'window'), True)
Constraint 1: x rln y <-> y rln x	(('hood', 'next to', 'door'), True)	(('door', 'next to', 'hood'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'above', 'hubcaps'), True)	(('hubcaps', 'above', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'hubcaps'), True)	(('hubcaps', 'below', 'door'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hubcaps', 'part of', 'tires'), True)	(('tires', 'part of', 'hubcaps'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hubcaps', 'part of', 'tires'), True)	(('tires', 'has part', 'hubcaps'), True)
Constraint 4 (True antecedent)	('roof', 'above', 'windshield')('windshield', 'above', 'hood')	(('roof', 'above', 'hood'), True)
Constraint 4 (True antecedent)	('window', 'above', 'door')('door', 'above', 'hubcaps')	(('window', 'above', 'hubcaps'), True)
Constraint 4 (True antecedent)	('hood', 'below', 'windshield')('windshield', 'below', 'roof')	(('hood', 'below', 'roof'), True)
Constraint 4 (True antecedent)	('hubcaps', 'below', 'door')('door', 'below', 'window')	(('hubcaps', 'below', 'window'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'above', 'roof'), False)	(('roof', 'below', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hood', 'above', 'windshield'), False)	(('windshield', 'below', 'hood'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'window'), False)	(('window', 'below', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hubcaps', 'above', 'door'), False)	(('door', 'below', 'hubcaps'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tires', 'part of', 'hubcaps'), False)	(('hubcaps', 'has part', 'tires'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'hood'), True)	(('hood', 'above', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('window', 'above', 'hubcaps'), True)	(('hubcaps', 'above', 'window'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hood', 'below', 'roof'), True)	(('roof', 'below', 'hood'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hubcaps', 'below', 'window'), True)	(('window', 'below', 'hubcaps'), False)
Round 3 ...
car worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('window', 'part of', 'door'), True)	(('door', 'part of', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'part of', 'door'), True)	(('door', 'has part', 'window'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('window', 'above', 'handle'), True)	(('handle', 'above', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'above', 'handle'), True)	(('handle', 'below', 'window'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'part of', 'door'), True)	(('door', 'part of', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'door'), True)	(('door', 'has part', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('door', 'above', 'wheels'), True)	(('wheels', 'above', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'wheels'), True)	(('wheels', 'below', 'door'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'behind', 'door'), True)	(('door', 'behind', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'behind', 'door'), True)	(('door', 'in front of', 'trunk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'above', 'wheels'), True)	(('wheels', 'above', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'above', 'wheels'), True)	(('wheels', 'below', 'trunk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'behind', 'windshield'), True)	(('windshield', 'behind', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'behind', 'windshield'), True)	(('windshield', 'in front of', 'trunk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'behind', 'hood'), True)	(('hood', 'behind', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'behind', 'hood'), True)	(('hood', 'in front of', 'windshield'), True)
Constraint 1: x rln y <-> y rln x	(('windshield', 'connects', 'hood'), True)	(('hood', 'connects', 'windshield'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('windshield', 'above', 'wheels'), True)	(('wheels', 'above', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'above', 'wheels'), True)	(('wheels', 'below', 'windshield'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'windshield'), True)	(('windshield', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'windshield'), True)	(('windshield', 'below', 'roof'), True)
Constraint 1: x rln y <-> y rln x	(('roof', 'connects', 'windshield'), True)	(('windshield', 'connects', 'roof'), True)
Constraint 1: x rln y <-> y rln x	(('roof', 'connects', 'dor'), True)	(('dor', 'connects', 'roof'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'door'), True)	(('door', 'above', 'roof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roof', 'above', 'door'), True)	(('door', 'below', 'roof'), True)
Constraint 4 (True antecedent)	('trunk', 'behind', 'windshield')('windshield', 'behind', 'hood')	(('trunk', 'behind', 'hood'), True)
Constraint 4 (True antecedent)	('roof', 'above', 'windshield')('windshield', 'above', 'wheels')	(('roof', 'above', 'wheels'), True)
Constraint 4 (True antecedent)	('wheels', 'below', 'door')('door', 'below', 'roof')	(('wheels', 'below', 'roof'), True)
Constraint 4 (True antecedent)	('hood', 'in front of', 'windshield')('windshield', 'in front of', 'trunk')	(('hood', 'in front of', 'trunk'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'window'), False)	(('window', 'has part', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'window'), False)	(('window', 'below', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'part of', 'handle'), False)	(('handle', 'has part', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'door'), False)	(('door', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'behind', 'trunk'), False)	(('trunk', 'in front of', 'door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'trunk'), False)	(('trunk', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'behind', 'trunk'), False)	(('trunk', 'in front of', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hood', 'behind', 'windshield'), False)	(('windshield', 'in front of', 'hood'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('wheels', 'above', 'windshield'), False)	(('windshield', 'below', 'wheels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('windshield', 'above', 'roof'), False)	(('roof', 'below', 'windshield'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door', 'above', 'roof'), False)	(('roof', 'below', 'door'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'behind', 'hood'), True)	(('hood', 'behind', 'trunk'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roof', 'above', 'wheels'), True)	(('wheels', 'above', 'roof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('wheels', 'below', 'roof'), True)	(('roof', 'below', 'wheels'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hood', 'in front of', 'trunk'), True)	(('trunk', 'in front of', 'hood'), False)
Round 3 ...
chainsaw worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'engine'), True)	(('engine', 'behind', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'behind', 'engine'), True)	(('engine', 'in front of', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'behind', 'bar'), True)	(('bar', 'behind', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'bar'), True)	(('bar', 'in front of', 'engine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'behind', 'front handle'), True)	(('front handle', 'behind', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'front handle'), True)	(('front handle', 'in front of', 'engine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'requires', 'pull start'), True)	(('pull start', 'requires', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'requires', 'pull start'), True)	(('pull start', 'required by', 'engine'), True)
Constraint 1: x rln y <-> y rln x	(('pull start', 'connects', 'engine'), True)	(('engine', 'connects', 'pull start'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pull start', 'above', 'engine'), True)	(('engine', 'above', 'pull start'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pull start', 'above', 'engine'), True)	(('engine', 'below', 'pull start'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front handle', 'behind', 'hand guard'), True)	(('hand guard', 'behind', 'front handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front handle', 'behind', 'hand guard'), True)	(('hand guard', 'in front of', 'front handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hand guard', 'above', 'bar'), True)	(('bar', 'above', 'hand guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hand guard', 'above', 'bar'), True)	(('bar', 'below', 'hand guard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('chain', 'surrounds', 'bar'), True)	(('bar', 'surrounds', 'chain'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chain', 'surrounds', 'bar'), True)	(('bar', 'surrounded by', 'chain'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'part of', 'bar'), True)	(('bar', 'part of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'part of', 'bar'), True)	(('bar', 'has part', 'nose'), True)
Constraint 4 (True antecedent)	('throttle', 'behind', 'engine')('engine', 'behind', 'bar')	(('throttle', 'behind', 'bar'), True)
Constraint 4 (True antecedent)	('throttle', 'behind', 'engine')('engine', 'behind', 'front handle')	(('throttle', 'behind', 'front handle'), True)
Constraint 4 (True antecedent)	('engine', 'behind', 'front handle')('front handle', 'behind', 'hand guard')	(('engine', 'behind', 'hand guard'), True)
Constraint 4 (True antecedent)	('bar', 'in front of', 'engine')('engine', 'in front of', 'throttle')	(('bar', 'in front of', 'throttle'), True)
Constraint 4 (True antecedent)	('front handle', 'in front of', 'engine')('engine', 'in front of', 'throttle')	(('front handle', 'in front of', 'throttle'), True)
Constraint 4 (True antecedent)	('hand guard', 'in front of', 'front handle')('front handle', 'in front of', 'engine')	(('hand guard', 'in front of', 'engine'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'throttle'), False)	(('throttle', 'in front of', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bar', 'behind', 'engine'), False)	(('engine', 'in front of', 'bar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front handle', 'behind', 'engine'), False)	(('engine', 'in front of', 'front handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pull start', 'requires', 'engine'), False)	(('engine', 'required by', 'pull start'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'above', 'pull start'), False)	(('pull start', 'below', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hand guard', 'behind', 'front handle'), False)	(('front handle', 'in front of', 'hand guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bar', 'above', 'hand guard'), False)	(('hand guard', 'below', 'bar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bar', 'surrounds', 'chain'), False)	(('chain', 'surrounded by', 'bar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bar', 'part of', 'nose'), False)	(('nose', 'has part', 'bar'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'bar'), True)	(('bar', 'behind', 'throttle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'front handle'), True)	(('front handle', 'behind', 'throttle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'behind', 'hand guard'), True)	(('hand guard', 'behind', 'engine'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bar', 'in front of', 'throttle'), True)	(('throttle', 'in front of', 'bar'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('front handle', 'in front of', 'throttle'), True)	(('throttle', 'in front of', 'front handle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hand guard', 'in front of', 'engine'), True)	(('engine', 'in front of', 'hand guard'), False)
Constraint 4 (True antecedent)	('throttle', 'behind', 'engine')('engine', 'behind', 'hand guard')	(('throttle', 'behind', 'hand guard'), True)
Constraint 4 (True antecedent)	('hand guard', 'in front of', 'front handle')('front handle', 'in front of', 'throttle')	(('hand guard', 'in front of', 'throttle'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'hand guard'), True)	(('hand guard', 'behind', 'throttle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hand guard', 'in front of', 'throttle'), True)	(('throttle', 'in front of', 'hand guard'), False)
Round 4 ...
chainsaw worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('throttle', 'connects', 'engine'), True)	(('engine', 'connects', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'requires', 'engine'), True)	(('engine', 'requires', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'requires', 'engine'), True)	(('engine', 'required by', 'throttle'), True)
Constraint 1: x rln y <-> y rln x	(('engine', 'connects', 'pull start'), True)	(('pull start', 'connects', 'engine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'behind', 'bar'), True)	(('bar', 'behind', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'bar'), True)	(('bar', 'in front of', 'engine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front hand', 'behind', 'hand guard'), True)	(('hand guard', 'behind', 'front hand'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front hand', 'behind', 'hand guard'), True)	(('hand guard', 'in front of', 'front hand'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hand guard', 'above', 'engine'), True)	(('engine', 'above', 'hand guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hand guard', 'above', 'engine'), True)	(('engine', 'below', 'hand guard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'part of', 'bar'), True)	(('bar', 'part of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'part of', 'bar'), True)	(('bar', 'has part', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('chain', 'part of', 'bar'), True)	(('bar', 'part of', 'chain'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chain', 'part of', 'bar'), True)	(('bar', 'has part', 'chain'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'requires', 'throttle'), False)	(('throttle', 'required by', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bar', 'behind', 'engine'), False)	(('engine', 'in front of', 'bar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hand guard', 'behind', 'front hand'), False)	(('front hand', 'in front of', 'hand guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'above', 'hand guard'), False)	(('hand guard', 'below', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bar', 'part of', 'nose'), False)	(('nose', 'has part', 'bar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bar', 'part of', 'chain'), False)	(('chain', 'has part', 'bar'), False)
Round 3 ...
chainsaw worker_107...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('chain', 'connects', 'bar'), True)	(('bar', 'connects', 'chain'), True)
Constraint 1: x rln y <-> y rln x	(('nose', 'connects', 'bar'), True)	(('bar', 'connects', 'nose'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bar', 'requires', 'engine'), True)	(('engine', 'requires', 'bar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bar', 'requires', 'engine'), True)	(('engine', 'required by', 'bar'), True)
Constraint 1: x rln y <-> y rln x	(('bar', 'connects', 'engine'), True)	(('engine', 'connects', 'bar'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('front handle', 'above', 'engine'), True)	(('engine', 'above', 'front handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front handle', 'above', 'engine'), True)	(('engine', 'below', 'front handle'), True)
Constraint 1: x rln y <-> y rln x	(('front handle', 'next to', 'hand guard'), True)	(('hand guard', 'next to', 'front handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('hand guard', 'above', 'engine'), True)	(('engine', 'above', 'hand guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hand guard', 'above', 'engine'), True)	(('engine', 'below', 'hand guard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('engine', 'behind', 'bar'), True)	(('bar', 'behind', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'behind', 'bar'), True)	(('bar', 'in front of', 'engine'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'above', 'engine'), True)	(('engine', 'above', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'above', 'engine'), True)	(('engine', 'below', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'requires', 'engine'), True)	(('engine', 'requires', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'requires', 'engine'), True)	(('engine', 'required by', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'pull start'), True)	(('pull start', 'behind', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'behind', 'pull start'), True)	(('pull start', 'in front of', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'front handle'), True)	(('front handle', 'behind', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'behind', 'front handle'), True)	(('front handle', 'in front of', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('throttle', 'behind', 'hand guard'), True)	(('hand guard', 'behind', 'throttle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('throttle', 'behind', 'hand guard'), True)	(('hand guard', 'in front of', 'throttle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pull start', 'above', 'engine'), True)	(('engine', 'above', 'pull start'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pull start', 'above', 'engine'), True)	(('engine', 'below', 'pull start'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('pull start', 'requires', 'engine'), True)	(('engine', 'requires', 'pull start'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pull start', 'requires', 'engine'), True)	(('engine', 'required by', 'pull start'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'requires', 'bar'), False)	(('bar', 'required by', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'above', 'front handle'), False)	(('front handle', 'below', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'above', 'hand guard'), False)	(('hand guard', 'below', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bar', 'behind', 'engine'), False)	(('engine', 'in front of', 'bar'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'above', 'throttle'), False)	(('throttle', 'below', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'requires', 'throttle'), False)	(('throttle', 'required by', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pull start', 'behind', 'throttle'), False)	(('throttle', 'in front of', 'pull start'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('front handle', 'behind', 'throttle'), False)	(('throttle', 'in front of', 'front handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hand guard', 'behind', 'throttle'), False)	(('throttle', 'in front of', 'hand guard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'above', 'pull start'), False)	(('pull start', 'below', 'engine'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('engine', 'requires', 'pull start'), False)	(('pull start', 'required by', 'engine'), False)
Round 3 ...
corn worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('kernal', 'part of', 'ear'), True)	(('ear', 'part of', 'kernal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kernal', 'part of', 'ear'), True)	(('ear', 'has part', 'kernal'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'connects', 'silk'), True)	(('silk', 'connects', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('silk', 'above', 'ear'), True)	(('ear', 'above', 'silk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silk', 'above', 'ear'), True)	(('ear', 'below', 'silk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('husk', 'part of', 'ear'), True)	(('ear', 'part of', 'husk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('husk', 'part of', 'ear'), True)	(('ear', 'has part', 'husk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('husk', 'surrounds', 'kernal'), True)	(('kernal', 'surrounds', 'husk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('husk', 'surrounds', 'kernal'), True)	(('kernal', 'surrounded by', 'husk'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'part of', 'kernal'), False)	(('kernal', 'has part', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'silk'), False)	(('silk', 'below', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'part of', 'husk'), False)	(('husk', 'has part', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kernal', 'surrounds', 'husk'), False)	(('husk', 'surrounded by', 'kernal'), False)
Round 3 ...
corn worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('kernal', 'part of', 'ear'), True)	(('ear', 'part of', 'kernal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kernal', 'part of', 'ear'), True)	(('ear', 'has part', 'kernal'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('kernal', 'inside', 'husk'), True)	(('husk', 'inside', 'kernal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kernal', 'inside', 'husk'), True)	(('husk', 'contains', 'kernal'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('husk', 'part of', 'ear'), True)	(('ear', 'part of', 'husk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('husk', 'part of', 'ear'), True)	(('ear', 'has part', 'husk'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'connects', 'silk'), True)	(('silk', 'connects', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('silk', 'above', 'ear'), True)	(('ear', 'above', 'silk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silk', 'above', 'ear'), True)	(('ear', 'below', 'silk'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'part of', 'kernal'), False)	(('kernal', 'has part', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('husk', 'inside', 'kernal'), False)	(('kernal', 'contains', 'husk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'part of', 'husk'), False)	(('husk', 'has part', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'above', 'silk'), False)	(('silk', 'below', 'ear'), False)
Round 3 ...
corn worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('silk', 'part of', 'kernal'), True)	(('kernal', 'part of', 'silk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silk', 'part of', 'kernal'), True)	(('kernal', 'has part', 'silk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('silk', 'part of', 'ear'), True)	(('ear', 'part of', 'silk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silk', 'part of', 'ear'), True)	(('ear', 'has part', 'silk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('husk', 'above', 'silk'), True)	(('silk', 'above', 'husk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('husk', 'above', 'silk'), True)	(('silk', 'below', 'husk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('kernal', 'part of', 'ear'), True)	(('ear', 'part of', 'kernal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('kernal', 'part of', 'ear'), True)	(('ear', 'has part', 'kernal'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('husk', 'part of', 'ear'), True)	(('ear', 'part of', 'husk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('husk', 'part of', 'ear'), True)	(('ear', 'has part', 'husk'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('kernal', 'part of', 'silk'), False)	(('silk', 'has part', 'kernal'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'part of', 'silk'), False)	(('silk', 'has part', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('silk', 'above', 'husk'), False)	(('husk', 'below', 'silk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'part of', 'kernal'), False)	(('kernal', 'has part', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'part of', 'husk'), False)	(('husk', 'has part', 'ear'), False)
Round 3 ...
cow worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'toe'), True)	(('toe', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'neck'), True)	(('neck', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'fore udder'), True)	(('fore udder', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'fore udder'), True)	(('fore udder', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back', 'part of', 'body'), True)	(('body', 'part of', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'part of', 'body'), True)	(('body', 'has part', 'back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('teat', 'part of', 'fore udder'), True)	(('fore udder', 'part of', 'teat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('teat', 'part of', 'fore udder'), True)	(('fore udder', 'has part', 'teat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('toe', 'part of', 'hoof'), True)	(('hoof', 'part of', 'toe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toe', 'part of', 'hoof'), True)	(('hoof', 'has part', 'toe'), True)
Constraint 1: x rln y <-> y rln x	(('neck', 'connects', 'head'), True)	(('head', 'connects', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ear', 'part of', 'head'), True)	(('head', 'part of', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'part of', 'head'), True)	(('head', 'has part', 'ear'), True)
Constraint 1: x rln y <-> y rln x	(('ear', 'next to', 'eye'), True)	(('eye', 'next to', 'ear'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'part of', 'head'), True)	(('head', 'part of', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'part of', 'head'), True)	(('head', 'has part', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'above', 'eye'), True)	(('eye', 'above', 'horn'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horn', 'above', 'eye'), True)	(('eye', 'below', 'horn'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'part of', 'head'), True)	(('head', 'part of', 'horn'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horn', 'part of', 'head'), True)	(('head', 'has part', 'horn'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'above', 'nostril'), True)	(('nostril', 'above', 'horn'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horn', 'above', 'nostril'), True)	(('nostril', 'below', 'horn'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'part of', 'head'), True)	(('head', 'part of', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'part of', 'head'), True)	(('head', 'has part', 'nostril'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('fore udder', 'above', 'body'), False)	(('body', 'below', 'fore udder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'back'), False)	(('back', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fore udder', 'part of', 'teat'), False)	(('teat', 'has part', 'fore udder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hoof', 'part of', 'toe'), False)	(('toe', 'has part', 'hoof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'ear'), False)	(('ear', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'eye'), False)	(('eye', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'horn'), False)	(('horn', 'below', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'horn'), False)	(('horn', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'above', 'horn'), False)	(('horn', 'below', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'nostril'), False)	(('nostril', 'has part', 'head'), False)
Round 3 ...
cow worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('horn', 'connects', 'head'), True)	(('head', 'connects', 'horn'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'part of', 'head'), True)	(('head', 'part of', 'eyes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyes', 'part of', 'head'), True)	(('head', 'has part', 'eyes'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'ears'), True)	(('ears', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'above', 'nostril'), True)	(('nostril', 'above', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'nostril'), True)	(('nostril', 'below', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nostril', 'part of', 'muzzle'), True)	(('muzzle', 'part of', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'part of', 'muzzle'), True)	(('muzzle', 'has part', 'nostril'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'behind', 'muzzle'), True)	(('muzzle', 'behind', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'behind', 'muzzle'), True)	(('muzzle', 'in front of', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'shoulder'), True)	(('shoulder', 'above', 'neck'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('neck', 'above', 'shoulder'), True)	(('shoulder', 'below', 'neck'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shoulder', 'above', 'hoof'), True)	(('hoof', 'above', 'shoulder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shoulder', 'above', 'hoof'), True)	(('hoof', 'below', 'shoulder'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back', 'behind', 'shoulder'), True)	(('shoulder', 'behind', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'behind', 'shoulder'), True)	(('shoulder', 'in front of', 'back'), True)
Constraint 1: x rln y <-> y rln x	(('back', 'connects', 'tail'), True)	(('tail', 'connects', 'back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('back', 'above', 'fore udder'), True)	(('fore udder', 'above', 'back'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('back', 'above', 'fore udder'), True)	(('fore udder', 'below', 'back'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('teat', 'part of', 'fore udder'), True)	(('fore udder', 'part of', 'teat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('teat', 'part of', 'fore udder'), True)	(('fore udder', 'has part', 'teat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fore udder', 'behind', 'shoulder'), True)	(('shoulder', 'behind', 'fore udder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fore udder', 'behind', 'shoulder'), True)	(('shoulder', 'in front of', 'fore udder'), True)
Constraint 4 (True antecedent)	('neck', 'above', 'shoulder')('shoulder', 'above', 'hoof')	(('neck', 'above', 'hoof'), True)
Constraint 4 (True antecedent)	('hoof', 'below', 'shoulder')('shoulder', 'below', 'neck')	(('hoof', 'below', 'neck'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'part of', 'eyes'), False)	(('eyes', 'has part', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nostril', 'above', 'head'), False)	(('head', 'below', 'nostril'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('muzzle', 'part of', 'nostril'), False)	(('nostril', 'has part', 'muzzle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('muzzle', 'behind', 'neck'), False)	(('neck', 'in front of', 'muzzle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shoulder', 'above', 'neck'), False)	(('neck', 'below', 'shoulder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hoof', 'above', 'shoulder'), False)	(('shoulder', 'below', 'hoof'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shoulder', 'behind', 'back'), False)	(('back', 'in front of', 'shoulder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fore udder', 'above', 'back'), False)	(('back', 'below', 'fore udder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fore udder', 'part of', 'teat'), False)	(('teat', 'has part', 'fore udder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shoulder', 'behind', 'fore udder'), False)	(('fore udder', 'in front of', 'shoulder'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('neck', 'above', 'hoof'), True)	(('hoof', 'above', 'neck'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('hoof', 'below', 'neck'), True)	(('neck', 'below', 'hoof'), False)
Round 3 ...
cow worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'above', 'eye'), True)	(('eye', 'above', 'horn'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('horn', 'above', 'eye'), True)	(('eye', 'below', 'horn'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'tail'), True)	(('tail', 'above', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'tail'), True)	(('tail', 'below', 'eye'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'above', 'shoulder'), True)	(('shoulder', 'above', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'shoulder'), True)	(('shoulder', 'below', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shoulder', 'above', 'elbow'), True)	(('elbow', 'above', 'shoulder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shoulder', 'above', 'elbow'), True)	(('elbow', 'below', 'shoulder'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('elbow', 'above', 'teat'), True)	(('teat', 'above', 'elbow'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('elbow', 'above', 'teat'), True)	(('teat', 'below', 'elbow'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('teat', 'above', 'toe'), True)	(('toe', 'above', 'teat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('teat', 'above', 'toe'), True)	(('toe', 'below', 'teat'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('toe', 'part of', 'hoof'), True)	(('hoof', 'part of', 'toe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toe', 'part of', 'hoof'), True)	(('hoof', 'has part', 'toe'), True)
Constraint 4 (True antecedent)	('horn', 'above', 'eye')('eye', 'above', 'tail')	(('horn', 'above', 'tail'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'tail')('tail', 'above', 'shoulder')	(('eye', 'above', 'shoulder'), True)
Constraint 4 (True antecedent)	('tail', 'above', 'shoulder')('shoulder', 'above', 'elbow')	(('tail', 'above', 'elbow'), True)
Constraint 4 (True antecedent)	('shoulder', 'above', 'elbow')('elbow', 'above', 'teat')	(('shoulder', 'above', 'teat'), True)
Constraint 4 (True antecedent)	('elbow', 'above', 'teat')('teat', 'above', 'toe')	(('elbow', 'above', 'toe'), True)
Constraint 4 (True antecedent)	('tail', 'below', 'eye')('eye', 'below', 'horn')	(('tail', 'below', 'horn'), True)
Constraint 4 (True antecedent)	('shoulder', 'below', 'tail')('tail', 'below', 'eye')	(('shoulder', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('elbow', 'below', 'shoulder')('shoulder', 'below', 'tail')	(('elbow', 'below', 'tail'), True)
Constraint 4 (True antecedent)	('teat', 'below', 'elbow')('elbow', 'below', 'shoulder')	(('teat', 'below', 'shoulder'), True)
Constraint 4 (True antecedent)	('toe', 'below', 'teat')('teat', 'below', 'elbow')	(('toe', 'below', 'elbow'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('eye', 'above', 'horn'), False)	(('horn', 'below', 'eye'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'above', 'eye'), False)	(('eye', 'below', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shoulder', 'above', 'tail'), False)	(('tail', 'below', 'shoulder'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('elbow', 'above', 'shoulder'), False)	(('shoulder', 'below', 'elbow'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('teat', 'above', 'elbow'), False)	(('elbow', 'below', 'teat'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('toe', 'above', 'teat'), False)	(('teat', 'below', 'toe'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('hoof', 'part of', 'toe'), False)	(('toe', 'has part', 'hoof'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'above', 'tail'), True)	(('tail', 'above', 'horn'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'shoulder'), True)	(('shoulder', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'above', 'elbow'), True)	(('elbow', 'above', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shoulder', 'above', 'teat'), True)	(('teat', 'above', 'shoulder'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('elbow', 'above', 'toe'), True)	(('toe', 'above', 'elbow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'below', 'horn'), True)	(('horn', 'below', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shoulder', 'below', 'eye'), True)	(('eye', 'below', 'shoulder'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('elbow', 'below', 'tail'), True)	(('tail', 'below', 'elbow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('teat', 'below', 'shoulder'), True)	(('shoulder', 'below', 'teat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe', 'below', 'elbow'), True)	(('elbow', 'below', 'toe'), False)
Constraint 4 (True antecedent)	('horn', 'above', 'eye')('eye', 'above', 'shoulder')	(('horn', 'above', 'shoulder'), True)
Constraint 4 (True antecedent)	('horn', 'above', 'tail')('tail', 'above', 'elbow')	(('horn', 'above', 'elbow'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'tail')('tail', 'above', 'elbow')	(('eye', 'above', 'elbow'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'shoulder')('shoulder', 'above', 'teat')	(('eye', 'above', 'teat'), True)
Constraint 4 (True antecedent)	('tail', 'above', 'shoulder')('shoulder', 'above', 'teat')	(('tail', 'above', 'teat'), True)
Constraint 4 (True antecedent)	('tail', 'above', 'elbow')('elbow', 'above', 'toe')	(('tail', 'above', 'toe'), True)
Constraint 4 (True antecedent)	('shoulder', 'above', 'elbow')('elbow', 'above', 'toe')	(('shoulder', 'above', 'toe'), True)
Constraint 4 (True antecedent)	('shoulder', 'below', 'tail')('tail', 'below', 'horn')	(('shoulder', 'below', 'horn'), True)
Constraint 4 (True antecedent)	('elbow', 'below', 'shoulder')('shoulder', 'below', 'eye')	(('elbow', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('elbow', 'below', 'tail')('tail', 'below', 'horn')	(('elbow', 'below', 'horn'), True)
Constraint 4 (True antecedent)	('teat', 'below', 'elbow')('elbow', 'below', 'tail')	(('teat', 'below', 'tail'), True)
Constraint 4 (True antecedent)	('teat', 'below', 'shoulder')('shoulder', 'below', 'eye')	(('teat', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('toe', 'below', 'teat')('teat', 'below', 'shoulder')	(('toe', 'below', 'shoulder'), True)
Constraint 4 (True antecedent)	('toe', 'below', 'elbow')('elbow', 'below', 'tail')	(('toe', 'below', 'tail'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'above', 'shoulder'), True)	(('shoulder', 'above', 'horn'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'above', 'elbow'), True)	(('elbow', 'above', 'horn'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'elbow'), True)	(('elbow', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'teat'), True)	(('teat', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'above', 'teat'), True)	(('teat', 'above', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'above', 'toe'), True)	(('toe', 'above', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shoulder', 'above', 'toe'), True)	(('toe', 'above', 'shoulder'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('shoulder', 'below', 'horn'), True)	(('horn', 'below', 'shoulder'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('elbow', 'below', 'eye'), True)	(('eye', 'below', 'elbow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('elbow', 'below', 'horn'), True)	(('horn', 'below', 'elbow'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('teat', 'below', 'tail'), True)	(('tail', 'below', 'teat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('teat', 'below', 'eye'), True)	(('eye', 'below', 'teat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe', 'below', 'shoulder'), True)	(('shoulder', 'below', 'toe'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe', 'below', 'tail'), True)	(('tail', 'below', 'toe'), False)
Constraint 4 (True antecedent)	('horn', 'above', 'eye')('eye', 'above', 'teat')	(('horn', 'above', 'teat'), True)
Constraint 4 (True antecedent)	('horn', 'above', 'tail')('tail', 'above', 'toe')	(('horn', 'above', 'toe'), True)
Constraint 4 (True antecedent)	('eye', 'above', 'tail')('tail', 'above', 'toe')	(('eye', 'above', 'toe'), True)
Constraint 4 (True antecedent)	('teat', 'below', 'elbow')('elbow', 'below', 'horn')	(('teat', 'below', 'horn'), True)
Constraint 4 (True antecedent)	('toe', 'below', 'teat')('teat', 'below', 'eye')	(('toe', 'below', 'eye'), True)
Constraint 4 (True antecedent)	('toe', 'below', 'elbow')('elbow', 'below', 'horn')	(('toe', 'below', 'horn'), True)
Round 4 ...
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'above', 'teat'), True)	(('teat', 'above', 'horn'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('horn', 'above', 'toe'), True)	(('toe', 'above', 'horn'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eye', 'above', 'toe'), True)	(('toe', 'above', 'eye'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('teat', 'below', 'horn'), True)	(('horn', 'below', 'teat'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe', 'below', 'eye'), True)	(('eye', 'below', 'toe'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('toe', 'below', 'horn'), True)	(('horn', 'below', 'toe'), False)
Round 5 ...
electric stove worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('cook timer', 'part of', 'control panel'), True)	(('control panel', 'part of', 'cook timer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cook timer', 'part of', 'control panel'), True)	(('control panel', 'has part', 'cook timer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control panel', 'above', 'cooktop'), True)	(('cooktop', 'above', 'control panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control panel', 'above', 'cooktop'), True)	(('cooktop', 'below', 'control panel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control knob', 'part of', 'control panel'), True)	(('control panel', 'part of', 'control knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control knob', 'part of', 'control panel'), True)	(('control panel', 'has part', 'control knob'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooktop', 'above', 'oven'), True)	(('oven', 'above', 'cooktop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooktop', 'above', 'oven'), True)	(('oven', 'below', 'cooktop'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('oven', 'above', 'drawer'), True)	(('drawer', 'above', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'above', 'drawer'), True)	(('drawer', 'below', 'oven'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('window', 'part of', 'oven'), True)	(('oven', 'part of', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'part of', 'oven'), True)	(('oven', 'has part', 'window'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'part of', 'oven'), True)	(('oven', 'part of', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'oven'), True)	(('oven', 'has part', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rack', 'inside', 'oven'), True)	(('oven', 'inside', 'rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rack', 'inside', 'oven'), True)	(('oven', 'contains', 'rack'), True)
Constraint 4 (True antecedent)	('control panel', 'above', 'cooktop')('cooktop', 'above', 'oven')	(('control panel', 'above', 'oven'), True)
Constraint 4 (True antecedent)	('cooktop', 'above', 'oven')('oven', 'above', 'drawer')	(('cooktop', 'above', 'drawer'), True)
Constraint 4 (True antecedent)	('oven', 'below', 'cooktop')('cooktop', 'below', 'control panel')	(('oven', 'below', 'control panel'), True)
Constraint 4 (True antecedent)	('drawer', 'below', 'oven')('oven', 'below', 'cooktop')	(('drawer', 'below', 'cooktop'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('control panel', 'part of', 'cook timer'), False)	(('cook timer', 'has part', 'control panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooktop', 'above', 'control panel'), False)	(('control panel', 'below', 'cooktop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control panel', 'part of', 'control knob'), False)	(('control knob', 'has part', 'control panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'above', 'cooktop'), False)	(('cooktop', 'below', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drawer', 'above', 'oven'), False)	(('oven', 'below', 'drawer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'part of', 'window'), False)	(('window', 'has part', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'part of', 'handle'), False)	(('handle', 'has part', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'inside', 'rack'), False)	(('rack', 'contains', 'oven'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('control panel', 'above', 'oven'), True)	(('oven', 'above', 'control panel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cooktop', 'above', 'drawer'), True)	(('drawer', 'above', 'cooktop'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oven', 'below', 'control panel'), True)	(('control panel', 'below', 'oven'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drawer', 'below', 'cooktop'), True)	(('cooktop', 'below', 'drawer'), False)
Constraint 4 (True antecedent)	('control panel', 'above', 'cooktop')('cooktop', 'above', 'drawer')	(('control panel', 'above', 'drawer'), True)
Constraint 4 (True antecedent)	('drawer', 'below', 'oven')('oven', 'below', 'control panel')	(('drawer', 'below', 'control panel'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('control panel', 'above', 'drawer'), True)	(('drawer', 'above', 'control panel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drawer', 'below', 'control panel'), True)	(('control panel', 'below', 'drawer'), False)
Round 4 ...
electric stove worker_112...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('signal lamp', 'part of', 'control knob'), True)	(('control knob', 'part of', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'part of', 'control knob'), True)	(('control knob', 'has part', 'signal lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control knob', 'part of', 'control panel'), True)	(('control panel', 'part of', 'control knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control knob', 'part of', 'control panel'), True)	(('control panel', 'has part', 'control knob'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control panel', 'above', 'cooktop'), True)	(('cooktop', 'above', 'control panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control panel', 'above', 'cooktop'), True)	(('cooktop', 'below', 'control panel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('clock timer', 'part of', 'control panel'), True)	(('control panel', 'part of', 'clock timer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('clock timer', 'part of', 'control panel'), True)	(('control panel', 'has part', 'clock timer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooktop', 'requires', 'control knob'), True)	(('control knob', 'requires', 'cooktop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooktop', 'requires', 'control knob'), True)	(('control knob', 'required by', 'cooktop'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooktop', 'above', 'oven'), True)	(('oven', 'above', 'cooktop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooktop', 'above', 'oven'), True)	(('oven', 'below', 'cooktop'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('surface element', 'part of', 'cooktop'), True)	(('cooktop', 'part of', 'surface element'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('surface element', 'part of', 'cooktop'), True)	(('cooktop', 'has part', 'surface element'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('oven', 'above', 'drawer'), True)	(('drawer', 'above', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'above', 'drawer'), True)	(('drawer', 'below', 'oven'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rack', 'inside', 'oven'), True)	(('oven', 'inside', 'rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rack', 'inside', 'oven'), True)	(('oven', 'contains', 'rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('oven', 'requires', 'control knob'), True)	(('control knob', 'requires', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'requires', 'control knob'), True)	(('control knob', 'required by', 'oven'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'part of', 'window'), True)	(('window', 'part of', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'part of', 'window'), True)	(('window', 'has part', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('window', 'part of', 'oven'), True)	(('oven', 'part of', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'part of', 'oven'), True)	(('oven', 'has part', 'window'), True)
Constraint 4 (True antecedent)	('control panel', 'above', 'cooktop')('cooktop', 'above', 'oven')	(('control panel', 'above', 'oven'), True)
Constraint 4 (True antecedent)	('cooktop', 'above', 'oven')('oven', 'above', 'drawer')	(('cooktop', 'above', 'drawer'), True)
Constraint 4 (True antecedent)	('oven', 'below', 'cooktop')('cooktop', 'below', 'control panel')	(('oven', 'below', 'control panel'), True)
Constraint 4 (True antecedent)	('drawer', 'below', 'oven')('oven', 'below', 'cooktop')	(('drawer', 'below', 'cooktop'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('control knob', 'part of', 'signal lamp'), False)	(('signal lamp', 'has part', 'control knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control panel', 'part of', 'control knob'), False)	(('control knob', 'has part', 'control panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooktop', 'above', 'control panel'), False)	(('control panel', 'below', 'cooktop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control panel', 'part of', 'clock timer'), False)	(('clock timer', 'has part', 'control panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control knob', 'requires', 'cooktop'), False)	(('cooktop', 'required by', 'control knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'above', 'cooktop'), False)	(('cooktop', 'below', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooktop', 'part of', 'surface element'), False)	(('surface element', 'has part', 'cooktop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drawer', 'above', 'oven'), False)	(('oven', 'below', 'drawer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'inside', 'rack'), False)	(('rack', 'contains', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control knob', 'requires', 'oven'), False)	(('oven', 'required by', 'control knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'part of', 'handle'), False)	(('handle', 'has part', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'part of', 'window'), False)	(('window', 'has part', 'oven'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('control panel', 'above', 'oven'), True)	(('oven', 'above', 'control panel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cooktop', 'above', 'drawer'), True)	(('drawer', 'above', 'cooktop'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oven', 'below', 'control panel'), True)	(('control panel', 'below', 'oven'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drawer', 'below', 'cooktop'), True)	(('cooktop', 'below', 'drawer'), False)
Constraint 4 (True antecedent)	('control panel', 'above', 'cooktop')('cooktop', 'above', 'drawer')	(('control panel', 'above', 'drawer'), True)
Constraint 4 (True antecedent)	('drawer', 'below', 'oven')('oven', 'below', 'control panel')	(('drawer', 'below', 'control panel'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('control panel', 'above', 'drawer'), True)	(('drawer', 'above', 'control panel'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drawer', 'below', 'control panel'), True)	(('control panel', 'below', 'drawer'), False)
Round 4 ...
electric stove worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('control panel', 'part of', 'backguard'), True)	(('backguard', 'part of', 'control panel'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control panel', 'part of', 'backguard'), True)	(('backguard', 'has part', 'control panel'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('control knob', 'part of', 'backguard'), True)	(('backguard', 'part of', 'control knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('control knob', 'part of', 'backguard'), True)	(('backguard', 'has part', 'control knob'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('clock timer', 'part of', 'backguard'), True)	(('backguard', 'part of', 'clock timer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('clock timer', 'part of', 'backguard'), True)	(('backguard', 'has part', 'clock timer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('signal lamp', 'part of', 'backguard'), True)	(('backguard', 'part of', 'signal lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('signal lamp', 'part of', 'backguard'), True)	(('backguard', 'has part', 'signal lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('backguard', 'above', 'cooktop'), True)	(('cooktop', 'above', 'backguard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('backguard', 'above', 'cooktop'), True)	(('cooktop', 'below', 'backguard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooktop', 'above', 'oven'), True)	(('oven', 'above', 'cooktop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooktop', 'above', 'oven'), True)	(('oven', 'below', 'cooktop'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('surface element', 'part of', 'cooktop'), True)	(('cooktop', 'part of', 'surface element'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('surface element', 'part of', 'cooktop'), True)	(('cooktop', 'has part', 'surface element'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('oven', 'above', 'drawer'), True)	(('drawer', 'above', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'above', 'drawer'), True)	(('drawer', 'below', 'oven'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rack', 'inside', 'oven'), True)	(('oven', 'inside', 'rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rack', 'inside', 'oven'), True)	(('oven', 'contains', 'rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('rack', 'behind', 'window'), True)	(('window', 'behind', 'rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('rack', 'behind', 'window'), True)	(('window', 'in front of', 'rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'above', 'window'), True)	(('window', 'above', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'window'), True)	(('window', 'below', 'handle'), True)
Constraint 4 (True antecedent)	('backguard', 'above', 'cooktop')('cooktop', 'above', 'oven')	(('backguard', 'above', 'oven'), True)
Constraint 4 (True antecedent)	('cooktop', 'above', 'oven')('oven', 'above', 'drawer')	(('cooktop', 'above', 'drawer'), True)
Constraint 4 (True antecedent)	('oven', 'below', 'cooktop')('cooktop', 'below', 'backguard')	(('oven', 'below', 'backguard'), True)
Constraint 4 (True antecedent)	('drawer', 'below', 'oven')('oven', 'below', 'cooktop')	(('drawer', 'below', 'cooktop'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('backguard', 'part of', 'control panel'), False)	(('control panel', 'has part', 'backguard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('backguard', 'part of', 'control knob'), False)	(('control knob', 'has part', 'backguard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('backguard', 'part of', 'clock timer'), False)	(('clock timer', 'has part', 'backguard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('backguard', 'part of', 'signal lamp'), False)	(('signal lamp', 'has part', 'backguard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooktop', 'above', 'backguard'), False)	(('backguard', 'below', 'cooktop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'above', 'cooktop'), False)	(('cooktop', 'below', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooktop', 'part of', 'surface element'), False)	(('surface element', 'has part', 'cooktop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drawer', 'above', 'oven'), False)	(('oven', 'below', 'drawer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('oven', 'inside', 'rack'), False)	(('rack', 'contains', 'oven'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'behind', 'rack'), False)	(('rack', 'in front of', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'above', 'handle'), False)	(('handle', 'below', 'window'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('backguard', 'above', 'oven'), True)	(('oven', 'above', 'backguard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('cooktop', 'above', 'drawer'), True)	(('drawer', 'above', 'cooktop'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('oven', 'below', 'backguard'), True)	(('backguard', 'below', 'oven'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drawer', 'below', 'cooktop'), True)	(('cooktop', 'below', 'drawer'), False)
Constraint 4 (True antecedent)	('backguard', 'above', 'cooktop')('cooktop', 'above', 'drawer')	(('backguard', 'above', 'drawer'), True)
Constraint 4 (True antecedent)	('drawer', 'below', 'oven')('oven', 'below', 'backguard')	(('drawer', 'below', 'backguard'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('backguard', 'above', 'drawer'), True)	(('drawer', 'above', 'backguard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('drawer', 'below', 'backguard'), True)	(('backguard', 'below', 'drawer'), False)
Round 4 ...
electric tea kettle worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('spout', 'connects', 'body'), True)	(('body', 'connects', 'spout'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'body'), True)	(('body', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'body'), True)	(('body', 'below', 'lid'), True)
Constraint 1: x rln y <-> y rln x	(('lid', 'connects', 'body'), True)	(('body', 'connects', 'lid'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'handle'), True)	(('handle', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'base'), True)	(('base', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'base'), True)	(('base', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'base'), True)	(('base', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lamp', 'part of', 'body'), True)	(('body', 'part of', 'lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lamp', 'part of', 'body'), True)	(('body', 'has part', 'lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'part of', 'body'), True)	(('body', 'part of', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'part of', 'body'), True)	(('body', 'has part', 'switch'), True)
Constraint 1: x rln y <-> y rln x	(('power plug', 'connects', 'base'), True)	(('base', 'connects', 'power plug'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'body')('body', 'above', 'base')	(('lid', 'above', 'base'), True)
Constraint 4 (True antecedent)	('base', 'below', 'body')('body', 'below', 'lid')	(('base', 'below', 'lid'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'lid'), False)	(('lid', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'body'), False)	(('body', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'lamp'), False)	(('lamp', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'switch'), False)	(('switch', 'has part', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'base'), True)	(('base', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'lid'), True)	(('lid', 'below', 'base'), False)
Round 3 ...
electric tea kettle worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'spout'), True)	(('spout', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'spout'), True)	(('spout', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('spout', 'above', 'handle'), True)	(('handle', 'above', 'spout'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('spout', 'above', 'handle'), True)	(('handle', 'below', 'spout'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'next to', 'body'), True)	(('body', 'next to', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'base'), True)	(('base', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'base'), True)	(('base', 'below', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('on switch', 'part of', 'body'), True)	(('body', 'part of', 'on switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('on switch', 'part of', 'body'), True)	(('body', 'has part', 'on switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('on switch', 'above', 'base'), True)	(('base', 'above', 'on switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('on switch', 'above', 'base'), True)	(('base', 'below', 'on switch'), True)
Constraint 1: x rln y <-> y rln x	(('power plug', 'next to', 'base'), True)	(('base', 'next to', 'power plug'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'spout')('spout', 'above', 'handle')	(('lid', 'above', 'handle'), True)
Constraint 4 (True antecedent)	('handle', 'below', 'spout')('spout', 'below', 'lid')	(('handle', 'below', 'lid'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('spout', 'above', 'lid'), False)	(('lid', 'below', 'spout'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'spout'), False)	(('spout', 'below', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'body'), False)	(('body', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'part of', 'on switch'), False)	(('on switch', 'has part', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'on switch'), False)	(('on switch', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'handle'), True)	(('handle', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'below', 'lid'), True)	(('lid', 'below', 'handle'), False)
Round 3 ...
electric tea kettle worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'body'), True)	(('body', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'body'), True)	(('body', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'base'), True)	(('base', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'base'), True)	(('base', 'below', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'base'), True)	(('base', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('spout', 'connects', 'body'), True)	(('body', 'connects', 'spout'), True)
Constraint 1: x rln y <-> y rln x	(('handle', 'connects', 'body'), True)	(('body', 'connects', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'above', 'on switch'), True)	(('on switch', 'above', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'on switch'), True)	(('on switch', 'below', 'handle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('handle', 'above', 'lamp'), True)	(('lamp', 'above', 'handle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('handle', 'above', 'lamp'), True)	(('lamp', 'below', 'handle'), True)
Constraint 1: x rln y <-> y rln x	(('lamp', 'connects', 'body'), True)	(('body', 'connects', 'lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lamp', 'above', 'on switch'), True)	(('on switch', 'above', 'lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lamp', 'above', 'on switch'), True)	(('on switch', 'below', 'lamp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power plug', 'behind', 'body'), True)	(('body', 'behind', 'power plug'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power plug', 'behind', 'body'), True)	(('body', 'in front of', 'power plug'), True)
Constraint 1: x rln y <-> y rln x	(('power plug', 'connects', 'body'), True)	(('body', 'connects', 'power plug'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power plug', 'requires', 'lamp'), True)	(('lamp', 'requires', 'power plug'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power plug', 'requires', 'lamp'), True)	(('lamp', 'required by', 'power plug'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power plug', 'requires', 'on switch'), True)	(('on switch', 'requires', 'power plug'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power plug', 'requires', 'on switch'), True)	(('on switch', 'required by', 'power plug'), True)
Constraint 4 (True antecedent)	('lid', 'above', 'body')('body', 'above', 'base')	(('lid', 'above', 'base'), True)
Constraint 4 (True antecedent)	('base', 'below', 'body')('body', 'below', 'lid')	(('base', 'below', 'lid'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'lid'), False)	(('lid', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'body'), False)	(('body', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('on switch', 'above', 'handle'), False)	(('handle', 'below', 'on switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lamp', 'above', 'handle'), False)	(('handle', 'below', 'lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('on switch', 'above', 'lamp'), False)	(('lamp', 'below', 'on switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'power plug'), False)	(('power plug', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lamp', 'requires', 'power plug'), False)	(('power plug', 'required by', 'lamp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('on switch', 'requires', 'power plug'), False)	(('power plug', 'required by', 'on switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'base'), True)	(('base', 'above', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'lid'), True)	(('lid', 'below', 'base'), False)
Round 3 ...
hot air balloon worker_100...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('parachute vale', 'above', 'panels'), True)	(('panels', 'above', 'parachute vale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute vale', 'above', 'panels'), True)	(('panels', 'below', 'parachute vale'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('parachute vale', 'above', 'gore'), True)	(('gore', 'above', 'parachute vale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute vale', 'above', 'gore'), True)	(('gore', 'below', 'parachute vale'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('parachute vale', 'part of', 'envelope'), True)	(('envelope', 'part of', 'parachute vale'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute vale', 'part of', 'envelope'), True)	(('envelope', 'has part', 'parachute vale'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'part of', 'evenlope'), True)	(('evenlope', 'part of', 'panels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('panels', 'part of', 'evenlope'), True)	(('evenlope', 'has part', 'panels'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gore', 'part of', 'evenlope'), True)	(('evenlope', 'part of', 'gore'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gore', 'part of', 'evenlope'), True)	(('evenlope', 'has part', 'gore'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('envelope', 'above', 'skirt'), True)	(('skirt', 'above', 'envelope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('envelope', 'above', 'skirt'), True)	(('skirt', 'below', 'envelope'), True)
Constraint 1: x rln y <-> y rln x	(('envelope', 'connects', 'skirt'), True)	(('skirt', 'connects', 'envelope'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('skirt', 'above', 'basket'), True)	(('basket', 'above', 'skirt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skirt', 'above', 'basket'), True)	(('basket', 'below', 'skirt'), True)
Constraint 1: x rln y <-> y rln x	(('skirt', 'connects', 'basket'), True)	(('basket', 'connects', 'skirt'), True)
Constraint 1: x rln y <-> y rln x	(('basket', 'connects', 'burners'), True)	(('burners', 'connects', 'basket'), True)
Constraint 1: x rln y <-> y rln x	(('burners', 'connects', 'propane tanks'), True)	(('propane tanks', 'connects', 'burners'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('burners', 'requires', 'propane tanks'), True)	(('propane tanks', 'requires', 'burners'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('burners', 'requires', 'propane tanks'), True)	(('propane tanks', 'required by', 'burners'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('propane tanks', 'inside', 'basket'), True)	(('basket', 'inside', 'propane tanks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propane tanks', 'inside', 'basket'), True)	(('basket', 'contains', 'propane tanks'), True)
Constraint 1: x rln y <-> y rln x	(('parachute valve cord', 'connects', 'basket'), True)	(('basket', 'connects', 'parachute valve cord'), True)
Constraint 1: x rln y <-> y rln x	(('parachute valve cord', 'connects', 'parchute valve'), True)	(('parchute valve', 'connects', 'parachute valve cord'), True)
Constraint 4 (True antecedent)	('envelope', 'above', 'skirt')('skirt', 'above', 'basket')	(('envelope', 'above', 'basket'), True)
Constraint 4 (True antecedent)	('basket', 'below', 'skirt')('skirt', 'below', 'envelope')	(('basket', 'below', 'envelope'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('panels', 'above', 'parachute vale'), False)	(('parachute vale', 'below', 'panels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gore', 'above', 'parachute vale'), False)	(('parachute vale', 'below', 'gore'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('envelope', 'part of', 'parachute vale'), False)	(('parachute vale', 'has part', 'envelope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('evenlope', 'part of', 'panels'), False)	(('panels', 'has part', 'evenlope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('evenlope', 'part of', 'gore'), False)	(('gore', 'has part', 'evenlope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skirt', 'above', 'envelope'), False)	(('envelope', 'below', 'skirt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('basket', 'above', 'skirt'), False)	(('skirt', 'below', 'basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propane tanks', 'requires', 'burners'), False)	(('burners', 'required by', 'propane tanks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('basket', 'inside', 'propane tanks'), False)	(('propane tanks', 'contains', 'basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('envelope', 'above', 'basket'), True)	(('basket', 'above', 'envelope'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('basket', 'below', 'envelope'), True)	(('envelope', 'below', 'basket'), False)
Round 3 ...
hot air balloon worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('parachute valve', 'part of', 'envelope'), True)	(('envelope', 'part of', 'parachute valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute valve', 'part of', 'envelope'), True)	(('envelope', 'has part', 'parachute valve'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gore', 'part of', 'envelope'), True)	(('envelope', 'part of', 'gore'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gore', 'part of', 'envelope'), True)	(('envelope', 'has part', 'gore'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'part of', 'envelope'), True)	(('envelope', 'part of', 'panels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('panels', 'part of', 'envelope'), True)	(('envelope', 'has part', 'panels'), True)
Constraint 1: x rln y <-> y rln x	(('envelope', 'connects', 'parachute valve cord'), True)	(('parachute valve cord', 'connects', 'envelope'), True)
Constraint 1: x rln y <-> y rln x	(('envelope', 'connects', 'skirt'), True)	(('skirt', 'connects', 'envelope'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('envelope', 'above', 'skirt'), True)	(('skirt', 'above', 'envelope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('envelope', 'above', 'skirt'), True)	(('skirt', 'below', 'envelope'), True)
Constraint 1: x rln y <-> y rln x	(('skirt', 'connects', 'parachute valve cord'), True)	(('parachute valve cord', 'connects', 'skirt'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('skirt', 'above', 'parachute valve cord'), True)	(('parachute valve cord', 'above', 'skirt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skirt', 'above', 'parachute valve cord'), True)	(('parachute valve cord', 'below', 'skirt'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('parachute valve cord', 'above', 'basket'), True)	(('basket', 'above', 'parachute valve cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute valve cord', 'above', 'basket'), True)	(('basket', 'below', 'parachute valve cord'), True)
Constraint 1: x rln y <-> y rln x	(('basket', 'connects', 'burners'), True)	(('burners', 'connects', 'basket'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('burners', 'above', 'propane tanks'), True)	(('propane tanks', 'above', 'burners'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('burners', 'above', 'propane tanks'), True)	(('propane tanks', 'below', 'burners'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('propane tanks', 'inside', 'basket'), True)	(('basket', 'inside', 'propane tanks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propane tanks', 'inside', 'basket'), True)	(('basket', 'contains', 'propane tanks'), True)
Constraint 4 (True antecedent)	('envelope', 'above', 'skirt')('skirt', 'above', 'parachute valve cord')	(('envelope', 'above', 'parachute valve cord'), True)
Constraint 4 (True antecedent)	('skirt', 'above', 'parachute valve cord')('parachute valve cord', 'above', 'basket')	(('skirt', 'above', 'basket'), True)
Constraint 4 (True antecedent)	('parachute valve cord', 'below', 'skirt')('skirt', 'below', 'envelope')	(('parachute valve cord', 'below', 'envelope'), True)
Constraint 4 (True antecedent)	('basket', 'below', 'parachute valve cord')('parachute valve cord', 'below', 'skirt')	(('basket', 'below', 'skirt'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('envelope', 'part of', 'parachute valve'), False)	(('parachute valve', 'has part', 'envelope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('envelope', 'part of', 'gore'), False)	(('gore', 'has part', 'envelope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('envelope', 'part of', 'panels'), False)	(('panels', 'has part', 'envelope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skirt', 'above', 'envelope'), False)	(('envelope', 'below', 'skirt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute valve cord', 'above', 'skirt'), False)	(('skirt', 'below', 'parachute valve cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('basket', 'above', 'parachute valve cord'), False)	(('parachute valve cord', 'below', 'basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propane tanks', 'above', 'burners'), False)	(('burners', 'below', 'propane tanks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('basket', 'inside', 'propane tanks'), False)	(('propane tanks', 'contains', 'basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('envelope', 'above', 'parachute valve cord'), True)	(('parachute valve cord', 'above', 'envelope'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('skirt', 'above', 'basket'), True)	(('basket', 'above', 'skirt'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('parachute valve cord', 'below', 'envelope'), True)	(('envelope', 'below', 'parachute valve cord'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('basket', 'below', 'skirt'), True)	(('skirt', 'below', 'basket'), False)
Constraint 4 (True antecedent)	('envelope', 'above', 'skirt')('skirt', 'above', 'basket')	(('envelope', 'above', 'basket'), True)
Constraint 4 (True antecedent)	('basket', 'below', 'parachute valve cord')('parachute valve cord', 'below', 'envelope')	(('basket', 'below', 'envelope'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('envelope', 'above', 'basket'), True)	(('basket', 'above', 'envelope'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('basket', 'below', 'envelope'), True)	(('envelope', 'below', 'basket'), False)
Round 4 ...
hot air balloon worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('parachute valve', 'part of', 'envelope'), True)	(('envelope', 'part of', 'parachute valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute valve', 'part of', 'envelope'), True)	(('envelope', 'has part', 'parachute valve'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'part of', 'parachute valve'), True)	(('parachute valve', 'part of', 'panels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('panels', 'part of', 'parachute valve'), True)	(('parachute valve', 'has part', 'panels'), True)
Constraint 1: x rln y <-> y rln x	(('panels', 'connects', 'gore'), True)	(('gore', 'connects', 'panels'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('panels', 'part of', 'envelope'), True)	(('envelope', 'part of', 'panels'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('panels', 'part of', 'envelope'), True)	(('envelope', 'has part', 'panels'), True)
Constraint 1: x rln y <-> y rln x	(('panels', 'connects', 'skirt'), True)	(('skirt', 'connects', 'panels'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gore', 'part of', 'parachute valve'), True)	(('parachute valve', 'part of', 'gore'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gore', 'part of', 'parachute valve'), True)	(('parachute valve', 'has part', 'gore'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('gore', 'part of', 'envelope'), True)	(('envelope', 'part of', 'gore'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('gore', 'part of', 'envelope'), True)	(('envelope', 'has part', 'gore'), True)
Constraint 1: x rln y <-> y rln x	(('gore', 'connects', 'skirt'), True)	(('skirt', 'connects', 'gore'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('skirt', 'above', 'parachute valve cord'), True)	(('parachute valve cord', 'above', 'skirt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skirt', 'above', 'parachute valve cord'), True)	(('parachute valve cord', 'below', 'skirt'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('skirt', 'above', 'burners'), True)	(('burners', 'above', 'skirt'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('skirt', 'above', 'burners'), True)	(('burners', 'below', 'skirt'), True)
Constraint 1: x rln y <-> y rln x	(('skirt', 'connects', 'burners'), True)	(('burners', 'connects', 'skirt'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('burners', 'requires', 'propane tanks'), True)	(('propane tanks', 'requires', 'burners'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('burners', 'requires', 'propane tanks'), True)	(('propane tanks', 'required by', 'burners'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('burners', 'above', 'propane tanks'), True)	(('propane tanks', 'above', 'burners'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('burners', 'above', 'propane tanks'), True)	(('propane tanks', 'below', 'burners'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('propane tanks', 'inside', 'basket'), True)	(('basket', 'inside', 'propane tanks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propane tanks', 'inside', 'basket'), True)	(('basket', 'contains', 'propane tanks'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('burners', 'above', 'basket'), True)	(('basket', 'above', 'burners'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('burners', 'above', 'basket'), True)	(('basket', 'below', 'burners'), True)
Constraint 4 (True antecedent)	('skirt', 'above', 'burners')('burners', 'above', 'propane tanks')	(('skirt', 'above', 'propane tanks'), True)
Constraint 4 (True antecedent)	('skirt', 'above', 'burners')('burners', 'above', 'basket')	(('skirt', 'above', 'basket'), True)
Constraint 4 (True antecedent)	('propane tanks', 'below', 'burners')('burners', 'below', 'skirt')	(('propane tanks', 'below', 'skirt'), True)
Constraint 4 (True antecedent)	('basket', 'below', 'burners')('burners', 'below', 'skirt')	(('basket', 'below', 'skirt'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('envelope', 'part of', 'parachute valve'), False)	(('parachute valve', 'has part', 'envelope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute valve', 'part of', 'panels'), False)	(('panels', 'has part', 'parachute valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('envelope', 'part of', 'panels'), False)	(('panels', 'has part', 'envelope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute valve', 'part of', 'gore'), False)	(('gore', 'has part', 'parachute valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('envelope', 'part of', 'gore'), False)	(('gore', 'has part', 'envelope'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('parachute valve cord', 'above', 'skirt'), False)	(('skirt', 'below', 'parachute valve cord'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('burners', 'above', 'skirt'), False)	(('skirt', 'below', 'burners'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propane tanks', 'requires', 'burners'), False)	(('burners', 'required by', 'propane tanks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('propane tanks', 'above', 'burners'), False)	(('burners', 'below', 'propane tanks'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('basket', 'inside', 'propane tanks'), False)	(('propane tanks', 'contains', 'basket'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('basket', 'above', 'burners'), False)	(('burners', 'below', 'basket'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('skirt', 'above', 'propane tanks'), True)	(('propane tanks', 'above', 'skirt'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('skirt', 'above', 'basket'), True)	(('basket', 'above', 'skirt'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('propane tanks', 'below', 'skirt'), True)	(('skirt', 'below', 'propane tanks'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('basket', 'below', 'skirt'), True)	(('skirt', 'below', 'basket'), False)
Round 3 ...
humidifier worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('nozzle', 'connects', 'water tank'), True)	(('water tank', 'connects', 'nozzle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'above', 'water tank'), True)	(('water tank', 'above', 'nozzle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nozzle', 'above', 'water tank'), True)	(('water tank', 'below', 'nozzle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('water valve', 'part of', 'water tank'), True)	(('water tank', 'part of', 'water valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water valve', 'part of', 'water tank'), True)	(('water tank', 'has part', 'water valve'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('water tank', 'above', 'tank cap'), True)	(('tank cap', 'above', 'water tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water tank', 'above', 'tank cap'), True)	(('tank cap', 'below', 'water tank'), True)
Constraint 1: x rln y <-> y rln x	(('water tank', 'connects', 'tank cap'), True)	(('tank cap', 'connects', 'water tank'), True)
Constraint 1: x rln y <-> y rln x	(('tank cap', 'connects', 'base'), True)	(('base', 'connects', 'tank cap'), True)
Constraint 1: x rln y <-> y rln x	(('tank cap', 'connects', 'water valve'), True)	(('water valve', 'connects', 'tank cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tank cap', 'above', 'base'), True)	(('base', 'above', 'tank cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tank cap', 'above', 'base'), True)	(('base', 'below', 'tank cap'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('air outlet', 'part of', 'base'), True)	(('base', 'part of', 'air outlet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('air outlet', 'part of', 'base'), True)	(('base', 'has part', 'air outlet'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power knob', 'part of', 'bae'), True)	(('bae', 'part of', 'power knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power knob', 'part of', 'bae'), True)	(('bae', 'has part', 'power knob'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('water sensor', 'inside', 'base'), True)	(('base', 'inside', 'water sensor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water sensor', 'inside', 'base'), True)	(('base', 'contains', 'water sensor'), True)
Constraint 1: x rln y <-> y rln x	(('water sensor', 'next to', 'nebulizer'), True)	(('nebulizer', 'next to', 'water sensor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nebulizer', 'inside', 'base'), True)	(('base', 'inside', 'nebulizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nebulizer', 'inside', 'base'), True)	(('base', 'contains', 'nebulizer'), True)
Constraint 4 (True antecedent)	('nozzle', 'above', 'water tank')('water tank', 'above', 'tank cap')	(('nozzle', 'above', 'tank cap'), True)
Constraint 4 (True antecedent)	('water tank', 'above', 'tank cap')('tank cap', 'above', 'base')	(('water tank', 'above', 'base'), True)
Constraint 4 (True antecedent)	('tank cap', 'below', 'water tank')('water tank', 'below', 'nozzle')	(('tank cap', 'below', 'nozzle'), True)
Constraint 4 (True antecedent)	('base', 'below', 'tank cap')('tank cap', 'below', 'water tank')	(('base', 'below', 'water tank'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('water tank', 'above', 'nozzle'), False)	(('nozzle', 'below', 'water tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water tank', 'part of', 'water valve'), False)	(('water valve', 'has part', 'water tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tank cap', 'above', 'water tank'), False)	(('water tank', 'below', 'tank cap'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'tank cap'), False)	(('tank cap', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'air outlet'), False)	(('air outlet', 'has part', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bae', 'part of', 'power knob'), False)	(('power knob', 'has part', 'bae'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'inside', 'water sensor'), False)	(('water sensor', 'contains', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'inside', 'nebulizer'), False)	(('nebulizer', 'contains', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'above', 'tank cap'), True)	(('tank cap', 'above', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('water tank', 'above', 'base'), True)	(('base', 'above', 'water tank'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tank cap', 'below', 'nozzle'), True)	(('nozzle', 'below', 'tank cap'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'water tank'), True)	(('water tank', 'below', 'base'), False)
Constraint 4 (True antecedent)	('nozzle', 'above', 'water tank')('water tank', 'above', 'base')	(('nozzle', 'above', 'base'), True)
Constraint 4 (True antecedent)	('base', 'below', 'tank cap')('tank cap', 'below', 'nozzle')	(('base', 'below', 'nozzle'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'above', 'base'), True)	(('base', 'above', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'nozzle'), True)	(('nozzle', 'below', 'base'), False)
Round 4 ...
humidifier worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'above', 'water tank'), True)	(('water tank', 'above', 'nozzle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nozzle', 'above', 'water tank'), True)	(('water tank', 'below', 'nozzle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('water tank', 'above', 'water valve'), True)	(('water valve', 'above', 'water tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water tank', 'above', 'water valve'), True)	(('water valve', 'below', 'water tank'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('water valve', 'above', 'base'), True)	(('base', 'above', 'water valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water valve', 'above', 'base'), True)	(('base', 'below', 'water valve'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('water sensor', 'inside', 'base'), True)	(('base', 'inside', 'water sensor'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water sensor', 'inside', 'base'), True)	(('base', 'contains', 'water sensor'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nebulizer', 'inside', 'base'), True)	(('base', 'inside', 'nebulizer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nebulizer', 'inside', 'base'), True)	(('base', 'contains', 'nebulizer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power knob', 'part of', 'base'), True)	(('base', 'part of', 'power knob'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power knob', 'part of', 'base'), True)	(('base', 'has part', 'power knob'), True)
Constraint 4 (True antecedent)	('nozzle', 'above', 'water tank')('water tank', 'above', 'water valve')	(('nozzle', 'above', 'water valve'), True)
Constraint 4 (True antecedent)	('water tank', 'above', 'water valve')('water valve', 'above', 'base')	(('water tank', 'above', 'base'), True)
Constraint 4 (True antecedent)	('water valve', 'below', 'water tank')('water tank', 'below', 'nozzle')	(('water valve', 'below', 'nozzle'), True)
Constraint 4 (True antecedent)	('base', 'below', 'water valve')('water valve', 'below', 'water tank')	(('base', 'below', 'water tank'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('water tank', 'above', 'nozzle'), False)	(('nozzle', 'below', 'water tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water valve', 'above', 'water tank'), False)	(('water tank', 'below', 'water valve'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'water valve'), False)	(('water valve', 'below', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'inside', 'water sensor'), False)	(('water sensor', 'contains', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'inside', 'nebulizer'), False)	(('nebulizer', 'contains', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'part of', 'power knob'), False)	(('power knob', 'has part', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'above', 'water valve'), True)	(('water valve', 'above', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('water tank', 'above', 'base'), True)	(('base', 'above', 'water tank'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('water valve', 'below', 'nozzle'), True)	(('nozzle', 'below', 'water valve'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'water tank'), True)	(('water tank', 'below', 'base'), False)
Constraint 4 (True antecedent)	('nozzle', 'above', 'water tank')('water tank', 'above', 'base')	(('nozzle', 'above', 'base'), True)
Constraint 4 (True antecedent)	('base', 'below', 'water valve')('water valve', 'below', 'nozzle')	(('base', 'below', 'nozzle'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'above', 'base'), True)	(('base', 'above', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'nozzle'), True)	(('nozzle', 'below', 'base'), False)
Round 4 ...
humidifier worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'above', 'water tank'), True)	(('water tank', 'above', 'nozzle'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nozzle', 'above', 'water tank'), True)	(('water tank', 'below', 'nozzle'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('water tank', 'above', 'resevoir'), True)	(('resevoir', 'above', 'water tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('water tank', 'above', 'resevoir'), True)	(('resevoir', 'below', 'water tank'), True)
Constraint 1: x rln y <-> y rln x	(('resevoir', 'connects', 'air outlet'), True)	(('air outlet', 'connects', 'resevoir'), True)
Constraint 1: x rln y <-> y rln x	(('resevoir', 'connects', 'base'), True)	(('base', 'connects', 'resevoir'), True)
Constraint 1: x rln y <-> y rln x	(('resevoir', 'connects', 'water sensor'), True)	(('water sensor', 'connects', 'resevoir'), True)
Constraint 1: x rln y <-> y rln x	(('air outlet', 'next to', 'water sensor'), True)	(('water sensor', 'next to', 'air outlet'), True)
Constraint 4 (True antecedent)	('nozzle', 'above', 'water tank')('water tank', 'above', 'resevoir')	(('nozzle', 'above', 'resevoir'), True)
Constraint 4 (True antecedent)	('resevoir', 'below', 'water tank')('water tank', 'below', 'nozzle')	(('resevoir', 'below', 'nozzle'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('water tank', 'above', 'nozzle'), False)	(('nozzle', 'below', 'water tank'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('resevoir', 'above', 'water tank'), False)	(('water tank', 'below', 'resevoir'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('nozzle', 'above', 'resevoir'), True)	(('resevoir', 'above', 'nozzle'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('resevoir', 'below', 'nozzle'), True)	(('nozzle', 'below', 'resevoir'), False)
Round 3 ...
microwave worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('cooking cavity', 'behind', 'door and choke'), True)	(('door and choke', 'behind', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'behind', 'door and choke'), True)	(('door and choke', 'in front of', 'cooking cavity'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('turntable', 'inside', 'cooking cavity'), True)	(('cooking cavity', 'inside', 'turntable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('turntable', 'inside', 'cooking cavity'), True)	(('cooking cavity', 'contains', 'turntable'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('turntable', 'requires', 'power'), True)	(('power', 'requires', 'turntable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('turntable', 'requires', 'power'), True)	(('power', 'required by', 'turntable'), True)
Constraint 1: x rln y <-> y rln x	(('power', 'connects', 'magnetron'), True)	(('magnetron', 'connects', 'power'), True)
Constraint 1: x rln y <-> y rln x	(('magnetron', 'next to', 'waveguide'), True)	(('waveguide', 'next to', 'magnetron'), True)
Constraint 1: x rln y <-> y rln x	(('magnetron', 'connects', 'waveguide'), True)	(('waveguide', 'connects', 'magnetron'), True)
Constraint 1: x rln y <-> y rln x	(('waveguide', 'connects', 'stirrer'), True)	(('stirrer', 'connects', 'waveguide'), True)
Constraint 1: x rln y <-> y rln x	(('stirrer', 'next to', 'waveguide'), True)	(('waveguide', 'next to', 'stirrer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stirrer', 'above', 'turntable'), True)	(('turntable', 'above', 'stirrer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stirrer', 'above', 'turntable'), True)	(('turntable', 'below', 'stirrer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('magnetron', 'above', 'turntable'), True)	(('turntable', 'above', 'magnetron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('magnetron', 'above', 'turntable'), True)	(('turntable', 'below', 'magnetron'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('waveguide', 'above', 'turntable'), True)	(('turntable', 'above', 'waveguide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waveguide', 'above', 'turntable'), True)	(('turntable', 'below', 'waveguide'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('door and choke', 'behind', 'cooking cavity'), False)	(('cooking cavity', 'in front of', 'door and choke'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'inside', 'turntable'), False)	(('turntable', 'contains', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'requires', 'turntable'), False)	(('turntable', 'required by', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('turntable', 'above', 'stirrer'), False)	(('stirrer', 'below', 'turntable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('turntable', 'above', 'magnetron'), False)	(('magnetron', 'below', 'turntable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('turntable', 'above', 'waveguide'), False)	(('waveguide', 'below', 'turntable'), False)
Round 3 ...
microwave worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('power', 'behind', 'cooking cavity'), True)	(('cooking cavity', 'behind', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'behind', 'cooking cavity'), True)	(('cooking cavity', 'in front of', 'power'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking cavity', 'behind', 'door and choke'), True)	(('door and choke', 'behind', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'behind', 'door and choke'), True)	(('door and choke', 'in front of', 'cooking cavity'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('turntable', 'inside', 'cooking cavity'), True)	(('cooking cavity', 'inside', 'turntable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('turntable', 'inside', 'cooking cavity'), True)	(('cooking cavity', 'contains', 'turntable'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('magnetron', 'above', 'cooking cavity'), True)	(('cooking cavity', 'above', 'magnetron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('magnetron', 'above', 'cooking cavity'), True)	(('cooking cavity', 'below', 'magnetron'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('magnetron', 'above', 'power'), True)	(('power', 'above', 'magnetron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('magnetron', 'above', 'power'), True)	(('power', 'below', 'magnetron'), True)
Constraint 1: x rln y <-> y rln x	(('waveguide', 'next to', 'magnetron'), True)	(('magnetron', 'next to', 'waveguide'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('waveguide', 'above', 'cooking cavity'), True)	(('cooking cavity', 'above', 'waveguide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waveguide', 'above', 'cooking cavity'), True)	(('cooking cavity', 'below', 'waveguide'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('waveguide', 'above', 'power'), True)	(('power', 'above', 'waveguide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waveguide', 'above', 'power'), True)	(('power', 'below', 'waveguide'), True)
Constraint 1: x rln y <-> y rln x	(('stirrer', 'next to', 'waveguide'), True)	(('waveguide', 'next to', 'stirrer'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stirrer', 'above', 'cooking cavity'), True)	(('cooking cavity', 'above', 'stirrer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stirrer', 'above', 'cooking cavity'), True)	(('cooking cavity', 'below', 'stirrer'), True)
Constraint 4 (True antecedent)	('power', 'behind', 'cooking cavity')('cooking cavity', 'behind', 'door and choke')	(('power', 'behind', 'door and choke'), True)
Constraint 4 (True antecedent)	('door and choke', 'in front of', 'cooking cavity')('cooking cavity', 'in front of', 'power')	(('door and choke', 'in front of', 'power'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'behind', 'power'), False)	(('power', 'in front of', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door and choke', 'behind', 'cooking cavity'), False)	(('cooking cavity', 'in front of', 'door and choke'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'inside', 'turntable'), False)	(('turntable', 'contains', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'above', 'magnetron'), False)	(('magnetron', 'below', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'above', 'magnetron'), False)	(('magnetron', 'below', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'above', 'waveguide'), False)	(('waveguide', 'below', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'above', 'waveguide'), False)	(('waveguide', 'below', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'above', 'stirrer'), False)	(('stirrer', 'below', 'cooking cavity'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('power', 'behind', 'door and choke'), True)	(('door and choke', 'behind', 'power'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('door and choke', 'in front of', 'power'), True)	(('power', 'in front of', 'door and choke'), False)
Round 3 ...
microwave worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('turntable', 'inside', 'cooking cavity'), True)	(('cooking cavity', 'inside', 'turntable'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('turntable', 'inside', 'cooking cavity'), True)	(('cooking cavity', 'contains', 'turntable'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('cooking cavity', 'behind', 'door and choke'), True)	(('door and choke', 'behind', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'behind', 'door and choke'), True)	(('door and choke', 'in front of', 'cooking cavity'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('power', 'behind', 'door and choke'), True)	(('door and choke', 'behind', 'power'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('power', 'behind', 'door and choke'), True)	(('door and choke', 'in front of', 'power'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('magnetron', 'above', 'cooking cavity'), True)	(('cooking cavity', 'above', 'magnetron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('magnetron', 'above', 'cooking cavity'), True)	(('cooking cavity', 'below', 'magnetron'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('magnetron', 'behind', 'waveguide'), True)	(('waveguide', 'behind', 'magnetron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('magnetron', 'behind', 'waveguide'), True)	(('waveguide', 'in front of', 'magnetron'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('waveguide', 'above', 'cooking cavity'), True)	(('cooking cavity', 'above', 'waveguide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waveguide', 'above', 'cooking cavity'), True)	(('cooking cavity', 'below', 'waveguide'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('waveguide', 'behind', 'stirrer'), True)	(('stirrer', 'behind', 'waveguide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waveguide', 'behind', 'stirrer'), True)	(('stirrer', 'in front of', 'waveguide'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('stirrer', 'above', 'cooking cavity'), True)	(('cooking cavity', 'above', 'stirrer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stirrer', 'above', 'cooking cavity'), True)	(('cooking cavity', 'below', 'stirrer'), True)
Constraint 4 (True antecedent)	('magnetron', 'behind', 'waveguide')('waveguide', 'behind', 'stirrer')	(('magnetron', 'behind', 'stirrer'), True)
Constraint 4 (True antecedent)	('stirrer', 'in front of', 'waveguide')('waveguide', 'in front of', 'magnetron')	(('stirrer', 'in front of', 'magnetron'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'inside', 'turntable'), False)	(('turntable', 'contains', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door and choke', 'behind', 'cooking cavity'), False)	(('cooking cavity', 'in front of', 'door and choke'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('door and choke', 'behind', 'power'), False)	(('power', 'in front of', 'door and choke'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'above', 'magnetron'), False)	(('magnetron', 'below', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waveguide', 'behind', 'magnetron'), False)	(('magnetron', 'in front of', 'waveguide'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'above', 'waveguide'), False)	(('waveguide', 'below', 'cooking cavity'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('stirrer', 'behind', 'waveguide'), False)	(('waveguide', 'in front of', 'stirrer'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('cooking cavity', 'above', 'stirrer'), False)	(('stirrer', 'below', 'cooking cavity'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('magnetron', 'behind', 'stirrer'), True)	(('stirrer', 'behind', 'magnetron'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('stirrer', 'in front of', 'magnetron'), True)	(('magnetron', 'in front of', 'stirrer'), False)
Round 3 ...
piano worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'lid prop'), True)	(('lid prop', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'lid prop'), True)	(('lid prop', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'behind', 'music rack'), True)	(('music rack', 'behind', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'behind', 'music rack'), True)	(('music rack', 'in front of', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid prop', 'behind', 'music rack'), True)	(('music rack', 'behind', 'lid prop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid prop', 'behind', 'music rack'), True)	(('music rack', 'in front of', 'lid prop'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'above', 'fall board'), True)	(('fall board', 'above', 'music rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('music rack', 'above', 'fall board'), True)	(('fall board', 'below', 'music rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'behind', 'fall board'), True)	(('fall board', 'behind', 'music rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('music rack', 'behind', 'fall board'), True)	(('fall board', 'in front of', 'music rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fall board', 'behind', 'keyboard'), True)	(('keyboard', 'behind', 'fall board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fall board', 'behind', 'keyboard'), True)	(('keyboard', 'in front of', 'fall board'), True)
Constraint 1: x rln y <-> y rln x	(('fall board', 'connects', 'keyboard'), True)	(('keyboard', 'connects', 'fall board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fall board', 'above', 'keyboard'), True)	(('keyboard', 'above', 'fall board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fall board', 'above', 'keyboard'), True)	(('keyboard', 'below', 'fall board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'above', 'piano bench'), True)	(('piano bench', 'above', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'above', 'piano bench'), True)	(('piano bench', 'below', 'keyboard'), True)
Constraint 4 (True antecedent)	('lid', 'behind', 'music rack')('music rack', 'behind', 'fall board')	(('lid', 'behind', 'fall board'), True)
Constraint 4 (True antecedent)	('lid prop', 'behind', 'music rack')('music rack', 'behind', 'fall board')	(('lid prop', 'behind', 'fall board'), True)
Constraint 4 (True antecedent)	('music rack', 'above', 'fall board')('fall board', 'above', 'keyboard')	(('music rack', 'above', 'keyboard'), True)
Constraint 4 (True antecedent)	('music rack', 'behind', 'fall board')('fall board', 'behind', 'keyboard')	(('music rack', 'behind', 'keyboard'), True)
Constraint 4 (True antecedent)	('fall board', 'above', 'keyboard')('keyboard', 'above', 'piano bench')	(('fall board', 'above', 'piano bench'), True)
Constraint 4 (True antecedent)	('fall board', 'in front of', 'music rack')('music rack', 'in front of', 'lid')	(('fall board', 'in front of', 'lid'), True)
Constraint 4 (True antecedent)	('fall board', 'in front of', 'music rack')('music rack', 'in front of', 'lid prop')	(('fall board', 'in front of', 'lid prop'), True)
Constraint 4 (True antecedent)	('keyboard', 'in front of', 'fall board')('fall board', 'in front of', 'music rack')	(('keyboard', 'in front of', 'music rack'), True)
Constraint 4 (True antecedent)	('keyboard', 'below', 'fall board')('fall board', 'below', 'music rack')	(('keyboard', 'below', 'music rack'), True)
Constraint 4 (True antecedent)	('piano bench', 'below', 'keyboard')('keyboard', 'below', 'fall board')	(('piano bench', 'below', 'fall board'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lid prop', 'above', 'lid'), False)	(('lid', 'below', 'lid prop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('music rack', 'behind', 'lid'), False)	(('lid', 'in front of', 'music rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('music rack', 'behind', 'lid prop'), False)	(('lid prop', 'in front of', 'music rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fall board', 'above', 'music rack'), False)	(('music rack', 'below', 'fall board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fall board', 'behind', 'music rack'), False)	(('music rack', 'in front of', 'fall board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'behind', 'fall board'), False)	(('fall board', 'in front of', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'above', 'fall board'), False)	(('fall board', 'below', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('piano bench', 'above', 'keyboard'), False)	(('keyboard', 'below', 'piano bench'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'behind', 'fall board'), True)	(('fall board', 'behind', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid prop', 'behind', 'fall board'), True)	(('fall board', 'behind', 'lid prop'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'above', 'keyboard'), True)	(('keyboard', 'above', 'music rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'behind', 'keyboard'), True)	(('keyboard', 'behind', 'music rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fall board', 'above', 'piano bench'), True)	(('piano bench', 'above', 'fall board'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fall board', 'in front of', 'lid'), True)	(('lid', 'in front of', 'fall board'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fall board', 'in front of', 'lid prop'), True)	(('lid prop', 'in front of', 'fall board'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'in front of', 'music rack'), True)	(('music rack', 'in front of', 'keyboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'below', 'music rack'), True)	(('music rack', 'below', 'keyboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('piano bench', 'below', 'fall board'), True)	(('fall board', 'below', 'piano bench'), False)
Constraint 4 (True antecedent)	('lid', 'behind', 'music rack')('music rack', 'behind', 'keyboard')	(('lid', 'behind', 'keyboard'), True)
Constraint 4 (True antecedent)	('lid prop', 'behind', 'music rack')('music rack', 'behind', 'keyboard')	(('lid prop', 'behind', 'keyboard'), True)
Constraint 4 (True antecedent)	('music rack', 'above', 'fall board')('fall board', 'above', 'piano bench')	(('music rack', 'above', 'piano bench'), True)
Constraint 4 (True antecedent)	('keyboard', 'in front of', 'fall board')('fall board', 'in front of', 'lid')	(('keyboard', 'in front of', 'lid'), True)
Constraint 4 (True antecedent)	('keyboard', 'in front of', 'fall board')('fall board', 'in front of', 'lid prop')	(('keyboard', 'in front of', 'lid prop'), True)
Constraint 4 (True antecedent)	('piano bench', 'below', 'keyboard')('keyboard', 'below', 'music rack')	(('piano bench', 'below', 'music rack'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'behind', 'keyboard'), True)	(('keyboard', 'behind', 'lid'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('lid prop', 'behind', 'keyboard'), True)	(('keyboard', 'behind', 'lid prop'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'above', 'piano bench'), True)	(('piano bench', 'above', 'music rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'in front of', 'lid'), True)	(('lid', 'in front of', 'keyboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'in front of', 'lid prop'), True)	(('lid prop', 'in front of', 'keyboard'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('piano bench', 'below', 'music rack'), True)	(('music rack', 'below', 'piano bench'), False)
Round 4 ...
piano worker_106...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'requires', 'lid prop'), True)	(('lid prop', 'requires', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'requires', 'lid prop'), True)	(('lid prop', 'required by', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'above', 'fall board'), True)	(('fall board', 'above', 'music rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('music rack', 'above', 'fall board'), True)	(('fall board', 'below', 'music rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fall board', 'above', 'keyboard'), True)	(('keyboard', 'above', 'fall board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fall board', 'above', 'keyboard'), True)	(('keyboard', 'below', 'fall board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'requires', 'pedals'), True)	(('pedals', 'requires', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'requires', 'pedals'), True)	(('pedals', 'required by', 'keyboard'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'requires', 'piano bench'), True)	(('piano bench', 'requires', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'requires', 'piano bench'), True)	(('piano bench', 'required by', 'keyboard'), True)
Constraint 4 (True antecedent)	('music rack', 'above', 'fall board')('fall board', 'above', 'keyboard')	(('music rack', 'above', 'keyboard'), True)
Constraint 4 (True antecedent)	('keyboard', 'below', 'fall board')('fall board', 'below', 'music rack')	(('keyboard', 'below', 'music rack'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lid prop', 'requires', 'lid'), False)	(('lid', 'required by', 'lid prop'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fall board', 'above', 'music rack'), False)	(('music rack', 'below', 'fall board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'above', 'fall board'), False)	(('fall board', 'below', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pedals', 'requires', 'keyboard'), False)	(('keyboard', 'required by', 'pedals'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('piano bench', 'requires', 'keyboard'), False)	(('keyboard', 'required by', 'piano bench'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'above', 'keyboard'), True)	(('keyboard', 'above', 'music rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('keyboard', 'below', 'music rack'), True)	(('music rack', 'below', 'keyboard'), False)
Round 3 ...
piano worker_103...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('lid prop', 'connects', 'lid'), True)	(('lid', 'connects', 'lid prop'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lid', 'above', 'keyboard'), True)	(('keyboard', 'above', 'lid'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lid', 'above', 'keyboard'), True)	(('keyboard', 'below', 'lid'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'above', 'fall board'), True)	(('fall board', 'above', 'music rack'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('music rack', 'above', 'fall board'), True)	(('fall board', 'below', 'music rack'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fall board', 'above', 'key board'), True)	(('key board', 'above', 'fall board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fall board', 'above', 'key board'), True)	(('key board', 'below', 'fall board'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('key board', 'above', 'pedals'), True)	(('pedals', 'above', 'key board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('key board', 'above', 'pedals'), True)	(('pedals', 'below', 'key board'), True)
Constraint 4 (True antecedent)	('music rack', 'above', 'fall board')('fall board', 'above', 'key board')	(('music rack', 'above', 'key board'), True)
Constraint 4 (True antecedent)	('fall board', 'above', 'key board')('key board', 'above', 'pedals')	(('fall board', 'above', 'pedals'), True)
Constraint 4 (True antecedent)	('key board', 'below', 'fall board')('fall board', 'below', 'music rack')	(('key board', 'below', 'music rack'), True)
Constraint 4 (True antecedent)	('pedals', 'below', 'key board')('key board', 'below', 'fall board')	(('pedals', 'below', 'fall board'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('keyboard', 'above', 'lid'), False)	(('lid', 'below', 'keyboard'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fall board', 'above', 'music rack'), False)	(('music rack', 'below', 'fall board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('key board', 'above', 'fall board'), False)	(('fall board', 'below', 'key board'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('pedals', 'above', 'key board'), False)	(('key board', 'below', 'pedals'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'above', 'key board'), True)	(('key board', 'above', 'music rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('fall board', 'above', 'pedals'), True)	(('pedals', 'above', 'fall board'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('key board', 'below', 'music rack'), True)	(('music rack', 'below', 'key board'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pedals', 'below', 'fall board'), True)	(('fall board', 'below', 'pedals'), False)
Constraint 4 (True antecedent)	('music rack', 'above', 'fall board')('fall board', 'above', 'pedals')	(('music rack', 'above', 'pedals'), True)
Constraint 4 (True antecedent)	('pedals', 'below', 'key board')('key board', 'below', 'music rack')	(('pedals', 'below', 'music rack'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('music rack', 'above', 'pedals'), True)	(('pedals', 'above', 'music rack'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('pedals', 'below', 'music rack'), True)	(('music rack', 'below', 'pedals'), False)
Round 4 ...
rat worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'body'), True)	(('body', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'body'), True)	(('body', 'in front of', 'tail'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'tail'), True)	(('tail', 'connects', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'legs'), True)	(('legs', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'legs'), True)	(('legs', 'above', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'legs'), True)	(('legs', 'below', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'head'), True)	(('head', 'connects', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'behind', 'head'), True)	(('head', 'behind', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'head'), True)	(('head', 'in front of', 'body'), True)
Constraint 1: x rln y <-> y rln x	(('legs', 'connects', 'feet'), True)	(('feet', 'connects', 'legs'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'above', 'feet'), True)	(('feet', 'above', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'feet'), True)	(('feet', 'below', 'legs'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'legs'), True)	(('legs', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'legs'), True)	(('legs', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'body'), True)	(('body', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'body'), True)	(('body', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'nose'), True)	(('nose', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'nose'), True)	(('nose', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'mouth'), True)	(('mouth', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'mouth'), True)	(('mouth', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'ear'), True)	(('ear', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'ear'), True)	(('ear', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'surrounds', 'head'), True)	(('head', 'surrounds', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'surrounds', 'head'), True)	(('head', 'surrounded by', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'head'), True)	(('head', 'above', 'ears'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ears', 'above', 'head'), True)	(('head', 'below', 'ears'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'ears'), True)	(('ears', 'connects', 'head'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'eyes'), True)	(('eyes', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'behind', 'nose'), True)	(('nose', 'behind', 'eyes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyes', 'behind', 'nose'), True)	(('nose', 'in front of', 'eyes'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'nose'), True)	(('nose', 'connects', 'head'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nose', 'above', 'mouth'), True)	(('mouth', 'above', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'above', 'mouth'), True)	(('mouth', 'below', 'nose'), True)
Constraint 1: x rln y <-> y rln x	(('head', 'connects', 'mouth'), True)	(('mouth', 'connects', 'head'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'body')('body', 'behind', 'head')	(('tail', 'behind', 'head'), True)
Constraint 4 (True antecedent)	('body', 'above', 'legs')('legs', 'above', 'feet')	(('body', 'above', 'feet'), True)
Constraint 4 (True antecedent)	('head', 'in front of', 'body')('body', 'in front of', 'tail')	(('head', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('feet', 'below', 'legs')('legs', 'below', 'body')	(('feet', 'below', 'body'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'tail'), False)	(('tail', 'in front of', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'body'), False)	(('body', 'below', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'behind', 'body'), False)	(('body', 'in front of', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('feet', 'above', 'legs'), False)	(('legs', 'below', 'feet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'mouth'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ear', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'ear'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'surrounds', 'fur'), False)	(('fur', 'surrounded by', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('head', 'above', 'ears'), False)	(('ears', 'below', 'head'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nose', 'behind', 'eyes'), False)	(('eyes', 'in front of', 'nose'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('mouth', 'above', 'nose'), False)	(('nose', 'below', 'mouth'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'head'), True)	(('head', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'above', 'feet'), True)	(('feet', 'above', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('head', 'in front of', 'tail'), True)	(('tail', 'in front of', 'head'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('feet', 'below', 'body'), True)	(('body', 'below', 'feet'), False)
Round 3 ...
rat worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'fur'), True)	(('fur', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'fur'), True)	(('fur', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'legs'), True)	(('legs', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'legs'), True)	(('legs', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('fur', 'above', 'legs'), True)	(('legs', 'above', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'above', 'legs'), True)	(('legs', 'below', 'fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'fur'), True)	(('fur', 'above', 'ears'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ears', 'above', 'fur'), True)	(('fur', 'below', 'ears'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'eyes'), True)	(('eyes', 'above', 'ears'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ears', 'above', 'eyes'), True)	(('eyes', 'below', 'ears'), True)
Constraint 4 (True antecedent)	('ears', 'above', 'fur')('fur', 'above', 'legs')	(('ears', 'above', 'legs'), True)
Constraint 4 (True antecedent)	('legs', 'below', 'fur')('fur', 'below', 'ears')	(('legs', 'below', 'ears'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'behind', 'tail'), False)	(('tail', 'in front of', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'behind', 'tail'), False)	(('tail', 'in front of', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'fur'), False)	(('fur', 'below', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('fur', 'above', 'ears'), False)	(('ears', 'below', 'fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyes', 'above', 'ears'), False)	(('ears', 'below', 'eyes'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'above', 'legs'), True)	(('legs', 'above', 'ears'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'below', 'ears'), True)	(('ears', 'below', 'legs'), False)
Round 3 ...
rat worker_103...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('short fur', 'surrounds', 'tail'), True)	(('tail', 'surrounds', 'short fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('short fur', 'surrounds', 'tail'), True)	(('tail', 'surrounded by', 'short fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('short fur', 'surrounds', 'legs'), True)	(('legs', 'surrounds', 'short fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('short fur', 'surrounds', 'legs'), True)	(('legs', 'surrounded by', 'short fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('short fur', 'surrounds', 'ears'), True)	(('ears', 'surrounds', 'short fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('short fur', 'surrounds', 'ears'), True)	(('ears', 'surrounded by', 'short fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('short fur', 'surrounds', 'eyes'), True)	(('eyes', 'surrounds', 'short fur'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('short fur', 'surrounds', 'eyes'), True)	(('eyes', 'surrounded by', 'short fur'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'legs'), True)	(('legs', 'behind', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'behind', 'legs'), True)	(('legs', 'in front of', 'tail'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'behind', 'ears'), True)	(('ears', 'behind', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'behind', 'ears'), True)	(('ears', 'in front of', 'legs'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'behind', 'eyes'), True)	(('eyes', 'behind', 'ears'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ears', 'behind', 'eyes'), True)	(('eyes', 'in front of', 'ears'), True)
Constraint 4 (True antecedent)	('tail', 'behind', 'legs')('legs', 'behind', 'ears')	(('tail', 'behind', 'ears'), True)
Constraint 4 (True antecedent)	('legs', 'behind', 'ears')('ears', 'behind', 'eyes')	(('legs', 'behind', 'eyes'), True)
Constraint 4 (True antecedent)	('ears', 'in front of', 'legs')('legs', 'in front of', 'tail')	(('ears', 'in front of', 'tail'), True)
Constraint 4 (True antecedent)	('eyes', 'in front of', 'ears')('ears', 'in front of', 'legs')	(('eyes', 'in front of', 'legs'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('tail', 'surrounds', 'short fur'), False)	(('short fur', 'surrounded by', 'tail'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'surrounds', 'short fur'), False)	(('short fur', 'surrounded by', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ears', 'surrounds', 'short fur'), False)	(('short fur', 'surrounded by', 'ears'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyes', 'surrounds', 'short fur'), False)	(('short fur', 'surrounded by', 'eyes'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'behind', 'tail'), False)	(('tail', 'in front of', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('ears', 'behind', 'legs'), False)	(('legs', 'in front of', 'ears'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eyes', 'behind', 'ears'), False)	(('ears', 'in front of', 'eyes'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'ears'), True)	(('ears', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'behind', 'eyes'), True)	(('eyes', 'behind', 'legs'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('ears', 'in front of', 'tail'), True)	(('tail', 'in front of', 'ears'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'in front of', 'legs'), True)	(('legs', 'in front of', 'eyes'), False)
Constraint 4 (True antecedent)	('tail', 'behind', 'legs')('legs', 'behind', 'eyes')	(('tail', 'behind', 'eyes'), True)
Constraint 4 (True antecedent)	('eyes', 'in front of', 'ears')('ears', 'in front of', 'tail')	(('eyes', 'in front of', 'tail'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('tail', 'behind', 'eyes'), True)	(('eyes', 'behind', 'tail'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eyes', 'in front of', 'tail'), True)	(('tail', 'in front of', 'eyes'), False)
Round 4 ...
stethoscope worker_101...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('eartips', 'connects', 'binaural'), True)	(('binaural', 'connects', 'eartips'), True)
Constraint 1: x rln y <-> y rln x	(('binaural', 'connects', 'binaural spring'), True)	(('binaural spring', 'connects', 'binaural'), True)
Constraint 1: x rln y <-> y rln x	(('binaural', 'connects', 'latex free pvc tubing'), True)	(('latex free pvc tubing', 'connects', 'binaural'), True)
Constraint 1: x rln y <-> y rln x	(('latex free pvc tubing', 'connects', 'drum'), True)	(('drum', 'connects', 'latex free pvc tubing'), True)
Constraint 1: x rln y <-> y rln x	(('drum', 'connects', 'bell'), True)	(('bell', 'connects', 'drum'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('drum', 'requires', 'eartips'), True)	(('eartips', 'requires', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'requires', 'eartips'), True)	(('eartips', 'required by', 'drum'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('drum', 'part of', 'chestpiece'), True)	(('chestpiece', 'part of', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'part of', 'chestpiece'), True)	(('chestpiece', 'has part', 'drum'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('drum', 'behind', 'diaphram'), True)	(('diaphram', 'behind', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'behind', 'diaphram'), True)	(('diaphram', 'in front of', 'drum'), True)
Constraint 1: x rln y <-> y rln x	(('drum', 'connects', 'diaphram'), True)	(('diaphram', 'connects', 'drum'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bell', 'behind', 'drum'), True)	(('drum', 'behind', 'bell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bell', 'behind', 'drum'), True)	(('drum', 'in front of', 'bell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bell', 'part of', 'chestpiece'), True)	(('chestpiece', 'part of', 'bell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bell', 'part of', 'chestpiece'), True)	(('chestpiece', 'has part', 'bell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('diaphram', 'part of', 'chestpiece'), True)	(('chestpiece', 'part of', 'diaphram'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('diaphram', 'part of', 'chestpiece'), True)	(('chestpiece', 'has part', 'diaphram'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('nonchill ring', 'surrounds', 'diaphram'), True)	(('diaphram', 'surrounds', 'nonchill ring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('nonchill ring', 'surrounds', 'diaphram'), True)	(('diaphram', 'surrounded by', 'nonchill ring'), True)
Constraint 4 (True antecedent)	('bell', 'behind', 'drum')('drum', 'behind', 'diaphram')	(('bell', 'behind', 'diaphram'), True)
Constraint 4 (True antecedent)	('diaphram', 'in front of', 'drum')('drum', 'in front of', 'bell')	(('diaphram', 'in front of', 'bell'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('eartips', 'requires', 'drum'), False)	(('drum', 'required by', 'eartips'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chestpiece', 'part of', 'drum'), False)	(('drum', 'has part', 'chestpiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('diaphram', 'behind', 'drum'), False)	(('drum', 'in front of', 'diaphram'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'behind', 'bell'), False)	(('bell', 'in front of', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chestpiece', 'part of', 'bell'), False)	(('bell', 'has part', 'chestpiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('chestpiece', 'part of', 'diaphram'), False)	(('diaphram', 'has part', 'chestpiece'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('diaphram', 'surrounds', 'nonchill ring'), False)	(('nonchill ring', 'surrounded by', 'diaphram'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('bell', 'behind', 'diaphram'), True)	(('diaphram', 'behind', 'bell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('diaphram', 'in front of', 'bell'), True)	(('bell', 'in front of', 'diaphram'), False)
Round 3 ...
stethoscope worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('eartips', 'connects', 'binaural'), True)	(('binaural', 'connects', 'eartips'), True)
Constraint 1: x rln y <-> y rln x	(('binaural', 'connects', 'latex free pvc tubing'), True)	(('latex free pvc tubing', 'connects', 'binaural'), True)
Constraint 1: x rln y <-> y rln x	(('latex free pvc tubing', 'connects', 'drum'), True)	(('drum', 'connects', 'latex free pvc tubing'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('binaural spring', 'part of', 'binaural'), True)	(('binaural', 'part of', 'binaural spring'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('binaural spring', 'part of', 'binaural'), True)	(('binaural', 'has part', 'binaural spring'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('diaphram', 'part of', 'drum'), True)	(('drum', 'part of', 'diaphram'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('diaphram', 'part of', 'drum'), True)	(('drum', 'has part', 'diaphram'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bell', 'part of', 'drum'), True)	(('drum', 'part of', 'bell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bell', 'part of', 'drum'), True)	(('drum', 'has part', 'bell'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('binaural', 'part of', 'binaural spring'), False)	(('binaural spring', 'has part', 'binaural'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'part of', 'diaphram'), False)	(('diaphram', 'has part', 'drum'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('drum', 'part of', 'bell'), False)	(('bell', 'has part', 'drum'), False)
Round 3 ...
stethoscope worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('eartips', 'above', 'binaural'), True)	(('binaural', 'above', 'eartips'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('eartips', 'above', 'binaural'), True)	(('binaural', 'below', 'eartips'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('binaural', 'above', 'latex free pvc tubing'), True)	(('latex free pvc tubing', 'above', 'binaural'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('binaural', 'above', 'latex free pvc tubing'), True)	(('latex free pvc tubing', 'below', 'binaural'), True)
Constraint 1: x rln y <-> y rln x	(('latex free pvc tubing', 'connects', 'drum'), True)	(('drum', 'connects', 'latex free pvc tubing'), True)
Constraint 1: x rln y <-> y rln x	(('latex free pvc tubing', 'connects', 'bell'), True)	(('bell', 'connects', 'latex free pvc tubing'), True)
Constraint 1: x rln y <-> y rln x	(('drum', 'connects', 'bell'), True)	(('bell', 'connects', 'drum'), True)
Constraint 4 (True antecedent)	('eartips', 'above', 'binaural')('binaural', 'above', 'latex free pvc tubing')	(('eartips', 'above', 'latex free pvc tubing'), True)
Constraint 4 (True antecedent)	('latex free pvc tubing', 'below', 'binaural')('binaural', 'below', 'eartips')	(('latex free pvc tubing', 'below', 'eartips'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('binaural', 'above', 'eartips'), False)	(('eartips', 'below', 'binaural'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('latex free pvc tubing', 'above', 'binaural'), False)	(('binaural', 'below', 'latex free pvc tubing'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('eartips', 'above', 'latex free pvc tubing'), True)	(('latex free pvc tubing', 'above', 'eartips'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('latex free pvc tubing', 'below', 'eartips'), True)	(('eartips', 'below', 'latex free pvc tubing'), False)
Round 3 ...
table worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'apron'), True)	(('apron', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'apron'), True)	(('apron', 'below', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('apron', 'connects', 'top'), True)	(('top', 'connects', 'apron'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('apron', 'above', 'legs'), True)	(('legs', 'above', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'legs'), True)	(('legs', 'below', 'apron'), True)
Constraint 1: x rln y <-> y rln x	(('apron', 'connects', 'legs'), True)	(('legs', 'connects', 'apron'), True)
Constraint 1: x rln y <-> y rln x	(('legs', 'next to', 'stretcher'), True)	(('stretcher', 'next to', 'legs'), True)
Constraint 1: x rln y <-> y rln x	(('legs', 'connects', 'stretcher'), True)	(('stretcher', 'connects', 'legs'), True)
Constraint 4 (True antecedent)	('top', 'above', 'apron')('apron', 'above', 'legs')	(('top', 'above', 'legs'), True)
Constraint 4 (True antecedent)	('legs', 'below', 'apron')('apron', 'below', 'top')	(('legs', 'below', 'top'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'top'), False)	(('top', 'below', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'apron'), False)	(('apron', 'below', 'legs'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'legs'), True)	(('legs', 'above', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'below', 'top'), True)	(('top', 'below', 'legs'), False)
Round 3 ...
table worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'legs'), True)	(('legs', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'legs'), True)	(('legs', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'apron'), True)	(('apron', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'apron'), True)	(('apron', 'below', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('top', 'connects', 'apron'), True)	(('apron', 'connects', 'top'), True)
Constraint 1: x rln y <-> y rln x	(('legs', 'connects', 'apron'), True)	(('apron', 'connects', 'legs'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('apron', 'above', 'legs'), True)	(('legs', 'above', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'legs'), True)	(('legs', 'below', 'apron'), True)
Constraint 1: x rln y <-> y rln x	(('legs', 'connects', 'strecher'), True)	(('strecher', 'connects', 'legs'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'top'), False)	(('top', 'below', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'top'), False)	(('top', 'below', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'apron'), False)	(('apron', 'below', 'legs'), False)
Round 3 ...
table worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'apron'), True)	(('apron', 'above', 'top'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('top', 'above', 'apron'), True)	(('apron', 'below', 'top'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('apron', 'above', 'legs'), True)	(('legs', 'above', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'legs'), True)	(('legs', 'below', 'apron'), True)
Constraint 1: x rln y <-> y rln x	(('legs', 'connects', 'strecher'), True)	(('strecher', 'connects', 'legs'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('apron', 'above', 'strecher'), True)	(('strecher', 'above', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'strecher'), True)	(('strecher', 'below', 'apron'), True)
Constraint 4 (True antecedent)	('top', 'above', 'apron')('apron', 'above', 'legs')	(('top', 'above', 'legs'), True)
Constraint 4 (True antecedent)	('top', 'above', 'apron')('apron', 'above', 'strecher')	(('top', 'above', 'strecher'), True)
Constraint 4 (True antecedent)	('legs', 'below', 'apron')('apron', 'below', 'top')	(('legs', 'below', 'top'), True)
Constraint 4 (True antecedent)	('strecher', 'below', 'apron')('apron', 'below', 'top')	(('strecher', 'below', 'top'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('apron', 'above', 'top'), False)	(('top', 'below', 'apron'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('legs', 'above', 'apron'), False)	(('apron', 'below', 'legs'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('strecher', 'above', 'apron'), False)	(('apron', 'below', 'strecher'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'legs'), True)	(('legs', 'above', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('top', 'above', 'strecher'), True)	(('strecher', 'above', 'top'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('legs', 'below', 'top'), True)	(('top', 'below', 'legs'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('strecher', 'below', 'top'), True)	(('top', 'below', 'strecher'), False)
Round 3 ...
table lamp worker_108...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('lampshade fitting', 'above', 'lock'), True)	(('lock', 'above', 'lampshade fitting'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lampshade fitting', 'above', 'lock'), True)	(('lock', 'below', 'lampshade fitting'), True)
Constraint 1: x rln y <-> y rln x	(('lampshade fitting', 'connects', 'shade'), True)	(('shade', 'connects', 'lampshade fitting'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shade', 'part of', 'lampshade fitting'), True)	(('lampshade fitting', 'part of', 'shade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shade', 'part of', 'lampshade fitting'), True)	(('lampshade fitting', 'has part', 'shade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('lampshade fitting', 'inside', 'bulb'), True)	(('bulb', 'inside', 'lampshade fitting'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lampshade fitting', 'inside', 'bulb'), True)	(('bulb', 'contains', 'lampshade fitting'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('bulb', 'part of', 'socket shell'), True)	(('socket shell', 'part of', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'part of', 'socket shell'), True)	(('socket shell', 'has part', 'bulb'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('socket shell', 'requires', 'bulb'), True)	(('bulb', 'requires', 'socket shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('socket shell', 'requires', 'bulb'), True)	(('bulb', 'required by', 'socket shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('socket shell', 'inside', 'base'), True)	(('base', 'inside', 'socket shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('socket shell', 'inside', 'base'), True)	(('base', 'contains', 'socket shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'above', 'socket shell'), True)	(('socket shell', 'above', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'above', 'socket shell'), True)	(('socket shell', 'below', 'switch'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounds', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounded by', 'base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('threaded tube', 'surrounds', 'base'), True)	(('base', 'surrounds', 'threaded tube'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('threaded tube', 'surrounds', 'base'), True)	(('base', 'surrounded by', 'threaded tube'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'surrounds', 'base'), True)	(('base', 'surrounds', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'surrounds', 'base'), True)	(('base', 'surrounded by', 'body'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('plug', 'behind', 'body'), True)	(('body', 'behind', 'plug'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('plug', 'behind', 'body'), True)	(('body', 'in front of', 'plug'), True)
Constraint 4 (True antecedent)	('threaded tube', 'surrounds', 'base')('base', 'surrounds', 'socket shell')	(('threaded tube', 'surrounds', 'socket shell'), True)
Constraint 4 (True antecedent)	('body', 'surrounds', 'base')('base', 'surrounds', 'socket shell')	(('body', 'surrounds', 'socket shell'), True)
Constraint 4 (True antecedent)	('socket shell', 'surrounded by', 'base')('base', 'surrounded by', 'threaded tube')	(('socket shell', 'surrounded by', 'threaded tube'), True)
Constraint 4 (True antecedent)	('socket shell', 'surrounded by', 'base')('base', 'surrounded by', 'body')	(('socket shell', 'surrounded by', 'body'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('lock', 'above', 'lampshade fitting'), False)	(('lampshade fitting', 'below', 'lock'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('lampshade fitting', 'part of', 'shade'), False)	(('shade', 'has part', 'lampshade fitting'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'inside', 'lampshade fitting'), False)	(('lampshade fitting', 'contains', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('socket shell', 'part of', 'bulb'), False)	(('bulb', 'has part', 'socket shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'requires', 'socket shell'), False)	(('socket shell', 'required by', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'inside', 'socket shell'), False)	(('socket shell', 'contains', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('socket shell', 'above', 'switch'), False)	(('switch', 'below', 'socket shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('socket shell', 'surrounds', 'base'), False)	(('base', 'surrounded by', 'socket shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'surrounds', 'threaded tube'), False)	(('threaded tube', 'surrounded by', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'surrounds', 'body'), False)	(('body', 'surrounded by', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'behind', 'plug'), False)	(('plug', 'in front of', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('threaded tube', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounds', 'threaded tube'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounds', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('socket shell', 'surrounded by', 'threaded tube'), True)	(('threaded tube', 'surrounded by', 'socket shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('socket shell', 'surrounded by', 'body'), True)	(('body', 'surrounded by', 'socket shell'), False)
Round 3 ...
table lamp worker_104...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('shade', 'surrounds', 'bulb'), True)	(('bulb', 'surrounds', 'shade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shade', 'surrounds', 'bulb'), True)	(('bulb', 'surrounded by', 'shade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shade', 'surrounds', 'harp'), True)	(('harp', 'surrounds', 'shade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shade', 'surrounds', 'harp'), True)	(('harp', 'surrounded by', 'shade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shade', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounds', 'shade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shade', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounded by', 'shade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('harp', 'surrounds', 'bulb'), True)	(('bulb', 'surrounds', 'harp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('harp', 'surrounds', 'bulb'), True)	(('bulb', 'surrounded by', 'harp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('harp', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounds', 'harp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('harp', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounded by', 'harp'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('sockets shell', 'above', 'switch'), True)	(('switch', 'above', 'sockets shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('sockets shell', 'above', 'switch'), True)	(('switch', 'below', 'sockets shell'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'above', 'body'), True)	(('body', 'above', 'base'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'body'), True)	(('body', 'below', 'base'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'above', 'base'), True)	(('base', 'above', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'above', 'base'), True)	(('base', 'below', 'switch'), True)
Constraint 4 (True antecedent)	('sockets shell', 'above', 'switch')('switch', 'above', 'base')	(('sockets shell', 'above', 'base'), True)
Constraint 4 (True antecedent)	('switch', 'above', 'base')('base', 'above', 'body')	(('switch', 'above', 'body'), True)
Constraint 4 (True antecedent)	('body', 'below', 'base')('base', 'below', 'switch')	(('body', 'below', 'switch'), True)
Constraint 4 (True antecedent)	('base', 'below', 'switch')('switch', 'below', 'sockets shell')	(('base', 'below', 'sockets shell'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'surrounds', 'shade'), False)	(('shade', 'surrounded by', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('harp', 'surrounds', 'shade'), False)	(('shade', 'surrounded by', 'harp'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('socket shell', 'surrounds', 'shade'), False)	(('shade', 'surrounded by', 'socket shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'surrounds', 'harp'), False)	(('harp', 'surrounded by', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('socket shell', 'surrounds', 'harp'), False)	(('harp', 'surrounded by', 'socket shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'above', 'sockets shell'), False)	(('sockets shell', 'below', 'switch'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('body', 'above', 'base'), False)	(('base', 'below', 'body'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('base', 'above', 'switch'), False)	(('switch', 'below', 'base'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('sockets shell', 'above', 'base'), True)	(('base', 'above', 'sockets shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('switch', 'above', 'body'), True)	(('body', 'above', 'switch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'switch'), True)	(('switch', 'below', 'body'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('base', 'below', 'sockets shell'), True)	(('sockets shell', 'below', 'base'), False)
Constraint 4 (True antecedent)	('sockets shell', 'above', 'switch')('switch', 'above', 'body')	(('sockets shell', 'above', 'body'), True)
Constraint 4 (True antecedent)	('body', 'below', 'base')('base', 'below', 'sockets shell')	(('body', 'below', 'sockets shell'), True)
Round 3 ...
Constraint 2: x rln y -> NOT(y rln x)	(('sockets shell', 'above', 'body'), True)	(('body', 'above', 'sockets shell'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('body', 'below', 'sockets shell'), True)	(('sockets shell', 'below', 'body'), False)
Round 4 ...
table lamp worker_100...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('lampshade fitting', 'connects', 'lock'), True)	(('lock', 'connects', 'lampshade fitting'), True)
Constraint 1: x rln y <-> y rln x	(('lampshade fitting', 'connects', 'shade'), True)	(('shade', 'connects', 'lampshade fitting'), True)
Constraint 1: x rln y <-> y rln x	(('lampshade fitting', 'connects', 'harp'), True)	(('harp', 'connects', 'lampshade fitting'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shade', 'surrounds', 'bulb'), True)	(('bulb', 'surrounds', 'shade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shade', 'surrounds', 'bulb'), True)	(('bulb', 'surrounded by', 'shade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shade', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounds', 'shade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shade', 'surrounds', 'socket shell'), True)	(('socket shell', 'surrounded by', 'shade'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('shade', 'surrounds', 'switch'), True)	(('switch', 'surrounds', 'shade'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('shade', 'surrounds', 'switch'), True)	(('switch', 'surrounded by', 'shade'), True)
Constraint 1: x rln y <-> y rln x	(('bulb', 'connects', 'socket shell'), True)	(('socket shell', 'connects', 'bulb'), True)
Constraint 1: x rln y <-> y rln x	(('socket shell', 'connects', 'switch'), True)	(('switch', 'connects', 'socket shell'), True)
Constraint 1: x rln y <-> y rln x	(('switch', 'connects', 'base'), True)	(('base', 'connects', 'switch'), True)
Constraint 1: x rln y <-> y rln x	(('base', 'connects', 'threaded tube'), True)	(('threaded tube', 'connects', 'base'), True)
Constraint 1: x rln y <-> y rln x	(('threaded tube', 'connects', 'harp'), True)	(('harp', 'connects', 'threaded tube'), True)
Constraint 1: x rln y <-> y rln x	(('threaded tube', 'connects', 'body'), True)	(('body', 'connects', 'threaded tube'), True)
Constraint 1: x rln y <-> y rln x	(('body', 'connects', 'plug'), True)	(('plug', 'connects', 'body'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('bulb', 'surrounds', 'shade'), False)	(('shade', 'surrounded by', 'bulb'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('socket shell', 'surrounds', 'shade'), False)	(('shade', 'surrounded by', 'socket shell'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('switch', 'surrounds', 'shade'), False)	(('shade', 'surrounded by', 'switch'), False)
Round 3 ...
tent worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('window', 'part of', 'waterproof flysheet'), True)	(('waterproof flysheet', 'part of', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'part of', 'waterproof flysheet'), True)	(('waterproof flysheet', 'has part', 'window'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('waterproof flysheet', 'surrounds', 'poles'), True)	(('poles', 'surrounds', 'waterproof flysheet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waterproof flysheet', 'surrounds', 'poles'), True)	(('poles', 'surrounded by', 'waterproof flysheet'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('poles', 'surrounds', 'inner tent'), True)	(('inner tent', 'surrounds', 'poles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('poles', 'surrounds', 'inner tent'), True)	(('inner tent', 'surrounded by', 'poles'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('poles', 'above', 'peg loops'), True)	(('peg loops', 'above', 'poles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('poles', 'above', 'peg loops'), True)	(('peg loops', 'below', 'poles'), True)
Constraint 1: x rln y <-> y rln x	(('poles', 'connects', 'peg loops'), True)	(('peg loops', 'connects', 'poles'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('inner tent', 'behind', 'insect proof mesh door'), True)	(('insect proof mesh door', 'behind', 'inner tent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('inner tent', 'behind', 'insect proof mesh door'), True)	(('insect proof mesh door', 'in front of', 'inner tent'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('insect proof mesh door', 'behind', 'porch'), True)	(('porch', 'behind', 'insect proof mesh door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insect proof mesh door', 'behind', 'porch'), True)	(('porch', 'in front of', 'insect proof mesh door'), True)
Constraint 4 (True antecedent)	('waterproof flysheet', 'surrounds', 'poles')('poles', 'surrounds', 'inner tent')	(('waterproof flysheet', 'surrounds', 'inner tent'), True)
Constraint 4 (True antecedent)	('inner tent', 'behind', 'insect proof mesh door')('insect proof mesh door', 'behind', 'porch')	(('inner tent', 'behind', 'porch'), True)
Constraint 4 (True antecedent)	('inner tent', 'surrounded by', 'poles')('poles', 'surrounded by', 'waterproof flysheet')	(('inner tent', 'surrounded by', 'waterproof flysheet'), True)
Constraint 4 (True antecedent)	('porch', 'in front of', 'insect proof mesh door')('insect proof mesh door', 'in front of', 'inner tent')	(('porch', 'in front of', 'inner tent'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('waterproof flysheet', 'part of', 'window'), False)	(('window', 'has part', 'waterproof flysheet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('poles', 'surrounds', 'waterproof flysheet'), False)	(('waterproof flysheet', 'surrounded by', 'poles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('inner tent', 'surrounds', 'poles'), False)	(('poles', 'surrounded by', 'inner tent'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('peg loops', 'above', 'poles'), False)	(('poles', 'below', 'peg loops'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insect proof mesh door', 'behind', 'inner tent'), False)	(('inner tent', 'in front of', 'insect proof mesh door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('porch', 'behind', 'insect proof mesh door'), False)	(('insect proof mesh door', 'in front of', 'porch'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('waterproof flysheet', 'surrounds', 'inner tent'), True)	(('inner tent', 'surrounds', 'waterproof flysheet'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('inner tent', 'behind', 'porch'), True)	(('porch', 'behind', 'inner tent'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('inner tent', 'surrounded by', 'waterproof flysheet'), True)	(('waterproof flysheet', 'surrounded by', 'inner tent'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('porch', 'in front of', 'inner tent'), True)	(('inner tent', 'in front of', 'porch'), False)
Round 3 ...
tent worker_102...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('waterproof flysheet', 'behind', 'insect proof mesh door'), True)	(('insect proof mesh door', 'behind', 'waterproof flysheet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waterproof flysheet', 'behind', 'insect proof mesh door'), True)	(('insect proof mesh door', 'in front of', 'waterproof flysheet'), True)
Constraint 1: x rln y <-> y rln x	(('poles', 'next to', 'window'), True)	(('window', 'next to', 'poles'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('poles', 'above', 'peg loops'), True)	(('peg loops', 'above', 'poles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('poles', 'above', 'peg loops'), True)	(('peg loops', 'below', 'poles'), True)
Constraint 1: x rln y <-> y rln x	(('poles', 'connects', 'peg loops'), True)	(('peg loops', 'connects', 'poles'), True)
Constraint 1: x rln y <-> y rln x	(('window', 'next to', 'waterproof flysheet'), True)	(('waterproof flysheet', 'next to', 'window'), True)
Constraint 1: x rln y <-> y rln x	(('window', 'next to', 'insect proof mesh door'), True)	(('insect proof mesh door', 'next to', 'window'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('insect proof mesh door', 'above', 'porch'), True)	(('porch', 'above', 'insect proof mesh door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insect proof mesh door', 'above', 'porch'), True)	(('porch', 'below', 'insect proof mesh door'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('insect proof mesh door', 'behind', 'waterproof flysheet'), False)	(('waterproof flysheet', 'in front of', 'insect proof mesh door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('peg loops', 'above', 'poles'), False)	(('poles', 'below', 'peg loops'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('porch', 'above', 'insect proof mesh door'), False)	(('insect proof mesh door', 'below', 'porch'), False)
Round 3 ...
tent worker_103...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('poles', 'connects', 'peg loops'), True)	(('peg loops', 'connects', 'poles'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('waterproof flysheet', 'surrounds', 'poles'), True)	(('poles', 'surrounds', 'waterproof flysheet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waterproof flysheet', 'surrounds', 'poles'), True)	(('poles', 'surrounded by', 'waterproof flysheet'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('waterproof flysheet', 'surrounds', 'window'), True)	(('window', 'surrounds', 'waterproof flysheet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waterproof flysheet', 'surrounds', 'window'), True)	(('window', 'surrounded by', 'waterproof flysheet'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('waterproof flysheet', 'surrounds', 'insect proof mesh door'), True)	(('insect proof mesh door', 'surrounds', 'waterproof flysheet'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('waterproof flysheet', 'surrounds', 'insect proof mesh door'), True)	(('insect proof mesh door', 'surrounded by', 'waterproof flysheet'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('insect proof mesh door', 'behind', 'porch'), True)	(('porch', 'behind', 'insect proof mesh door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insect proof mesh door', 'behind', 'porch'), True)	(('porch', 'in front of', 'insect proof mesh door'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('poles', 'surrounds', 'waterproof flysheet'), False)	(('waterproof flysheet', 'surrounded by', 'poles'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('window', 'surrounds', 'waterproof flysheet'), False)	(('waterproof flysheet', 'surrounded by', 'window'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('insect proof mesh door', 'surrounds', 'waterproof flysheet'), False)	(('waterproof flysheet', 'surrounded by', 'insect proof mesh door'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('porch', 'behind', 'insect proof mesh door'), False)	(('insect proof mesh door', 'in front of', 'porch'), False)
Round 3 ...
tree worker_101...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'above', 'roots'), True)	(('roots', 'above', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'above', 'roots'), True)	(('roots', 'below', 'trunk'), True)
Constraint 1: x rln y <-> y rln x	(('trunk', 'connects', 'roots'), True)	(('roots', 'connects', 'trunk'), True)
Constraint 1: x rln y <-> y rln x	(('trunk', 'connects', 'branches'), True)	(('branches', 'connects', 'trunk'), True)
Constraint 1: x rln y <-> y rln x	(('trunk', 'next to', 'branches'), True)	(('branches', 'next to', 'trunk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('branches', 'part of', 'crown'), True)	(('crown', 'part of', 'branches'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('branches', 'part of', 'crown'), True)	(('crown', 'has part', 'branches'), True)
Constraint 1: x rln y <-> y rln x	(('branches', 'next to', 'leaves'), True)	(('leaves', 'next to', 'branches'), True)
Constraint 1: x rln y <-> y rln x	(('branches', 'connects', 'leaves'), True)	(('leaves', 'connects', 'branches'), True)
Constraint 1: x rln y <-> y rln x	(('branches', 'connects', 'twig'), True)	(('twig', 'connects', 'branches'), True)
Constraint 1: x rln y <-> y rln x	(('branches', 'next to', 'twig'), True)	(('twig', 'next to', 'branches'), True)
Constraint 1: x rln y <-> y rln x	(('twig', 'connects', 'leaves'), True)	(('leaves', 'connects', 'twig'), True)
Constraint 1: x rln y <-> y rln x	(('twig', 'next to', 'leaves'), True)	(('leaves', 'next to', 'twig'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leaves', 'part of', 'crown'), True)	(('crown', 'part of', 'leaves'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaves', 'part of', 'crown'), True)	(('crown', 'has part', 'leaves'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('roots', 'above', 'trunk'), False)	(('trunk', 'below', 'roots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crown', 'part of', 'branches'), False)	(('branches', 'has part', 'crown'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crown', 'part of', 'leaves'), False)	(('leaves', 'has part', 'crown'), False)
Round 3 ...
tree worker_102...Round 1 ...
Constraint 1: x rln y <-> y rln x	(('trunk', 'connects', 'roots'), True)	(('roots', 'connects', 'trunk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'requires', 'roots'), True)	(('roots', 'requires', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'requires', 'roots'), True)	(('roots', 'required by', 'trunk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'above', 'roots'), True)	(('roots', 'above', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'above', 'roots'), True)	(('roots', 'below', 'trunk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('branches', 'above', 'trunk'), True)	(('trunk', 'above', 'branches'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('branches', 'above', 'trunk'), True)	(('trunk', 'below', 'branches'), True)
Constraint 1: x rln y <-> y rln x	(('branches', 'connects', 'trunk'), True)	(('trunk', 'connects', 'branches'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('branches', 'part of', 'crown'), True)	(('crown', 'part of', 'branches'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('branches', 'part of', 'crown'), True)	(('crown', 'has part', 'branches'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('crown', 'above', 'trunk'), True)	(('trunk', 'above', 'crown'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crown', 'above', 'trunk'), True)	(('trunk', 'below', 'crown'), True)
Constraint 1: x rln y <-> y rln x	(('branches', 'connects', 'twig'), True)	(('twig', 'connects', 'branches'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leaves', 'part of', 'crown'), True)	(('crown', 'part of', 'leaves'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaves', 'part of', 'crown'), True)	(('crown', 'has part', 'leaves'), True)
Constraint 1: x rln y <-> y rln x	(('twig', 'connects', 'leaves'), True)	(('leaves', 'connects', 'twig'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('twig', 'part of', 'crown'), True)	(('crown', 'part of', 'twig'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('twig', 'part of', 'crown'), True)	(('crown', 'has part', 'twig'), True)
Constraint 4 (True antecedent)	('branches', 'above', 'trunk')('trunk', 'above', 'roots')	(('branches', 'above', 'roots'), True)
Constraint 4 (True antecedent)	('crown', 'above', 'trunk')('trunk', 'above', 'roots')	(('crown', 'above', 'roots'), True)
Constraint 4 (True antecedent)	('roots', 'below', 'trunk')('trunk', 'below', 'branches')	(('roots', 'below', 'branches'), True)
Constraint 4 (True antecedent)	('roots', 'below', 'trunk')('trunk', 'below', 'crown')	(('roots', 'below', 'crown'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('roots', 'requires', 'trunk'), False)	(('trunk', 'required by', 'roots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('roots', 'above', 'trunk'), False)	(('trunk', 'below', 'roots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'above', 'branches'), False)	(('branches', 'below', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crown', 'part of', 'branches'), False)	(('branches', 'has part', 'crown'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'above', 'crown'), False)	(('crown', 'below', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crown', 'part of', 'leaves'), False)	(('leaves', 'has part', 'crown'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crown', 'part of', 'twig'), False)	(('twig', 'has part', 'crown'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('branches', 'above', 'roots'), True)	(('roots', 'above', 'branches'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('crown', 'above', 'roots'), True)	(('roots', 'above', 'crown'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roots', 'below', 'branches'), True)	(('branches', 'below', 'roots'), False)
Constraint 2: x rln y -> NOT(y rln x)	(('roots', 'below', 'crown'), True)	(('crown', 'below', 'roots'), False)
Round 3 ...
tree worker_107...Round 1 ...
Constraint 2: x rln y -> NOT(y rln x)	(('trunk', 'above', 'roots'), True)	(('roots', 'above', 'trunk'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('trunk', 'above', 'roots'), True)	(('roots', 'below', 'trunk'), True)
Constraint 1: x rln y <-> y rln x	(('trunk', 'connects', 'crown'), True)	(('crown', 'connects', 'trunk'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('branches', 'part of', 'crown'), True)	(('crown', 'part of', 'branches'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('branches', 'part of', 'crown'), True)	(('crown', 'has part', 'branches'), True)
Constraint 1: x rln y <-> y rln x	(('twigs', 'connects', 'branches'), True)	(('branches', 'connects', 'twigs'), True)
Constraint 1: x rln y <-> y rln x	(('branches', 'connects', 'twig'), True)	(('twig', 'connects', 'branches'), True)
Constraint 1: x rln y <-> y rln x	(('twig', 'connects', 'leaves'), True)	(('leaves', 'connects', 'twig'), True)
Constraint 2: x rln y -> NOT(y rln x)	(('leaves', 'part of', 'crown'), True)	(('crown', 'part of', 'leaves'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('leaves', 'part of', 'crown'), True)	(('crown', 'has part', 'leaves'), True)
Round 2 ...
Constraint 3: x rln y <-> y inverse(rln) x	(('roots', 'above', 'trunk'), False)	(('trunk', 'below', 'roots'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crown', 'part of', 'branches'), False)	(('branches', 'has part', 'crown'), False)
Constraint 3: x rln y <-> y inverse(rln) x	(('crown', 'part of', 'leaves'), False)	(('leaves', 'has part', 'crown'), False)
Round 3 ...
